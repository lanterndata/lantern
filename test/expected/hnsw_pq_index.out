DROP TABLE IF EXISTS sift_base1k;
NOTICE:  table "sift_base1k" does not exist, skipping
\ir utils/sift1k_array.sql
CREATE TABLE IF NOT EXISTS sift_base1k (
    id SERIAL,
    v REAL[]
);
COPY sift_base1k (v) FROM '/tmp/lantern/vector_datasets/sift_base1k_arrays.csv' WITH csv;
\ir utils/sift1k_array_query.sql
SELECT
   b.id, 
   ARRAY(SELECT id FROM sift_base1k b2 ORDER BY l2sq_dist(b.v, b2.v) LIMIT 10)::INT[] as indices
INTO sift_truth1k
FROM sift_base1k b
WHERE id IN (SELECT id FROM sift_base1k ORDER BY id LIMIT 100);
SELECT id, v INTO sift_query1k FROM sift_base1k ORDER BY id LIMIT 100;
\ir utils/random_array.sql
CREATE OR REPLACE FUNCTION random_int_array(dim integer, min integer, max integer) RETURNS integer[] AS $BODY$
begin
        return (select array_agg(round(random() * (max - min)) + min) from generate_series (0, dim - 1));
end
$BODY$ LANGUAGE plpgsql;
CREATE OR REPLACE FUNCTION random_array(dim integer, min real, max real) RETURNS REAL[] AS $BODY$
begin
        return (select array_agg(random() * (max - min) + min) from generate_series (0, dim - 1));
end
$BODY$ LANGUAGE plpgsql;
\ir utils/calculate_recall.sql
CREATE OR REPLACE FUNCTION calculate_table_recall(tbl regclass, query_tbl regclass, truth_tbl regclass, col NAME, k INT, cnt INT)
RETURNS FLOAT
AS $$
DECLARE
stmt TEXT;
result FLOAT;
BEGIN
    stmt := format('
        SELECT ROUND(AVG(r.q_recall)::numeric, 2) FROM (WITH q AS (
            SELECT
                id,
                v
            FROM
                %2$I
            LIMIT
                %6$s
        )
        SELECT 
            ARRAY_LENGTH(
            ARRAY(
                SELECT UNNEST(array_agg(b.id))
                INTERSECT
                SELECT UNNEST(t.indices[1:%5$s])
            ), 1)::FLOAT / %5$s::FLOAT as q_recall
        FROM q
        JOIN LATERAL (
            SELECT
                id
            FROM
                %1$I
            ORDER BY
                %1$I.%4$I <-> q.v
            LIMIT
                %5$s
        ) b ON TRUE
        LEFT JOIN
            %3$I AS t
        ON
            t.id = q.id
        GROUP BY
            q.id,
            t.indices) r;
    ', tbl, query_tbl, truth_tbl, col, k, cnt);

     EXECUTE stmt INTO result;
     RETURN result;
END;
$$ LANGUAGE plpgsql;
-- \ir ./utils/common.sql
DROP TABLE IF EXISTS small_world_pq;
NOTICE:  table "small_world_pq" does not exist, skipping
CREATE TABLE small_world_pq (
    id SERIAL,
    v REAL[]
);
INSERT INTO small_world_pq (id,v) VALUES
(0, ARRAY[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),
(1, ARRAY[0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1]),
(2, ARRAY[0.2,0.2,0.2,0.2,0.2,0.2,0.2,0.2,0.2,0.2,0.2,0.2,0.2,0.2,0.2,0.2]),
(3, ARRAY[0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3]),
(4, ARRAY[0.4,0.4,0.4,0.4,0.4,0.4,0.4,0.4,0.4,0.4,0.4,0.4,0.4,0.4,0.4,0.4]),
(5, ARRAY[0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5]),
(6, ARRAY[0.6,0.6,0.6,0.6,0.6,0.6,0.6,0.6,0.6,0.6,0.6,0.6,0.6,0.6,0.6,0.6]),
(7, ARRAY[0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7]),
(8, ARRAY[0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8]),
(9, ARRAY[0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9]);
SELECT quantize_table('small_world_pq', 'v', 10, 4, 'l2sq');
INFO:  Table scanned. Dataset size 10
INFO:  Starting k-means over dataset with (subvectors=4, clusters=10)
INFO:  Codebooks created
NOTICE:  table "_codebook_small_world_pq_v" does not exist, skipping
INFO:  Compressing vectors...
 quantize_table 
----------------
 
(1 row)

SELECT COUNT(DISTINCT subvector_id) FROM _lantern_internal._codebook_small_world_pq_v;
 count 
-------
     4
(1 row)

SELECT COUNT(DISTINCT centroid_id) FROM _lantern_internal._codebook_small_world_pq_v;
 count 
-------
    10
(1 row)

\d small_world_pq
                                                                             Table "public.small_world_pq"
 Column |  Type   | Collation | Nullable |                                                                   Default                                                                    
--------+---------+-----------+----------+----------------------------------------------------------------------------------------------------------------------------------------------
 id     | integer |           | not null | nextval('small_world_pq_id_seq'::regclass)
 v      | real[]  |           |          | 
 v_pq   | pqvec   |           |          | generated always as (_lantern_internal.quantize_vector(v, 4, '_lantern_internal._codebook_small_world_pq_v'::regclass, 'l2sq'::text)) stored

ALTER TABLE small_world_pq ADD COLUMN v_pq_dec REAL[];
UPDATE small_world_pq SET v_pq_dec=decompress_vector(v_pq, '_lantern_internal._codebook_small_world_pq_v');
SET enable_seqscan=OFF;
SELECT v as v4 FROM small_world_pq WHERE id = 4 \gset
-- index without pq
CREATE INDEX hnsw_l2_index ON small_world_pq USING lantern_hnsw(v) WITH (pq=False);
INFO:  done init usearch index
INFO:  inserted 10 elements
INFO:  done saving 10 vectors
EXPLAIN (COSTS FALSE) SELECT id, v, v_pq, v_pq_dec FROM small_world_pq ORDER BY v <-> :'v4' LIMIT 1;
                                              QUERY PLAN                                               
-------------------------------------------------------------------------------------------------------
 Limit
   ->  Index Scan using hnsw_l2_index on small_world_pq
         Order By: (v <-> '{0.4,0.4,0.4,0.4,0.4,0.4,0.4,0.4,0.4,0.4,0.4,0.4,0.4,0.4,0.4,0.4}'::real[])
(3 rows)

SELECT id FROM small_world_pq ORDER BY v <-> :'v4' LIMIT 1;
 id 
----
  4
(1 row)

SELECT * FROM ldb_get_indexes('small_world_pq');
   indexname   | size  |                                           indexdef                                           | total_index_size 
---------------+-------+----------------------------------------------------------------------------------------------+------------------
 hnsw_l2_index | 24 kB | CREATE INDEX hnsw_l2_index ON public.small_world_pq USING lantern_hnsw (v) WITH (pq='false') | 24 kB
(1 row)

DROP INDEX hnsw_l2_index;
-- index with pq
CREATE INDEX hnsw_pq_l2_index ON small_world_pq USING lantern_hnsw(v) WITH (pq=True);
INFO:  done init usearch index
INFO:  inserted 10 elements
INFO:  done saving 10 vectors
EXPLAIN (COSTS FALSE) SELECT id, v, v_pq, v_pq_dec, (v <-> :'v4') as dist, (v_pq_dec <-> :'v4') real_dist FROM small_world_pq ORDER BY dist LIMIT 1;
                                              QUERY PLAN                                               
-------------------------------------------------------------------------------------------------------
 Limit
   ->  Index Scan using hnsw_pq_l2_index on small_world_pq
         Order By: (v <-> '{0.4,0.4,0.4,0.4,0.4,0.4,0.4,0.4,0.4,0.4,0.4,0.4,0.4,0.4,0.4,0.4}'::real[])
(3 rows)

SELECT id FROM small_world_pq ORDER BY v <-> :'v4' LIMIT 1;
 id 
----
  4
(1 row)

ALTER TABLE small_world_pq DROP COLUMN v_pq;
ALTER TABLE small_world_pq DROP COLUMN v_pq_dec;
DROP TABLE _lantern_internal._codebook_small_world_pq_v;
DROP INDEX hnsw_pq_l2_index;
SELECT quantize_table('small_world_pq', 'v', 4, 8, 'l2sq');
INFO:  Table scanned. Dataset size 10
INFO:  Starting k-means over dataset with (subvectors=8, clusters=4)
INFO:  Codebooks created
NOTICE:  table "_codebook_small_world_pq_v" does not exist, skipping
INFO:  Compressing vectors...
 quantize_table 
----------------
 
(1 row)

ALTER TABLE small_world_pq ADD COLUMN v_pq_dec REAL[]; --  GENERATED ALWAYS AS (decompress_vector("v_pq", '_lantern_codebook_small_world_pq')) STORED; -- << cannot do because genrated columns cannot refer to other generated columns
UPDATE small_world_pq SET v_pq_dec=decompress_vector(v_pq, '_lantern_internal._codebook_small_world_pq_v');
CREATE INDEX hnsw_pq_l2_index ON small_world_pq USING lantern_hnsw(v) WITH (pq=True);
INFO:  done init usearch index
INFO:  inserted 10 elements
INFO:  done saving 10 vectors
EXPLAIN (COSTS FALSE) SELECT id, v, v_pq, v_pq_dec, (v <-> :'v4') as dist, (v_pq_dec <-> :'v4') real_dist FROM small_world_pq ORDER BY dist LIMIT 1;
                                              QUERY PLAN                                               
-------------------------------------------------------------------------------------------------------
 Limit
   ->  Index Scan using hnsw_pq_l2_index on small_world_pq
         Order By: (v <-> '{0.4,0.4,0.4,0.4,0.4,0.4,0.4,0.4,0.4,0.4,0.4,0.4,0.4,0.4,0.4,0.4}'::real[])
(3 rows)

SELECT id FROM small_world_pq ORDER BY v <-> :'v4' LIMIT 1;
 id 
----
  4
(1 row)

-- add another entry with vector v4, and search for it again
INSERT INTO small_world_pq(id, v) VALUES (42, :'v4');
SELECT id FROM small_world_pq ORDER BY v <-> :'v4' LIMIT 2;
 id 
----
 42
  4
(2 rows)

ALTER TABLE small_world_pq DROP COLUMN v_pq;
ALTER TABLE small_world_pq DROP COLUMN v_pq_dec;
DROP TABLE _lantern_internal._codebook_small_world_pq_v;
DROP INDEX hnsw_pq_l2_index;
ALTER TABLE small_world_pq SET UNLOGGED;
SELECT quantize_table('small_world_pq', 'v', 7, 2, 'l2sq');
INFO:  Table scanned. Dataset size 11
INFO:  Starting k-means over dataset with (subvectors=2, clusters=7)
INFO:  Codebooks created
NOTICE:  table "_codebook_small_world_pq_v" does not exist, skipping
INFO:  Compressing vectors...
 quantize_table 
----------------
 
(1 row)

ALTER TABLE small_world_pq ADD COLUMN v_pq_dec REAL[];
UPDATE small_world_pq SET v_pq_dec=decompress_vector(v_pq, '_lantern_internal._codebook_small_world_pq_v');
CREATE INDEX hnsw_pq_l2_index ON small_world_pq USING lantern_hnsw(v) WITH (pq=True);
INFO:  done init usearch index
INFO:  inserted 11 elements
INFO:  done saving 11 vectors
-- we had inserted a value with id=42 and vector=:'v4' above, before making the table unlogged
SELECT id FROM small_world_pq ORDER BY v <-> :'v4' LIMIT 2;
 id 
----
 42
  4
(2 rows)

-- add another entry with vector v4, and search for it again
INSERT INTO small_world_pq(id, v) VALUES (44, :'v4');
SELECT id FROM small_world_pq ORDER BY v <-> :'v4' LIMIT 3;
 id 
----
 44
 42
  4
(3 rows)

-- Larger indexes
SELECT quantize_table('sift_base1k'::regclass, 'v', 200, 32, 'l2sq');
INFO:  Table scanned. Dataset size 1000
INFO:  Starting k-means over dataset with (subvectors=32, clusters=200)
INFO:  Codebooks created
NOTICE:  table "_codebook_sift_base1k_v" does not exist, skipping
INFO:  Compressing vectors...
 quantize_table 
----------------
 
(1 row)

SELECT v as v1 FROM sift_base1k WHERE id=1 \gset
SELECT v_pq as v1_pq FROM sift_base1k WHERE id=1 \gset
ALTER TABLE sift_base1k ADD COLUMN v_pq_dec REAL[];
-- add trigger to auto-update v_pq_dec (cannot make this generated since the base of it - v_pq - is already generated and postgres does not allow using it in generated statements)
CREATE OR REPLACE FUNCTION v_pq_dec_update_trigger()
RETURNS TRIGGER AS $$
DECLARE
   v_pq pqvec;
BEGIN
  -- cannot use the generated column as it has not been created at this point
  v_pq = quantize_vector(NEW.v, '_lantern_internal._codebook_sift_base1k_v', 'l2sq');
  NEW.v_pq_dec :=  decompress_vector(v_pq, '_lantern_internal._codebook_sift_base1k_v');
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;
CREATE TRIGGER v_pq_dec_insert_update
BEFORE INSERT OR UPDATE ON sift_base1k
FOR EACH ROW
EXECUTE FUNCTION v_pq_dec_update_trigger();
UPDATE sift_base1k SET v_pq_dec=decompress_vector(v_pq, '_lantern_internal._codebook_sift_base1k_v');
-- this will always be one
-- SELECT calculate_table_recall('sift_base1k', 'sift_query1k', 'sift_truth1k', 'v', 10, 100) as recall \gset
SELECT calculate_table_recall('sift_base1k', 'sift_query1k', 'sift_truth1k', 'v_pq_dec', 10, 100) as recall_pq \gset
CREATE INDEX sift_base1k_pq_index ON sift_base1k USING lantern_hnsw(v) WITH (pq=True);
INFO:  done init usearch index
INFO:  inserted 1000 elements
INFO:  done saving 1000 vectors
SELECT calculate_table_recall('sift_base1k', 'sift_query1k', 'sift_truth1k', 'v', 10, 100) as recall_pq_index \gset
SELECT (:'recall_pq'::float - :'recall_pq_index'::float)::float as recall_diff \gset
-- pq index costs no more than 10% in addition to what quantization has already cost us
-- recall diff must be positive but not large - the positive check sanity-checks that the index was used in calculate_table_recall
SELECT :recall_diff > 0 AND :recall_diff < 0.1 as recall_within_range;
 recall_within_range 
---------------------
 t
(1 row)

-- inserts
SELECT v as v2 FROM sift_base1k WHERE id=2 \gset
SELECT random_array(128, 0.0, 5.0) as v1002 \gset
INSERT INTO sift_base1k(id, v) VALUES (1001, :'v2');
INSERT INTO sift_base1k(id, v) VALUES (1002, :'v1002');
-- check that the random vector is in the top 5 position
SELECT SUM(id1002::int) = 1 as contains_id_1002 FROM (SELECT id = 1002 as id1002 FROM sift_base1k ORDER BY v <-> :'v1002' LIMIT 5) b;
 contains_id_1002 
------------------
 t
(1 row)

-- the top two results must be the vectors corresponding to v2
SELECT id FROM sift_base1k ORDER BY v <-> :'v2' LIMIT 2;
  id  
------
 1001
    2
(2 rows)

-- since codebook are generated each time and are non deterministic, we cannot print them in regression tests.
-- run something like the following to view the results
-- SELECT id, v_pq, (v <-> :'v1002') as dist, (v_pq_dec <-> :'v1002') pq_dist FROM sift_base1k ORDER BY dist LIMIT 3;
