CREATE TABLE small_world_l2 (
    id varchar(3),
    vector real[]
);
INSERT INTO small_world_l2 (id, vector) VALUES 
('000', '{0,0,0}'),
('001', '{0,0,1}'),
('010', '{0,1,0}'),
('011', '{0,1,1}'),
('100', '{1,0,0}'),
('101', '{1,0,1}'),
('110', '{1,1,0}'),
('111', '{1,1,1}');
SET enable_seqscan = false;
-- this should not throw error as it is string
select 'array[1,2,3] <-> array[4,5,6]';
           ?column?            
-------------------------------
 array[1,2,3] <-> array[4,5,6]
(1 row)

\set ON_ERROR_STOP off
-- this should  throw error as it is out of index usage
select array[1,2,3] <-> array[4,5,6];
ERROR:  Operator <-> has no standalone meaning and is reserved for use in vector index lookups only
-- this should throw error, as it is out of index usage
SELECT * FROM (
    SELECT id, ROUND(l2sq_dist(vector, array[0,1,0])::numeric, 2) as dist
    FROM small_world_l2
    ORDER BY vector <-> array[0,1,0] LIMIT 7
) v ORDER BY v.dist, v.id;
ERROR:  Operator <-> has no standalone meaning and is reserved for use in vector index lookups only

\set ON_ERROR_STOP on
CREATE INDEX ON small_world_l2 USING hnsw (vector ann_l2_ops);
INFO:  done init usearch index
INFO:  inserted 8 elements
INFO:  done saving 8 vectors
-- this should not throw error, as it is index usage
SELECT * FROM (
    SELECT id, ROUND(l2sq_dist(vector, array[0,1,0])::numeric, 2) as dist
    FROM small_world_l2
    ORDER BY vector <-> array[0,1,0] LIMIT 7
) v ORDER BY v.dist, v.id;
INFO:  began scanning with 0 keys and 1 orderbys
INFO:  starting scan with dimensions=3 M=16 efConstruction=128 ef=64
INFO:  usearch index initialized
 id  | dist 
-----+------
 010 | 0.00
 000 | 1.00
 011 | 1.00
 001 | 2.00
 100 | 2.00
 111 | 2.00
 101 | 3.00
(7 rows)

-- this should use index
EXPLAIN SELECT * FROM (
    SELECT id, ROUND(l2sq_dist(vector, array[0,1,0])::numeric, 2) as dist
    FROM small_world_l2
    ORDER BY vector <-> array[0,1,0] LIMIT 7
) v ORDER BY v.dist, v.id;
                                                     QUERY PLAN                                                     
--------------------------------------------------------------------------------------------------------------------
 Sort  (cost=14.36..14.38 rows=7 width=48)
   Sort Key: v.dist, v.id
   ->  Subquery Scan on v  (cost=0.00..14.26 rows=7 width=48)
         ->  Limit  (cost=0.00..14.19 rows=7 width=52)
               ->  Index Scan using small_world_l2_vector_idx on small_world_l2  (cost=0.00..16.22 rows=8 width=52)
                     Order By: (vector <-> '{0,1,0}'::real[])
(6 rows)

