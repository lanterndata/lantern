-- Validate that lantern.pgvector_compat disables the operator rewriting hooks
CREATE TABLE op_test (v REAL[]);
INSERT INTO op_test (v) VALUES (ARRAY[0,0,0]), (ARRAY[1,1,1]);
CREATE INDEX cos_idx ON op_test USING hnsw(v dist_cos_ops);
INFO:  done init usearch index
INFO:  inserted 2 elements
INFO:  done saving 2 vectors
-- should rewrite operator
SET lantern.pgvector_compat=FALSE;
SELECT * FROM op_test ORDER BY v <-> ARRAY[1,1,1];
    v    
---------
 {1,1,1}
 {0,0,0}
(2 rows)

-- should throw error
\set ON_ERROR_STOP off
SET lantern.pgvector_compat=FALSE;
SELECT * FROM op_test ORDER BY v <=> ARRAY[1,1,1];
ERROR:  Operator can only be used when lantern.pgvector_compat=TRUE
-- should throw error
SELECT * FROM op_test ORDER BY v::INTEGER[] <+> ARRAY[1,1,1];
ERROR:  Operator can only be used when lantern.pgvector_compat=TRUE
-- should throw error
SELECT v <-> ARRAY[1,1,1] FROM op_test ORDER BY v <-> ARRAY[1,1,1];
ERROR:  Operator <-> is invalid outside of ORDER BY context
SET lantern.pgvector_compat=TRUE;
SET enable_seqscan=OFF;
\set ON_ERROR_STOP on
-- one-off vector distance calculations should work with relevant operator
-- with integer arrays:
SELECT ARRAY[0,0,0] <-> ARRAY[2,3,-4];
 ?column? 
----------
       29
(1 row)

-- with float arrays:
SELECT ARRAY[0,0,0] <-> ARRAY[2,3,-4]::real[];
 ?column? 
----------
       29
(1 row)

SELECT ARRAY[0,0,0]::real[] <-> ARRAY[2,3,-4]::real[];
 ?column? 
----------
       29
(1 row)

SELECT '{1,0,1}' <-> '{0,1,0}'::integer[];
 ?column? 
----------
        3
(1 row)

SELECT '{1,0,1}' <=> '{0,1,0}'::integer[];
 ?column? 
----------
        1
(1 row)

SELECT ROUND(num::NUMERIC, 2) FROM (SELECT '{1,1,1}' <=> '{0,1,0}'::INTEGER[] AS num) _sub;
 round 
-------
  0.42
(1 row)

SELECT ARRAY[.1,0,0] <=> ARRAY[0,.5,0];
 ?column? 
----------
        1
(1 row)

SELECT cos_dist(ARRAY[.1,0,0]::real[], ARRAY[0,.5,0]::real[]);
 cos_dist 
----------
        1
(1 row)

SELECT ARRAY[1,0,0] <+> ARRAY[0,1,0];
 ?column? 
----------
        2
(1 row)

-- NOW THIS IS TRIGGERING INDEX SCAN AS WELL
-- BECAUSE WE ARE REGISTERING <-> FOR ALL OPERATOR CLASSES
-- IDEALLY THIS SHOULD NOT TRIGGER INDEX SCAN WHEN lantern.pgvector_compat=TRUE
EXPLAIN (COSTS FALSE) SELECT * FROM op_test ORDER BY v <-> ARRAY[1,1,1];
              QUERY PLAN               
---------------------------------------
 Index Scan using cos_idx on op_test
   Order By: (v <-> '{1,1,1}'::real[])
(2 rows)

-- should sort with index
EXPLAIN (COSTS FALSE) SELECT * FROM op_test ORDER BY v <=> ARRAY[1,1,1];
              QUERY PLAN               
---------------------------------------
 Index Scan using cos_idx on op_test
   Order By: (v <=> '{1,1,1}'::real[])
(2 rows)

-- should sort without index
EXPLAIN (COSTS FALSE) SELECT * FROM op_test ORDER BY v::INTEGER[] <+> ARRAY[1,1,1];
                       QUERY PLAN                        
---------------------------------------------------------
 Sort
   Sort Key: (((v)::integer[] <+> '{1,1,1}'::integer[]))
   ->  Seq Scan on op_test
(3 rows)

-- should not throw error
\set ON_ERROR_STOP on
SELECT v <=> ARRAY[1,1,1] FROM op_test ORDER BY v <=> ARRAY[1,1,1];
 ?column? 
----------
        0
        1
(2 rows)

-- should not throw error
SELECT v::INTEGER[] <+> ARRAY[1,1,1] FROM op_test ORDER BY v::INTEGER[] <+> ARRAY[1,1,1];
 ?column? 
----------
        0
        3
(2 rows)

-- should not throw error
SELECT v <-> ARRAY[1,1,1] FROM op_test ORDER BY v <-> ARRAY[1,1,1];
 ?column? 
----------
        0
        3
(2 rows)

RESET ALL;
-- Set false twice to verify that no crash is happening
SET lantern.pgvector_compat=FALSE;
SET lantern.pgvector_compat=FALSE;
\set ON_ERROR_STOP off
-- should rewrite operator
SELECT * FROM op_test ORDER BY v <-> ARRAY[1,1,1];
    v    
---------
 {1,1,1}
 {0,0,0}
(2 rows)

SET lantern.pgvector_compat=TRUE;
SET enable_seqscan=OFF;
CREATE INDEX hamming_idx ON op_test USING hnsw(cast(v as INTEGER[]) dist_hamming_ops);
INFO:  done init usearch index
INFO:  inserted 2 elements
INFO:  done saving 2 vectors
-- should sort with cos_idx index
EXPLAIN (COSTS FALSE) SELECT * FROM op_test ORDER BY v <=> ARRAY[1,1,1];
              QUERY PLAN               
---------------------------------------
 Index Scan using cos_idx on op_test
   Order By: (v <=> '{1,1,1}'::real[])
(2 rows)

-- should sort with hamming_idx index
EXPLAIN (COSTS FALSE) SELECT * FROM op_test ORDER BY v::INTEGER[] <+> ARRAY[1,1,1];
                      QUERY PLAN                       
-------------------------------------------------------
 Index Scan using hamming_idx on op_test
   Order By: ((v)::integer[] <+> '{1,1,1}'::integer[])
(2 rows)

