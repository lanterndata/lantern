\qecho

\set ON_ERROR_STOP on
-- this take should be made more robust in the following ways
-- 1. make sure selected distances are not so close that numeric rounding
--  would result in different answers on different platforms
-- 2. make sure all columns are sorted so output order is deterministic
--  Make sure pgvector is present
SELECT '[1,2,3]'::vector;
 vector  
---------
 [1,2,3]
(1 row)

CREATE TABLE items (id bigserial PRIMARY KEY, trait_ai vector(3));
INSERT INTO items (trait_ai) VALUES ('[1,2,3]'), ('[4,5,6]');
SELECT * FROM items ORDER BY trait_ai <-> '[3,1,2]' LIMIT 7;
 id | trait_ai 
----+----------
  1 | [1,2,3]
  2 | [4,5,6]
(2 rows)

CREATE INDEX ON items USING hnsw (trait_ai vector_l2_ops);
INFO:  done init usearch index
INFO:  inserted 2 elements
INFO:  done saving 2 vectors
CREATE TABLE large_vector (v vector(2001));
\set ON_ERROR_STOP off
CREATE INDEX ON large_vector USING hnsw (v);
ERROR:  vector dimension 2001 is too large. LanternDB currently supports up to 2000dim vectors
\set ON_ERROR_STOP on
CREATE TABLE small_world (
    id varchar(3),
    vector vector(3)
);
INSERT INTO small_world (id, vector) VALUES
('000', '[0,0,0]'),
('001', '[0,0,1]'),
('010', '[0,1,0]'),
('011', '[0,1,1]'),
('100', '[1,0,0]'),
('101', '[1,0,1]'),
('110', '[1,1,0]'),
('111', '[1,1,1]');
SET enable_seqscan = off;
begin;
CREATE INDEX ON small_world USING hnsw (vector);
INFO:  done init usearch index
INFO:  inserted 8 elements
INFO:  done saving 8 vectors
SELECT * FROM ldb_get_indexes('small_world');
       indexname        | size  |                                   indexdef                                    
------------------------+-------+-------------------------------------------------------------------------------
 small_world_vector_idx | 24 kB | CREATE INDEX small_world_vector_idx ON public.small_world USING hnsw (vector)
(1 row)

SELECT * FROM (
	SELECT id, ROUND(vector_l2sq_dist(vector, '[0,0,0]')::numeric, 2) as dist
	FROM small_world
	ORDER BY vector <-> '[0,0,0]' LIMIT 7
) v ORDER BY v.dist, v.id;
INFO:  began scanning with 0 keys and 1 orderbys
INFO:  starting scan with dimensions=3 M=16 efConstruction=128 ef=64
INFO:  usearch index initialized
 id  | dist 
-----+------
 000 | 0.00
 001 | 1.00
 010 | 1.00
 100 | 1.00
 011 | 2.00
 101 | 2.00
 110 | 2.00
(7 rows)

SELECT * FROM (
	SELECT id, ROUND(vector_l2sq_dist(vector, '[0,1,0]')::numeric, 2) as dist
	FROM small_world
	ORDER BY vector <-> '[0,1,0]' LIMIT 7
) v ORDER BY v.dist, v.id;
INFO:  began scanning with 0 keys and 1 orderbys
INFO:  starting scan with dimensions=3 M=16 efConstruction=128 ef=64
INFO:  usearch index initialized
 id  | dist 
-----+------
 010 | 0.00
 000 | 1.00
 011 | 1.00
 110 | 1.00
 001 | 2.00
 100 | 2.00
 111 | 2.00
(7 rows)

rollback;
begin;
CREATE INDEX ON small_world USING hnsw (vector) WITH (M=2, ef=11, ef_construction=12);
INFO:  done init usearch index
INFO:  inserted 8 elements
INFO:  done saving 8 vectors
SELECT * FROM ldb_get_indexes('small_world');
       indexname        | size  |                                                         indexdef                                                          
------------------------+-------+---------------------------------------------------------------------------------------------------------------------------
 small_world_vector_idx | 24 kB | CREATE INDEX small_world_vector_idx ON public.small_world USING hnsw (vector) WITH (m='2', ef='11', ef_construction='12')
(1 row)

-- Equidistant points from the given vector appear in different order in the output of the inner query
-- depending on postgres version and platform. The outder query forces a deterministic order.
-- Unfortunately, outer query resorts distances as well so if the index sorted them in a wrong order,
-- that would be hidden by the outer query.
-- For that reason we first run a query that only outputs distances so we can see vectors are in fact in the right (approximate)
-- order. Then, we run the second query which outputs id, dist pairs and we sort ids for equal distances in the outer query to get
-- deterministic output.
SELECT ROUND(vector_l2sq_dist(vector, '[0,0,0]')::numeric, 2) as dist
FROM small_world
ORDER BY vector <-> '[0,0,0]' LIMIT 7;
INFO:  began scanning with 0 keys and 1 orderbys
INFO:  starting scan with dimensions=3 M=2 efConstruction=12 ef=11
INFO:  usearch index initialized
 dist 
------
 0.00
 1.00
 1.00
 1.00
 2.00
 2.00
 2.00
(7 rows)

SELECT * FROM (
    SELECT id, ROUND(vector_l2sq_dist(vector, '[0,0,0]')::numeric, 2) as dist
    FROM small_world
    ORDER BY vector <-> '[0,0,0]' LIMIT 7
) v ORDER BY v.dist, v.id;
INFO:  began scanning with 0 keys and 1 orderbys
INFO:  starting scan with dimensions=3 M=2 efConstruction=12 ef=11
INFO:  usearch index initialized
 id  | dist 
-----+------
 000 | 0.00
 001 | 1.00
 010 | 1.00
 100 | 1.00
 011 | 2.00
 101 | 2.00
 110 | 2.00
(7 rows)

SELECT * FROM (
    SELECT id, ROUND(vector_l2sq_dist(vector, '[0,1,0]')::numeric, 2) as dist
    FROM small_world
    ORDER BY vector <-> '[0,1,0]' LIMIT 7
) v ORDER BY v.dist, v.id;
INFO:  began scanning with 0 keys and 1 orderbys
INFO:  starting scan with dimensions=3 M=2 efConstruction=12 ef=11
INFO:  usearch index initialized
 id  | dist 
-----+------
 010 | 0.00
 000 | 1.00
 011 | 1.00
 110 | 1.00
 001 | 2.00
 100 | 2.00
 111 | 2.00
(7 rows)

rollback;
begin;
CREATE INDEX ON small_world USING hnsw (vector) WITH (M=11, ef=2, ef_construction=2);
INFO:  done init usearch index
INFO:  inserted 8 elements
INFO:  done saving 8 vectors
SELECT * FROM ldb_get_indexes('small_world');
       indexname        | size  |                                                         indexdef                                                         
------------------------+-------+--------------------------------------------------------------------------------------------------------------------------
 small_world_vector_idx | 24 kB | CREATE INDEX small_world_vector_idx ON public.small_world USING hnsw (vector) WITH (m='11', ef='2', ef_construction='2')
(1 row)

SELECT * FROM (
    SELECT id, ROUND(vector_l2sq_dist(vector, '[0,0,0]')::numeric, 2) as dist
    FROM small_world
    ORDER BY vector <-> '[0,0,0]' LIMIT 7
) v ORDER BY v.dist, v.id;
INFO:  began scanning with 0 keys and 1 orderbys
INFO:  starting scan with dimensions=3 M=11 efConstruction=2 ef=2
INFO:  usearch index initialized
 id  | dist 
-----+------
 000 | 0.00
 001 | 1.00
 010 | 1.00
 100 | 1.00
 011 | 2.00
 101 | 2.00
 110 | 2.00
(7 rows)

SELECT * FROM (
    SELECT id, ROUND(vector_l2sq_dist(vector, '[0,1,0]')::numeric, 2) as dist
    FROM small_world
    ORDER BY vector <-> '[0,1,0]' LIMIT 7
) v ORDER BY v.dist, v.id;
INFO:  began scanning with 0 keys and 1 orderbys
INFO:  starting scan with dimensions=3 M=11 efConstruction=2 ef=2
INFO:  usearch index initialized
 id  | dist 
-----+------
 010 | 0.00
 000 | 1.00
 011 | 1.00
 110 | 1.00
 001 | 2.00
 100 | 2.00
 111 | 2.00
(7 rows)

rollback;
\echo "Done with hnsw.sql test!"
"Done with hnsw.sql test!"
