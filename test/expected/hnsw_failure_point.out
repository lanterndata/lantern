------------------------------
-- Test HNSW failure points --
------------------------------
CREATE TABLE small_world (
    id SERIAL PRIMARY KEY,
    v REAL[2]
);
CREATE INDEX ON small_world USING lantern_hnsw (v) WITH (dim=3);
INFO:  done init usearch index
INFO:  inserted 0 elements
INFO:  done saving 0 vectors
-- let's insert HNSW_BLOCKMAP_BLOCKS_PER_PAGE (2000) record to fill the first blockmap page
do $$
BEGIN
    FOR i IN 1..2000 LOOP
        INSERT INTO small_world (v) VALUES (array_replace(ARRAY[0,0,-1], -1, i));
    END LOOP;
END $$;
-- everything is fine, the index is valid
SELECT _lantern_internal.validate_index('small_world_v_idx', false);
INFO:  validate_index() start for small_world_v_idx
INFO:  validate_index() done, no issues found.
 validate_index 
----------------
 
(1 row)

-- now let's crash after a buffer for a blockmap is allocated during insert,
-- but it hasn't been recorded yet
SELECT _lantern_internal.failure_point_enable('ContinueBlockMapGroupInitialization', 'just_after_extending_the_index_relation');
INFO:  Failure point (func=ContinueBlockMapGroupInitialization name=just_after_extending_the_index_relation remaining=0) is enabled.
 failure_point_enable 
----------------------
 
(1 row)

-- here is the insert where the crash happens
\set ON_ERROR_STOP off
INSERT INTO small_world (v) VALUES ('{2,2,2}');
INFO:  Failure point (func=ContinueBlockMapGroupInitialization name=just_after_extending_the_index_relation) has been triggered.
ERROR:  ldb_failure_point_crash()
\set ON_ERROR_STOP on
-- now we see that the index has an extra free page, so the index validation fails
\set ON_ERROR_STOP off
SELECT _lantern_internal.validate_index('small_world_v_idx', false);
INFO:  validate_index() start for small_world_v_idx
ERROR:  HnswBlockMapGroupDesc.blockmaps_initialized=0 != NumberOfBlockMapsInGroup()=2 for blockmap_groupno=1
\set ON_ERROR_STOP on
-- now let's continue and finish the blockmap creation and then validate the index again
SELECT _lantern_internal.continue_blockmap_group_initialization('small_world_v_idx');
INFO:  The last blockmap group has been successfully initialized.
 continue_blockmap_group_initialization 
----------------------------------------
 
(1 row)

SELECT _lantern_internal.validate_index('small_world_v_idx', false);
INFO:  validate_index() start for small_world_v_idx
INFO:  validate_index() done, no issues found.
 validate_index 
----------------
 
(1 row)

