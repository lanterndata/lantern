CREATE EXTENSION IF NOT EXISTS lanterndb;
CREATE EXTENSION
CREATE TABLE small_world (
    id varchar(3),
    vector real[]
);
CREATE TABLE
INSERT INTO small_world (id, vector) VALUES 
('000', '{0,0,0}'),
('001', '{0,0,1}'),
('010', '{0,1,0}'),
('011', '{0,1,1}'),
('100', '{1,0,0}'),
('101', '{1,0,1}'),
('110', '{1,1,0}'),
('111', '{1,1,1}');
INSERT 0 8
CREATE INDEX ON small_world USING hnsw (vector);
psql:test/sql/hnsw_insert_array.sql:5: INFO:  done init usearch index
psql:test/sql/hnsw_insert_array.sql:5: INFO:  inserted 8 elements
psql:test/sql/hnsw_insert_array.sql:5: INFO:  done saving 8 vectors
CREATE INDEX
SET enable_seqscan = off;
SET
INSERT INTO small_world (id, vector) VALUES ('xxx', '{0,0,0}');
INSERT 0 1
INSERT INTO small_world (id, vector) VALUES ('x11', '{0,0,110}');
INSERT 0 1
INSERT INTO small_world (id, vector) VALUES 
('000', '{0,0,0}'),
('001', '{0,0,1}'),
('010', '{0,1,0}'),
('011', '{0,1,1}'),
('100', '{1,0,0}'),
('101', '{1,0,1}'),
('110', '{1,1,0}'),
('111', '{1,1,1}');
INSERT 0 8
SELECT * FROM (
    SELECT id, ROUND( (vector <-> array[0,1,0])::numeric, 2) as dist
    FROM small_world
    ORDER BY vector <-> array[0,1,0] LIMIT 7
) v ORDER BY v.dist, v.id;
psql:test/sql/hnsw_insert_array.sql:25: INFO:  cost estimate
psql:test/sql/hnsw_insert_array.sql:25: INFO:  returning small cost to always use the index
psql:test/sql/hnsw_insert_array.sql:25: INFO:  began scanning with 0 keys and 1 orderbys
psql:test/sql/hnsw_insert_array.sql:25: INFO:  starting scan with dimensions=3 M=16 efConstruction=128 ef=64
psql:test/sql/hnsw_insert_array.sql:25: INFO:  usearch index initialized
 id  | dist 
-----+------
 010 | 0.00
 011 | 1.00
 110 | 1.00
 001 | 1.41
 100 | 1.41
 111 | 1.41
 101 | 1.73
(7 rows)

INSERT INTO small_world (id, vector) VALUES 
('000', '{0,0,0}'),
('001', '{0,0,1}'),
('010', '{0,1,0}'),
('011', '{0,1,1}'),
('100', '{1,0,0}'),
('101', '{1,0,1}'),
('110', '{1,1,0}'),
('111', '{1,1,1}');
INSERT 0 8
SELECT * FROM (
    SELECT id, ROUND( (vector <-> array[0,1,0])::numeric, 2) as dist
    FROM small_world
    ORDER BY vector <-> array[0,1,0] LIMIT 7
) v ORDER BY v.dist, v.id;
psql:test/sql/hnsw_insert_array.sql:41: INFO:  cost estimate
psql:test/sql/hnsw_insert_array.sql:41: INFO:  returning small cost to always use the index
psql:test/sql/hnsw_insert_array.sql:41: INFO:  began scanning with 0 keys and 1 orderbys
psql:test/sql/hnsw_insert_array.sql:41: INFO:  starting scan with dimensions=3 M=16 efConstruction=128 ef=64
psql:test/sql/hnsw_insert_array.sql:41: INFO:  usearch index initialized
 id  | dist 
-----+------
 010 | 0.00
 011 | 1.00
 110 | 1.00
 001 | 1.41
 100 | 1.41
 111 | 1.41
 101 | 1.73
(7 rows)

CREATE TABLE new_small_world as SELECT * from small_world;
SELECT 26
CREATE INDEX ON new_small_world USING hnsw (vector);
psql:test/sql/hnsw_insert_array.sql:48: INFO:  done init usearch index
psql:test/sql/hnsw_insert_array.sql:48: INFO:  inserted 26 elements
psql:test/sql/hnsw_insert_array.sql:48: INFO:  done saving 26 vectors
CREATE INDEX
INSERT INTO new_small_world (id, vector) VALUES
('000', '{0,0,0}'),
('001', '{0,0,1}'),
('010', '{0,1,0}'),
('011', '{0,1,1}'),
('100', '{1,0,0}'),
('101', '{1,0,1}'),
('110', '{1,1,0}'),
('111', '{1,1,1}');
INSERT 0 8
EXPLAIN SELECT id, ROUND((vector <-> array[0,0,0])::numeric, 2) FROM new_small_world ORDER BY vector <-> array[0,0,0] LIMIT 10;
psql:test/sql/hnsw_insert_array.sql:60: INFO:  cost estimate
psql:test/sql/hnsw_insert_array.sql:60: INFO:  returning small cost to always use the index
                                                QUERY PLAN                                                
----------------------------------------------------------------------------------------------------------
 Limit  (cost=0.00..1.64 rows=10 width=52)
   ->  Index Scan using new_small_world_vector_idx on new_small_world  (cost=0.00..4.27 rows=26 width=52)
         Order By: (vector <-> '{0,0,0}'::real[])
(3 rows)

SELECT id, ROUND((vector <-> array[0,0,0])::numeric, 2) FROM new_small_world ORDER BY vector <-> array[0,0,0] LIMIT 10;
psql:test/sql/hnsw_insert_array.sql:61: INFO:  cost estimate
psql:test/sql/hnsw_insert_array.sql:61: INFO:  returning small cost to always use the index
psql:test/sql/hnsw_insert_array.sql:61: INFO:  began scanning with 0 keys and 1 orderbys
psql:test/sql/hnsw_insert_array.sql:61: INFO:  starting scan with dimensions=3 M=16 efConstruction=128 ef=64
psql:test/sql/hnsw_insert_array.sql:61: INFO:  usearch index initialized
 id  | round 
-----+-------
 111 |  1.73
 110 |  1.41
 101 |  1.41
 100 |  1.00
 011 |  1.41
 010 |  1.00
 001 |  1.00
 000 |  0.00
 111 |  1.73
 110 |  1.41
(10 rows)

