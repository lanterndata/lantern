CREATE EXTENSION IF NOT EXISTS lanterndb;
NOTICE:  extension "lanterndb" already exists, skipping
\ir sql/test_helpers/common.sql
--test helper functions that should exist in all test runs live here
-- there is no need to explicitly include this file in other tests as the test runner will
-- run this before running the actual test
CREATE EXTENSION pageinspect;
psql:sql/test_helpers/common.sql:5: ERROR:  extension "pageinspect" already exists
--todo:: add a columns to this function which returning number of used DB pages and total index size
\set ON_ERROR_STOP on
CREATE OR REPLACE FUNCTION ldb_get_indexes(tblname text)
RETURNS TABLE(indexname name, size text, indexdef text) AS
$BODY$
BEGIN
  RETURN QUERY
  SELECT pg_indexes.indexname,
  pg_size_pretty(pg_relation_size(pg_indexes.indexname::REGCLASS)) as size,
  pg_indexes.indexdef
  FROM pg_indexes
  WHERE tablename = tblname;
END;
$BODY$ LANGUAGE plpgsql;
\ir sql/test_helpers/small_world_arrays.sql
-- creates a simple vector table
DROP TABLE IF EXISTS small_world;
CREATE TABLE small_world (
    id varchar(3),
    vector real[]
);
INSERT INTO small_world (id, vector) VALUES 
('000', '{0,0,0}'),
('001', '{0,0,1}'),
('010', '{0,1,0}'),
('011', '{0,1,1}'),
('100', '{1,0,0}'),
('101', '{1,0,1}'),
('110', '{1,1,0}'),
('111', '{1,1,1}');
\ir sql/test_helpers/sift_arrays.sql
CREATE TABLE IF NOT EXISTS sift_base1k_arr (
    id SERIAL PRIMARY KEY,
    v real[]);
COPY sift_base1k_arr (v) FROM '/tmp/lanterndb/vector_datasets/sift_base1k_arrays.csv' with csv;
CREATE INDEX ON small_world USING hnsw (vector);
INFO:  done init usearch index
INFO:  inserted 8 elements
INFO:  done saving 8 vectors
CREATE INDEX ON sift_base1k_arr USING hnsw (v) WITH (dims=128);
INFO:  done init usearch index
INFO:  inserted 1000 elements
INFO:  done saving 1000 vectors
SET enable_seqscan = off;
INSERT INTO small_world (id, vector) VALUES ('xxx', '{0,0,0}');
INSERT INTO small_world (id, vector) VALUES ('x11', '{0,0,110}');
INSERT INTO small_world (id, vector) VALUES 
('000', NULL),
('001', '{0,0,1}'),
('010', '{0,1,0}'),
('011', '{0,1,1}'),
('100', '{1,0,0}'),
('101', '{1,0,1}'),
('110', '{1,1,0}'),
('111', '{1,1,1}');
SELECT * FROM (
    SELECT id, ROUND( (vector <-> array[0,1,0])::numeric, 2) as dist
    FROM small_world
    ORDER BY vector <-> array[0,1,0] LIMIT 7
) v ORDER BY v.dist, v.id;
INFO:  began scanning with 0 keys and 1 orderbys
INFO:  starting scan with dimensions=3 M=16 efConstruction=128 ef=64
INFO:  usearch index initialized
 id  | dist 
-----+------
 010 | 0.00
 011 | 1.00
 110 | 1.00
 001 | 2.00
 100 | 2.00
 111 | 2.00
 101 | 3.00
(7 rows)

INSERT INTO small_world (id, vector) VALUES 
('000', '{0,0,0}'),
('001', '{0,0,1}'),
('010', '{0,1,0}'),
('011', '{0,1,1}'),
('100', '{1,0,0}'),
('101', '{1,0,1}'),
('110', '{1,1,0}'),
('111', '{1,1,1}');
SELECT * FROM (
    SELECT id, ROUND( (vector <-> array[0,1,0])::numeric, 2) as dist
    FROM small_world
    ORDER BY vector <-> array[0,1,0] LIMIT 7
) v ORDER BY v.dist, v.id;
INFO:  began scanning with 0 keys and 1 orderbys
INFO:  starting scan with dimensions=3 M=16 efConstruction=128 ef=64
INFO:  usearch index initialized
 id  | dist 
-----+------
 010 | 0.00
 011 | 1.00
 110 | 1.00
 001 | 2.00
 100 | 2.00
 111 | 2.00
 101 | 3.00
(7 rows)

SELECT v as v42 FROM sift_base1k_arr WHERE id = 42 \gset 
-- no index scan
BEGIN;
DROP INDEX IF EXISTS sift_base1k_hnsw_idx;
NOTICE:  index "sift_base1k_hnsw_idx" does not exist, skipping
EXPLAIN (COSTS FALSE) SELECT id, ROUND((v <-> :'v42')::numeric, 2) FROM sift_base1k_arr ORDER BY v <-> :'v42' LIMIT 10;
                                                                                                                                                                          QUERY PLAN                                                                                                                                                                          
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit
   ->  Index Scan using sift_base1k_arr_v_idx on sift_base1k_arr
         Order By: (v <-> '{1,0,0,0,0,0,21,35,1,0,0,0,0,77,51,42,66,2,0,0,0,86,140,71,52,1,0,0,0,0,23,70,2,0,0,0,0,64,73,50,11,0,0,0,0,140,97,18,140,64,0,0,0,99,51,65,78,11,0,0,0,0,41,76,0,0,0,0,0,124,82,2,48,1,0,0,0,118,31,5,140,21,0,0,0,4,12,78,12,0,0,0,0,0,58,117,1,0,0,0,2,25,7,2,46,2,0,0,1,12,4,8,140,9,0,0,0,1,8,16,3,0,0,0,0,0,21,34}'::real[])
(3 rows)

SELECT id, ROUND((v <-> :'v42')::numeric, 2) FROM sift_base1k_arr ORDER BY v <-> :'v42' LIMIT 10;
INFO:  began scanning with 0 keys and 1 orderbys
INFO:  starting scan with dimensions=128 M=16 efConstruction=128 ef=64
INFO:  usearch index initialized
 id  |  round   
-----+----------
  42 |     0.00
  36 | 10530.00
  48 | 51038.00
  39 | 56265.00
 886 | 71637.00
 402 | 77013.00
 340 | 87261.00
 331 | 87796.00
 518 | 85024.00
 682 | 94988.00
(10 rows)

ROLLBACK;
-- index scan
EXPLAIN (COSTS FALSE) SELECT id, ROUND((v <-> :'v42')::numeric, 2) FROM sift_base1k_arr ORDER BY v <-> :'v42' LIMIT 10;
                                                                                                                                                                          QUERY PLAN                                                                                                                                                                          
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit
   ->  Index Scan using sift_base1k_arr_v_idx on sift_base1k_arr
         Order By: (v <-> '{1,0,0,0,0,0,21,35,1,0,0,0,0,77,51,42,66,2,0,0,0,86,140,71,52,1,0,0,0,0,23,70,2,0,0,0,0,64,73,50,11,0,0,0,0,140,97,18,140,64,0,0,0,99,51,65,78,11,0,0,0,0,41,76,0,0,0,0,0,124,82,2,48,1,0,0,0,118,31,5,140,21,0,0,0,4,12,78,12,0,0,0,0,0,58,117,1,0,0,0,2,25,7,2,46,2,0,0,1,12,4,8,140,9,0,0,0,1,8,16,3,0,0,0,0,0,21,34}'::real[])
(3 rows)

SELECT id, ROUND((v <-> :'v42')::numeric, 2) FROM sift_base1k_arr ORDER BY v <-> :'v42' LIMIT 10;
INFO:  began scanning with 0 keys and 1 orderbys
INFO:  starting scan with dimensions=128 M=16 efConstruction=128 ef=64
INFO:  usearch index initialized
 id  |  round   
-----+----------
  42 |     0.00
  36 | 10530.00
  48 | 51038.00
  39 | 56265.00
 886 | 71637.00
 402 | 77013.00
 340 | 87261.00
 331 | 87796.00
 518 | 85024.00
 682 | 94988.00
(10 rows)

-- todo:: craft an SQL query to compare the results of the two above so I do not have to do it manually
-- another insert test
DROP TABLE IF EXISTS new_small_world;
CREATE TABLE new_small_world as SELECT * from small_world;
CREATE INDEX ON new_small_world USING hnsw (vector);
INFO:  done init usearch index
INFO:  inserted 25 elements
INFO:  done saving 25 vectors
INSERT INTO new_small_world (id, vector) VALUES
('000', '{0,0,0}'),
('001', '{0,0,1}'),
('010', '{0,1,0}'),
('011', '{0,1,1}'),
('100', '{1,0,0}'),
('101', '{1,0,1}'),
('110', '{1,1,0}'),
('111', '{1,1,1}');
--make sure insert of the wrong length fails
\set ON_ERROR_STOP off
INSERT INTO new_small_world (id, vector) VALUES
('000', '{4,4,4,4}');
ERROR:  Wrong number of dimensions: 4 instead of 3 expected
\set ON_ERROR_STOP on
--make sure the value was actually not inserted
select * from new_small_world where id = '000';
 id  | vector  
-----+---------
 000 | {0,0,0}
 000 | 
 000 | {0,0,0}
 000 | {0,0,0}
(4 rows)

-- index scan
SELECT '{0,0,0}'::real[] as v42  \gset
EXPLAIN (COSTS FALSE) SELECT id, ROUND((vector <-> :'v42')::numeric, 2) FROM new_small_world ORDER BY vector <-> :'v42' LIMIT 10;
                              QUERY PLAN                              
----------------------------------------------------------------------
 Limit
   ->  Index Scan using new_small_world_vector_idx on new_small_world
         Order By: (vector <-> '{0,0,0}'::real[])
(3 rows)

SELECT id, ROUND((vector <-> :'v42')::numeric, 2) FROM new_small_world ORDER BY vector <-> :'v42' LIMIT 10;
INFO:  began scanning with 0 keys and 1 orderbys
INFO:  starting scan with dimensions=3 M=16 efConstruction=128 ef=64
INFO:  usearch index initialized
 id  | round 
-----+-------
 111 |  3.00
 110 |  2.00
 101 |  2.00
 100 |  1.00
 011 |  2.00
 010 |  1.00
 001 |  1.00
 000 |  0.00
 111 |  3.00
 110 |  2.00
(10 rows)

SELECT count(*) from sift_base1k_arr;
 count 
-------
  1000
(1 row)

SELECT * from ldb_get_indexes('sift_base1k_arr');
       indexname       |  size  |                                           indexdef                                            
-----------------------+--------+-----------------------------------------------------------------------------------------------
 sift_base1k_arr_pkey  | 40 kB  | CREATE UNIQUE INDEX sift_base1k_arr_pkey ON public.sift_base1k_arr USING btree (id)
 sift_base1k_arr_v_idx | 720 kB | CREATE INDEX sift_base1k_arr_v_idx ON public.sift_base1k_arr USING hnsw (v) WITH (dims='128')
(2 rows)

INSERT INTO sift_base1k_arr(v)
SELECT v FROM sift_base1k_arr WHERE id <= 444 AND v IS NOT NULL;
SELECT count(*) from sift_base1k_arr;
 count 
-------
  1444
(1 row)

SELECT * from ldb_get_indexes('sift_base1k_arr');
       indexname       |  size   |                                           indexdef                                            
-----------------------+---------+-----------------------------------------------------------------------------------------------
 sift_base1k_arr_pkey  | 48 kB   | CREATE UNIQUE INDEX sift_base1k_arr_pkey ON public.sift_base1k_arr USING btree (id)
 sift_base1k_arr_v_idx | 1016 kB | CREATE INDEX sift_base1k_arr_v_idx ON public.sift_base1k_arr USING hnsw (v) WITH (dims='128')
(2 rows)

-- make sure NULL inserts into the index are handled correctly
INSERT INTO small_world (id, vector) VALUES ('xxx', NULL);
CREATE UNLOGGED TABLE unlogged_small_world AS TABLE small_world;
\set ON_ERROR_STOP off
INSERT INTO small_world (id, vector) VALUES ('xxx', '{1,1,1,1}');
ERROR:  Wrong number of dimensions: 4 instead of 3 expected
SELECT '{1,1,1,1}'::real[] <-> '{1,1,1}'::real[];
ERROR:  expected equally sized arrays but got arrays with dimensions 4 and 3
CREATE INDEX ON unlogged_small_world USING hnsw (vector);
INFO:  done init usearch index
INFO:  inserted 25 elements
INFO:  done saving 25 vectors
ERROR:  hnsw index on unlogged tables is currently not supported
