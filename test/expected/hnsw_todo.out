-- THIS IS TODO TEST FILE
-- THIS TESTS WILL NOT PASS CURRENTLY BUT SHOULD BE FIXED LATER
CREATE TABLE small_world_l2 (
    id varchar(3),
    vector real[],
    vector_int integer[]
);
INSERT INTO small_world_l2 (id, vector) VALUES 
    ('000', '{0,0,0}'),
    ('001', '{0,0,1}'),
    ('010', '{0,1,0}'),
    ('011', '{0,1,1}'),
    ('100', '{1,0,0}'),
    ('101', '{1,0,1}'),
    ('110', '{1,1,0}'),
    ('111', '{1,1,1}');
SET enable_seqscan = false;
\set ON_ERROR_STOP off
CREATE INDEX ON small_world_l2 USING hnsw (vector dist_l2sq_ops);
INFO:  done init usearch index
INFO:  inserted 8 elements
INFO:  done saving 8 vectors
-- this should be supported
CREATE INDEX ON small_world_l2 USING hnsw (vector_int dist_l2sq_int_ops);
ERROR:  operator class "dist_l2sq_int_ops" does not exist for access method "hnsw"
-- this should use index
EXPLAIN (COSTS FALSE)
SELECT id, ROUND(l2sq_dist(vector_int, array[0,1,0])::numeric, 2) as dist
FROM small_world_l2
ORDER BY vector_int <-> array[0,1,0] LIMIT 7;
ERROR:  Operator <-> can only be used inside of an index
--- Test scenarious ---
-----------------------------------------
-- Case:
-- Index is created externally.
-- More vectors are added to the table
-- CREATE INDEX is run on the table with the external file
SELECT array_fill(0, ARRAY[128]) AS v0 \gset
DROP TABLE IF EXISTS sift_base1k CASCADE;
NOTICE:  table "sift_base1k" does not exist, skipping
\ir utils/sift1k_array.sql
CREATE TABLE IF NOT EXISTS sift_base1k (
    id SERIAL,
    v REAL[]
);
COPY sift_base1k (v) FROM '/tmp/lantern/vector_datasets/sift_base1k_arrays.csv' WITH csv;
INSERT INTO sift_base1k (id, v) VALUES 
(1001, array_fill(1, ARRAY[128])),
(1102, array_fill(2, ARRAY[128]));
SELECT v AS v1001 FROM sift_base1k WHERE id = 1001 \gset
CREATE INDEX hnsw_l2_index ON sift_base1k USING hnsw (v) WITH (_experimental_index_path='/tmp/lantern/files/index-sift1k-l2.usearch');
INFO:  done init usearch index
INFO:  done loading usearch index
INFO:  done saving 1000 vectors
SELECT _lantern_internal.validate_index('hnsw_l2_index');
INFO:  validate_index() start for hnsw_l2_index
INFO:  index_header = HnswIndexHeaderPage(version=1 vector_dim=128 m=16 ef_construction=64 ef=32 metric_kind=1 num_vectors=1000 last_data_block=89 blockmap_page_groups=0)
INFO:  blocks_nr=90 nodes_nr=1000
INFO:  blocks for: header 1 blockmap 1 nodes 88
INFO:  nodes per block: min (except last) 11 max (except last) 12 last 3
INFO:  level=0: nodes 937 directed neighbor edges 10862 min neighbors 1 max neighbors 32
INFO:  level=1: nodes 58 directed neighbor edges 426 min neighbors 2 max neighbors 16
INFO:  level=2: nodes 5 directed neighbor edges 20 min neighbors 4 max neighbors 4
INFO:  validate_index() done, no issues found.
 validate_index 
----------------
 
(1 row)

-- The 1001 and 1002 vectors will be ignored in search, so the first row will not be 0 in result
SELECT ROUND(l2sq_dist(v, :'v1001')::numeric, 2) FROM sift_base1k order by v <-> :'v1001' LIMIT 1;
   round   
-----------
 249285.00
(1 row)

-- Case:
-- Index is created externally
-- Vectors updated
-- CREATE INDEX is run on the table with external file
DROP TABLE sift_base1k CASCADE;
\ir utils/sift1k_array.sql
CREATE TABLE IF NOT EXISTS sift_base1k (
    id SERIAL,
    v REAL[]
);
COPY sift_base1k (v) FROM '/tmp/lantern/vector_datasets/sift_base1k_arrays.csv' WITH csv;
UPDATE sift_base1k SET v=:'v1001' WHERE id=777;
CREATE INDEX hnsw_l2_index ON sift_base1k USING hnsw (v) WITH (_experimental_index_path='/tmp/lantern/files/index-sift1k-l2.usearch');
INFO:  done init usearch index
INFO:  done loading usearch index
INFO:  done saving 1000 vectors
SELECT _lantern_internal.validate_index('hnsw_l2_index');
INFO:  validate_index() start for hnsw_l2_index
INFO:  index_header = HnswIndexHeaderPage(version=1 vector_dim=128 m=16 ef_construction=64 ef=32 metric_kind=1 num_vectors=1000 last_data_block=89 blockmap_page_groups=0)
INFO:  blocks_nr=90 nodes_nr=1000
INFO:  blocks for: header 1 blockmap 1 nodes 88
INFO:  nodes per block: min (except last) 11 max (except last) 12 last 3
INFO:  level=0: nodes 937 directed neighbor edges 10862 min neighbors 1 max neighbors 32
INFO:  level=1: nodes 58 directed neighbor edges 426 min neighbors 2 max neighbors 16
INFO:  level=2: nodes 5 directed neighbor edges 20 min neighbors 4 max neighbors 4
INFO:  validate_index() done, no issues found.
 validate_index 
----------------
 
(1 row)

-- The first row will not be 0 now as the vector under id=777 was updated to 1,1,1,1... but it was indexed with different vector
-- So the usearch index can not find 1,1,1,1,1.. vector in the index and wrong results will be returned
-- This is an expected behaviour for now
SELECT ROUND(l2sq_dist(v, :'v1001')::numeric, 2) FROM sift_base1k order by v <-> :'v1001' LIMIT 1;
   round   
-----------
 249285.00
(1 row)

---- Query on expression based index is failing to check correct <-> operator usage --------
CREATE OR REPLACE FUNCTION int_to_fixed_binary_real_array(n INT) RETURNS REAL[] AS $$
DECLARE
    binary_string TEXT;
    real_array REAL[] := '{}';
    i INT;
BEGIN
    binary_string := lpad(CAST(n::BIT(3) AS TEXT), 3, '0');
    FOR i IN 1..length(binary_string)
    LOOP
        real_array := array_append(real_array, CAST(substring(binary_string, i, 1) AS REAL));
    END LOOP;
    RETURN real_array;
END;
$$ LANGUAGE plpgsql IMMUTABLE;
CREATE TABLE test_table (id INTEGER);
INSERT INTO test_table VALUES (0), (1), (7);
\set enable_seqscan = off;
-- This currently results in an error about using the operator outside of index
-- This case should be fixed
SELECT id FROM test_table ORDER BY int_to_fixed_binary_real_array(id) <-> '{0,0,0}'::REAL[] LIMIT 2;
ERROR:  Operator <-> can only be used inside of an index
