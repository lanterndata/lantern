-- THIS IS TODO TEST FILE
-- THIS TESTS WILL NOT PASS CURRENTLY BUT SHOULD BE FIXED LATER
CREATE TABLE small_world_l2 (
    id varchar(3),
    vector real[],
    vector_int integer[]
);
INSERT INTO small_world_l2 (id, vector) VALUES 
    ('000', '{0,0,0}'),
    ('001', '{0,0,1}'),
    ('010', '{0,1,0}'),
    ('011', '{0,1,1}'),
    ('100', '{1,0,0}'),
    ('101', '{1,0,1}'),
    ('110', '{1,1,0}'),
    ('111', '{1,1,1}');
SET enable_seqscan = false;
\set ON_ERROR_STOP off
-- this should throw error, as it is out of index usage (no index)
SELECT 1 FROM small_world_l2 order by vector <-> '{1,0,0}' LIMIT 3;
 ?column? 
----------
        1
        1
        1
(3 rows)

EXPLAIN (COSTS FALSE) SELECT 1 FROM small_world_l2 order by vector <-> '{1,0,0}' LIMIT 3;
                     QUERY PLAN                     
----------------------------------------------------
 Limit
   ->  Sort
         Sort Key: ((vector <-> '{1,0,0}'::real[]))
         ->  Seq Scan on small_world_l2
(4 rows)

-- this should throw error, as it is out of index usage (in select)
SELECT * FROM (
    SELECT id, ROUND((vector <-> array[0,1,0])::numeric, 2) as dist
    FROM small_world_l2
    ORDER BY vector <-> array[0,1,0] LIMIT 7
) v ORDER BY v.dist, v.id;
ERROR:  Operator <-> has no standalone meaning and is reserved for use in vector index lookups only
CREATE INDEX ON small_world_l2 USING hnsw (vector dist_l2sq_ops);
INFO:  done init usearch index
INFO:  inserted 8 elements
INFO:  done saving 8 vectors
-- this should be supported
CREATE INDEX ON small_world_l2 USING hnsw (vector_int dist_l2sq_int_ops);
ERROR:  operator class "dist_l2sq_int_ops" does not exist for access method "hnsw"
-- this should use index
EXPLAIN (COSTS FALSE)
SELECT id, ROUND(l2sq_dist(vector_int, array[0,1,0])::numeric, 2) as dist
FROM small_world_l2
ORDER BY vector_int <-> array[0,1,0] LIMIT 7;
                           QUERY PLAN                            
-----------------------------------------------------------------
 Limit
   ->  Result
         ->  Sort
               Sort Key: ((vector_int <-> '{0,1,0}'::integer[]))
               ->  Seq Scan on small_world_l2
(5 rows)

-- this result is not sorted correctly
CREATE TABLE small_world_ham (
    id SERIAL PRIMARY KEY,
    v INT[2]
);
INSERT INTO small_world_ham (v) VALUES ('{0,0}'), ('{1,1}'), ('{2,2}'), ('{3,3}');
CREATE INDEX ON small_world_ham USING hnsw (v dist_hamming_ops) WITH (dims=2);
INFO:  done init usearch index
INFO:  inserted 4 elements
INFO:  done saving 4 vectors
SELECT ROUND(hamming_dist(v, '{0,0}')::numeric, 2) FROM small_world_ham ORDER BY v <-> '{0,0}';
INFO:  Query cost estimator
INFO:  ---------------------
INFO:  Total cost: 12.030000
INFO:  Selectivity: 1.000000
INFO:  Num pages: 3.000000
INFO:  Num tuples: 4.000000
INFO:  began scanning with 0 keys and 1 orderbys
INFO:  starting scan with dimensions=2 M=16 efConstruction=128 ef=64
INFO:  usearch index initialized
 round 
-------
  0.00
  2.00
  4.00
  2.00
(4 rows)

--- Test scenarious ---
-----------------------------------------
-- Case:
-- Index is created externally.
-- More vectors are added to the table
-- CREATE INDEX is run on the table with the external file
SELECT array_fill(0, ARRAY[128]) AS v0 \gset
DROP TABLE IF EXISTS sift_base1k CASCADE;
NOTICE:  table "sift_base1k" does not exist, skipping
\ir utils/sift1k_array.sql
CREATE TABLE IF NOT EXISTS sift_base1k (
    id SERIAL,
    v REAL[]
);
COPY sift_base1k (v) FROM '/tmp/lanterndb/vector_datasets/sift_base1k_arrays.csv' WITH csv;
INSERT INTO sift_base1k (id, v) VALUES 
(1001, array_fill(1, ARRAY[128])),
(1102, array_fill(2, ARRAY[128]));
SELECT v AS v1001 FROM sift_base1k WHERE id = 1001 \gset
CREATE INDEX hnsw_l2_index ON sift_base1k USING hnsw (v dist_l2sq_ops) WITH (dims=128, M=16, ef=64, ef_construction=128, _experimental_index_path='/tmp/lanterndb/files/index-sift1k-l2.usearch');
INFO:  done init usearch index
INFO:  done loading usearch index
INFO:  done saving 1000 vectors
-- The 1001 and 1002 vectors will be ignored in search, so the first row will not be 0 in result
SELECT ROUND(l2sq_dist(v, :'v1001')::numeric, 2) FROM sift_base1k order by v <-> :'v1001' LIMIT 1;
INFO:  began scanning with 0 keys and 1 orderbys
INFO:  starting scan with dimensions=128 M=16 efConstruction=128 ef=64
INFO:  usearch index initialized
   round   
-----------
0.00
(1 row)

-- Case:
-- Index is created externally
-- Vectors updated
-- CREATE INDEX is run on the table with external file
DROP TABLE sift_base1k CASCADE;
\ir utils/sift1k_array.sql
CREATE TABLE IF NOT EXISTS sift_base1k (
    id SERIAL,
    v REAL[]
);
COPY sift_base1k (v) FROM '/tmp/lanterndb/vector_datasets/sift_base1k_arrays.csv' WITH csv;
UPDATE sift_base1k SET v=:'v1001' WHERE id=777;
CREATE INDEX hnsw_l2_index ON sift_base1k USING hnsw (v dist_l2sq_ops) WITH (dims=128, M=16, ef=64, ef_construction=128, _experimental_index_path='/tmp/lanterndb/files/index-sift1k-l2.usearch');
INFO:  done init usearch index
INFO:  done loading usearch index
INFO:  done saving 1000 vectors
-- The first row will not be 0 now as the vector under id=777 was updated to 1,1,1,1... but it was indexed with different vector
-- So the usearch index can not find 1,1,1,1,1.. vector in the index and wrong results will be returned
-- This is an expected behaviour for now
SELECT ROUND(l2sq_dist(v, :'v1001')::numeric, 2) FROM sift_base1k order by v <-> :'v1001' LIMIT 1;
INFO:  began scanning with 0 keys and 1 orderbys
INFO:  starting scan with dimensions=128 M=16 efConstruction=128 ef=64
INFO:  usearch index initialized
   round   
-----------
0.00
(1 row)

