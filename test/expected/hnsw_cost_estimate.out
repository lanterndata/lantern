SET client_min_messages=debug5;
\ir utils/sift10k_array.sql
CREATE TABLE IF NOT EXISTS sift_base10k (
     id SERIAL PRIMARY KEY,
     v REAL[128]
);
\copy sift_base10k (v) FROM '/tmp/lantern/vector_datasets/siftsmall_base_arrays.csv' with csv;
-- This function executes the given SQL query and returns its estimated total cost.
-- It parses the EXPLAIN output to retrieve the outermost (top-level) cost estimation.
-- Example EXPLAIN line: "Limit  (cost=0.00..0.47 rows=10 width=40)"
-- The regex captures the cost range and returns the higher end.
-- Returns NULL if no cost is found or if the provided query doesn't match the expected format.
CREATE OR REPLACE FUNCTION get_cost_estimate(explain_query text) RETURNS real AS $$
DECLARE
    explain_output text;
    cost_match text;
    line text;
BEGIN
    EXECUTE explain_query INTO explain_output;
    FOR line IN (
        SELECT
            unnest(string_to_array(explain_output, E'\n')))
        LOOP
            IF position(' ' IN
            LEFT (line, 1)) = 0 AND line LIKE '%cost=%' THEN
                cost_match :=(regexp_matches(line, 'cost=\d+\.\d+..\d+\.\d+'))[1];
                -- Adjust regex to capture both costs
                RETURN split_part(split_part(cost_match, '=', 2), '..', 2)::real;
                -- Extract the total cost
            END IF;
        END LOOP;
    RETURN NULL;
END;
$$ LANGUAGE plpgsql;
-- This function checks if val2 is within some error margin of val1.
CREATE OR REPLACE FUNCTION is_within_error(val1 real, val2 real, error_margin real) RETURNS boolean AS $$
BEGIN
    RETURN val2 BETWEEN val1 * (1 - error_margin) AND val1 * (1 + error_margin);
END;
$$ LANGUAGE plpgsql;
-- This function checks if the cost estimate for the given query is within some error margin of the expected cost.
CREATE OR REPLACE FUNCTION is_cost_estimate_within_error(explain_query text, expected_cost real, error_margin real DEFAULT 0.05) RETURNS boolean AS $$
BEGIN
    RETURN is_within_error(get_cost_estimate(explain_query), expected_cost, error_margin);    
END;
$$ LANGUAGE plpgsql;
SET lantern.pgvector_compat=FALSE;
-- Goal: make sure query cost estimate is accurate
-- when index is created with varying costruction parameters.
SELECT v AS v4444 FROM sift_base10k WHERE id = 4444 \gset
\set explain_query_template 'EXPLAIN SELECT * FROM sift_base10k ORDER BY v <?> ''%s'' LIMIT 10'
\set enable_seqscan = off;
-- Case 0, sanity check. No data.
CREATE TABLE empty_table(id SERIAL PRIMARY KEY, v REAL[2]);
CREATE INDEX empty_idx ON empty_table USING hnsw (v dist_l2sq_ops) WITH (M=2, ef_construction=10, ef=2, dim=2);
INFO:  done init usearch index
INFO:  inserted 0 elements
INFO:  done saving 0 vectors
SET _lantern_internal.is_test = true;
SELECT is_cost_estimate_within_error('EXPLAIN SELECT * FROM empty_table ORDER BY v <?> ''{1,2}'' LIMIT 10', 0.47);
DEBUG:  LANTERN - Query cost estimator
DEBUG:  LANTERN - ---------------------
DEBUG:  LANTERN - Total cost: 4.225000
DEBUG:  LANTERN - Selectivity: 1.000000
DEBUG:  LANTERN - Num pages: 1.000000
DEBUG:  LANTERN - Num tuples: 30.000000
DEBUG:  LANTERN - ---------------------
 is_cost_estimate_within_error 
-------------------------------
 t
(1 row)

SELECT _lantern_internal.validate_index('empty_idx', false);
INFO:  validate_index() start for empty_idx
INFO:  validate_index() done, no issues found.
 validate_index 
----------------
 
(1 row)

DROP INDEX empty_idx;
-- Case 1, more data in index.
-- Should see higher cost than Case 0.
CREATE INDEX hnsw_idx ON sift_base10k USING hnsw (v dist_l2sq_ops) WITH (M=2, ef_construction=10, ef=4, dim=128);
INFO:  done init usearch index
INFO:  inserted 10000 elements
INFO:  done saving 10000 vectors
SELECT is_cost_estimate_within_error(format(:'explain_query_template', :'v4444'), 3.00);
DEBUG:  LANTERN - Query cost estimator
DEBUG:  LANTERN - ---------------------
DEBUG:  LANTERN - Total cost: 16.345000
DEBUG:  LANTERN - Selectivity: 1.000000
DEBUG:  LANTERN - Num pages: 4.000000
DEBUG:  LANTERN - Num tuples: 46.000000
DEBUG:  LANTERN - ---------------------
 is_cost_estimate_within_error 
-------------------------------
 t
(1 row)

SELECT _lantern_internal.validate_index('hnsw_idx', false);
INFO:  validate_index() start for hnsw_idx
INFO:  validate_index() done, no issues found.
 validate_index 
----------------
 
(1 row)

DROP INDEX hnsw_idx;
-- Case 2, higher M.
-- Should see higher cost than Case 1.
CREATE INDEX hnsw_idx ON sift_base10k USING hnsw (v dist_l2sq_ops) WITH (M=20, ef_construction=10, ef=4, dim=128);
INFO:  done init usearch index
INFO:  inserted 10000 elements
INFO:  done saving 10000 vectors
SELECT is_cost_estimate_within_error(format(:'explain_query_template', :'v4444'), 3.27);
DEBUG:  LANTERN - Query cost estimator
DEBUG:  LANTERN - ---------------------
DEBUG:  LANTERN - Total cost: 289.797500
DEBUG:  LANTERN - Selectivity: 1.000000
DEBUG:  LANTERN - Num pages: 71.000000
DEBUG:  LANTERN - Num tuples: 773.000000
DEBUG:  LANTERN - ---------------------
 is_cost_estimate_within_error 
-------------------------------
 t
(1 row)

SELECT _lantern_internal.validate_index('hnsw_idx', false);
INFO:  validate_index() start for hnsw_idx
INFO:  validate_index() done, no issues found.
 validate_index 
----------------
 
(1 row)

DROP INDEX hnsw_idx;
-- Case 3, higher ef.
-- Should see higher cost than Case 2.
CREATE INDEX hnsw_idx ON sift_base10k USING hnsw (v dist_l2sq_ops) WITH (M=20, ef_construction=10, ef=16, dim=128);
INFO:  done init usearch index
INFO:  inserted 10000 elements
INFO:  done saving 10000 vectors
SELECT is_cost_estimate_within_error(format(:'explain_query_template', :'v4444'), 3.91);
DEBUG:  LANTERN - Query cost estimator
DEBUG:  LANTERN - ---------------------
DEBUG:  LANTERN - Total cost: 922.406057
DEBUG:  LANTERN - Selectivity: 1.000000
DEBUG:  LANTERN - Num pages: 226.000000
DEBUG:  LANTERN - Num tuples: 2465.000000
DEBUG:  LANTERN - ---------------------
 is_cost_estimate_within_error 
-------------------------------
 t
(1 row)

SELECT _lantern_internal.validate_index('hnsw_idx', false);
INFO:  validate_index() start for hnsw_idx
INFO:  validate_index() done, no issues found.
 validate_index 
----------------
 
(1 row)

DROP INDEX hnsw_idx;
-- Test cost estimation when number of pages in index is likely less than number of blockmaps allocated
-- this is relevant in this check in estimate_number_blocks_accessed in hnsw.c:
-- const uint64 num_datablocks = Max(num_pages - 1 - num_blockmap_allocated, 1);
-- One place where this happens is on partial indexes where the filter is rare (empirically, matching <2.5% of the entire table)
-- This is what we test below
\ir utils/views_vec10k.sql
CREATE TABLE IF NOT EXISTS views_vec10k (
     id INTEGER,
     views INTEGER,
     vec REAL[]
);
\copy views_vec10k (id, views, vec) FROM '/tmp/lantern/vector_datasets/views_vec10k.csv' WITH (FORMAT CSV, HEADER);
-- This is important to make sure that index selectivity calculations from genericcostestimate are accurate (which we test below)
VACUUM ANALYZE;
SET hnsw.init_k = 10;
-- Note that the (views < 100) condition is quite rare (out of 10,000 rows)
SELECT COUNT(*) FROM views_vec10k WHERE views < 100;
 count 
-------
    58
(1 row)

-- Create partial lantern index with (views < 100) filter
CREATE INDEX hnsw_partial_views_100 ON views_vec10k USING hnsw (vec dist_l2sq_ops) WITH (dim=6) WHERE views < 100;
INFO:  done init usearch index
INFO:  inserted 58 elements
INFO:  done saving 58 vectors
-- This should use the partial index we just created, since it is an exact filter match
EXPLAIN (COSTS FALSE) SELECT id, views FROM views_vec10k WHERE views < 100 ORDER BY vec<->'{0,1,2,3,4,5}' LIMIT 10;
DEBUG:  LANTERN - Query cost estimator
DEBUG:  LANTERN - ---------------------
DEBUG:  LANTERN - Total cost: 4.071250
DEBUG:  LANTERN - Selectivity: 0.005326
DEBUG:  LANTERN - Num pages: 1.000000
DEBUG:  LANTERN - Num tuples: 19.000000
DEBUG:  LANTERN - ---------------------
                          QUERY PLAN                           
---------------------------------------------------------------
 Limit
   ->  Index Scan using hnsw_partial_views_100 on views_vec10k
         Order By: (vec <-> '{0,1,2,3,4,5}'::real[])
(3 rows)

-- Test that the index selectivity being calculated for partial indexes is correct
CREATE INDEX hnsw_partial_views_250 ON views_vec10k USING hnsw (vec dist_l2sq_ops) WITH (dim=6) WHERE views < 250;
INFO:  done init usearch index
INFO:  inserted 126 elements
INFO:  done saving 126 vectors
CREATE INDEX hnsw_partial_views_500 ON views_vec10k USING hnsw (vec dist_l2sq_ops) WITH (dim=6) WHERE views < 500;
INFO:  done init usearch index
INFO:  inserted 239 elements
INFO:  done saving 239 vectors
CREATE INDEX hnsw_partial_views_1000 ON views_vec10k USING hnsw (vec dist_l2sq_ops) WITH (dim=6) WHERE views < 1000;
INFO:  done init usearch index
INFO:  inserted 477 elements
INFO:  done saving 477 vectors
CREATE INDEX hnsw_partial_views_2000 ON views_vec10k USING hnsw (vec dist_l2sq_ops) WITH (dim=6) WHERE views < 2000;
INFO:  done init usearch index
INFO:  inserted 996 elements
INFO:  done saving 996 vectors
CREATE INDEX hnsw_partial_views_4000 ON views_vec10k USING hnsw (vec dist_l2sq_ops) WITH (dim=6) WHERE views < 4000;
INFO:  done init usearch index
INFO:  inserted 2021 elements
INFO:  done saving 2021 vectors
CREATE INDEX hnsw_partial_views_8000 ON views_vec10k USING hnsw (vec dist_l2sq_ops) WITH (dim=6) WHERE views < 8000;
INFO:  done init usearch index
INFO:  inserted 3972 elements
INFO:  done saving 3972 vectors
CREATE INDEX hnsw_partial_views_16000 ON views_vec10k USING hnsw (vec dist_l2sq_ops) WITH (dim=6) WHERE views < 16000;
INFO:  done init usearch index
INFO:  inserted 8014 elements
INFO:  done saving 8014 vectors
CREATE INDEX hnsw_partial_views_19000 ON views_vec10k USING hnsw (vec dist_l2sq_ops) WITH (dim=6) WHERE views < 19000;
INFO:  done init usearch index
INFO:  inserted 9485 elements
INFO:  done saving 9485 vectors
-- Trigger each partial index by using its exact filter in a filtered query
-- Each indexSelectivity value for a partial index with the filter (views < N) should be around N/20000
-- (in other words, the fraction of rows from the table that is in the partial index, since views ~ Unif[0, 20,000])
EXPLAIN (COSTS FALSE) SELECT id, views FROM views_vec10k WHERE views < 250 ORDER BY vec<->'{0,1,2,3,4,5}' LIMIT 10;
DEBUG:  LANTERN - Query cost estimator
DEBUG:  LANTERN - ---------------------
DEBUG:  LANTERN - Total cost: 331.107310
DEBUG:  LANTERN - Selectivity: 0.948491
DEBUG:  LANTERN - Num pages: 77.000000
DEBUG:  LANTERN - Num tuples: 3161.000000
DEBUG:  LANTERN - ---------------------
DEBUG:  LANTERN - Query cost estimator
DEBUG:  LANTERN - ---------------------
DEBUG:  LANTERN - Total cost: 279.434515
DEBUG:  LANTERN - Selectivity: 0.801667
DEBUG:  LANTERN - Num pages: 65.000000
DEBUG:  LANTERN - Num tuples: 2671.000000
DEBUG:  LANTERN - ---------------------
DEBUG:  LANTERN - Query cost estimator
DEBUG:  LANTERN - ---------------------
DEBUG:  LANTERN - Total cost: 141.637941
DEBUG:  LANTERN - Selectivity: 0.397306
DEBUG:  LANTERN - Num pages: 33.000000
DEBUG:  LANTERN - Num tuples: 1324.000000
DEBUG:  LANTERN - ---------------------
DEBUG:  LANTERN - Query cost estimator
DEBUG:  LANTERN - ---------------------
DEBUG:  LANTERN - Total cost: 72.767083
DEBUG:  LANTERN - Selectivity: 0.201732
DEBUG:  LANTERN - Num pages: 17.000000
DEBUG:  LANTERN - Num tuples: 673.000000
DEBUG:  LANTERN - ---------------------
DEBUG:  LANTERN - Query cost estimator
DEBUG:  LANTERN - ---------------------
DEBUG:  LANTERN - Total cost: 38.490000
DEBUG:  LANTERN - Selectivity: 0.099913
DEBUG:  LANTERN - Num pages: 9.000000
DEBUG:  LANTERN - Num tuples: 332.000000
DEBUG:  LANTERN - ---------------------
DEBUG:  LANTERN - Query cost estimator
DEBUG:  LANTERN - ---------------------
DEBUG:  LANTERN - Total cost: 21.192500
DEBUG:  LANTERN - Selectivity: 0.047342
DEBUG:  LANTERN - Num pages: 5.000000
DEBUG:  LANTERN - Num tuples: 159.000000
DEBUG:  LANTERN - ---------------------
DEBUG:  LANTERN - Query cost estimator
DEBUG:  LANTERN - ---------------------
DEBUG:  LANTERN - Total cost: 12.592500
DEBUG:  LANTERN - Selectivity: 0.023941
DEBUG:  LANTERN - Num pages: 3.000000
DEBUG:  LANTERN - Num tuples: 79.000000
DEBUG:  LANTERN - ---------------------
DEBUG:  LANTERN - Query cost estimator
DEBUG:  LANTERN - ---------------------
DEBUG:  LANTERN - Total cost: 8.315000
DEBUG:  LANTERN - Selectivity: 0.012738
DEBUG:  LANTERN - Num pages: 2.000000
DEBUG:  LANTERN - Num tuples: 42.000000
DEBUG:  LANTERN - ---------------------
                          QUERY PLAN                           
---------------------------------------------------------------
 Limit
   ->  Index Scan using hnsw_partial_views_250 on views_vec10k
         Order By: (vec <-> '{0,1,2,3,4,5}'::real[])
(3 rows)

EXPLAIN (COSTS FALSE) SELECT id, views FROM views_vec10k WHERE views < 500 ORDER BY vec<->'{0,1,2,3,4,5}' LIMIT 10;
DEBUG:  LANTERN - Query cost estimator
DEBUG:  LANTERN - ---------------------
DEBUG:  LANTERN - Total cost: 331.107310
DEBUG:  LANTERN - Selectivity: 0.948491
DEBUG:  LANTERN - Num pages: 77.000000
DEBUG:  LANTERN - Num tuples: 3161.000000
DEBUG:  LANTERN - ---------------------
DEBUG:  LANTERN - Query cost estimator
DEBUG:  LANTERN - ---------------------
DEBUG:  LANTERN - Total cost: 279.434515
DEBUG:  LANTERN - Selectivity: 0.801667
DEBUG:  LANTERN - Num pages: 65.000000
DEBUG:  LANTERN - Num tuples: 2671.000000
DEBUG:  LANTERN - ---------------------
DEBUG:  LANTERN - Query cost estimator
DEBUG:  LANTERN - ---------------------
DEBUG:  LANTERN - Total cost: 141.637941
DEBUG:  LANTERN - Selectivity: 0.397306
DEBUG:  LANTERN - Num pages: 33.000000
DEBUG:  LANTERN - Num tuples: 1324.000000
DEBUG:  LANTERN - ---------------------
DEBUG:  LANTERN - Query cost estimator
DEBUG:  LANTERN - ---------------------
DEBUG:  LANTERN - Total cost: 72.767083
DEBUG:  LANTERN - Selectivity: 0.201732
DEBUG:  LANTERN - Num pages: 17.000000
DEBUG:  LANTERN - Num tuples: 673.000000
DEBUG:  LANTERN - ---------------------
DEBUG:  LANTERN - Query cost estimator
DEBUG:  LANTERN - ---------------------
DEBUG:  LANTERN - Total cost: 38.490000
DEBUG:  LANTERN - Selectivity: 0.099913
DEBUG:  LANTERN - Num pages: 9.000000
DEBUG:  LANTERN - Num tuples: 332.000000
DEBUG:  LANTERN - ---------------------
DEBUG:  LANTERN - Query cost estimator
DEBUG:  LANTERN - ---------------------
DEBUG:  LANTERN - Total cost: 21.192500
DEBUG:  LANTERN - Selectivity: 0.047342
DEBUG:  LANTERN - Num pages: 5.000000
DEBUG:  LANTERN - Num tuples: 159.000000
DEBUG:  LANTERN - ---------------------
DEBUG:  LANTERN - Query cost estimator
DEBUG:  LANTERN - ---------------------
DEBUG:  LANTERN - Total cost: 12.592500
DEBUG:  LANTERN - Selectivity: 0.023941
DEBUG:  LANTERN - Num pages: 3.000000
DEBUG:  LANTERN - Num tuples: 79.000000
DEBUG:  LANTERN - ---------------------
                          QUERY PLAN                           
---------------------------------------------------------------
 Limit
   ->  Index Scan using hnsw_partial_views_500 on views_vec10k
         Order By: (vec <-> '{0,1,2,3,4,5}'::real[])
(3 rows)

EXPLAIN (COSTS FALSE) SELECT id, views FROM views_vec10k WHERE views < 1000 ORDER BY vec<->'{0,1,2,3,4,5}' LIMIT 10;
DEBUG:  LANTERN - Query cost estimator
DEBUG:  LANTERN - ---------------------
DEBUG:  LANTERN - Total cost: 331.107310
DEBUG:  LANTERN - Selectivity: 0.948491
DEBUG:  LANTERN - Num pages: 77.000000
DEBUG:  LANTERN - Num tuples: 3161.000000
DEBUG:  LANTERN - ---------------------
DEBUG:  LANTERN - Query cost estimator
DEBUG:  LANTERN - ---------------------
DEBUG:  LANTERN - Total cost: 279.434515
DEBUG:  LANTERN - Selectivity: 0.801667
DEBUG:  LANTERN - Num pages: 65.000000
DEBUG:  LANTERN - Num tuples: 2671.000000
DEBUG:  LANTERN - ---------------------
DEBUG:  LANTERN - Query cost estimator
DEBUG:  LANTERN - ---------------------
DEBUG:  LANTERN - Total cost: 141.637941
DEBUG:  LANTERN - Selectivity: 0.397306
DEBUG:  LANTERN - Num pages: 33.000000
DEBUG:  LANTERN - Num tuples: 1324.000000
DEBUG:  LANTERN - ---------------------
DEBUG:  LANTERN - Query cost estimator
DEBUG:  LANTERN - ---------------------
DEBUG:  LANTERN - Total cost: 72.767083
DEBUG:  LANTERN - Selectivity: 0.201732
DEBUG:  LANTERN - Num pages: 17.000000
DEBUG:  LANTERN - Num tuples: 673.000000
DEBUG:  LANTERN - ---------------------
DEBUG:  LANTERN - Query cost estimator
DEBUG:  LANTERN - ---------------------
DEBUG:  LANTERN - Total cost: 38.490000
DEBUG:  LANTERN - Selectivity: 0.099913
DEBUG:  LANTERN - Num pages: 9.000000
DEBUG:  LANTERN - Num tuples: 332.000000
DEBUG:  LANTERN - ---------------------
DEBUG:  LANTERN - Query cost estimator
DEBUG:  LANTERN - ---------------------
DEBUG:  LANTERN - Total cost: 21.192500
DEBUG:  LANTERN - Selectivity: 0.047342
DEBUG:  LANTERN - Num pages: 5.000000
DEBUG:  LANTERN - Num tuples: 159.000000
DEBUG:  LANTERN - ---------------------
                           QUERY PLAN                           
----------------------------------------------------------------
 Limit
   ->  Index Scan using hnsw_partial_views_1000 on views_vec10k
         Order By: (vec <-> '{0,1,2,3,4,5}'::real[])
(3 rows)

EXPLAIN (COSTS FALSE) SELECT id, views FROM views_vec10k WHERE views < 2000 ORDER BY vec<->'{0,1,2,3,4,5}' LIMIT 10;
DEBUG:  LANTERN - Query cost estimator
DEBUG:  LANTERN - ---------------------
DEBUG:  LANTERN - Total cost: 331.107310
DEBUG:  LANTERN - Selectivity: 0.948491
DEBUG:  LANTERN - Num pages: 77.000000
DEBUG:  LANTERN - Num tuples: 3161.000000
DEBUG:  LANTERN - ---------------------
DEBUG:  LANTERN - Query cost estimator
DEBUG:  LANTERN - ---------------------
DEBUG:  LANTERN - Total cost: 279.434515
DEBUG:  LANTERN - Selectivity: 0.801667
DEBUG:  LANTERN - Num pages: 65.000000
DEBUG:  LANTERN - Num tuples: 2671.000000
DEBUG:  LANTERN - ---------------------
DEBUG:  LANTERN - Query cost estimator
DEBUG:  LANTERN - ---------------------
DEBUG:  LANTERN - Total cost: 141.637941
DEBUG:  LANTERN - Selectivity: 0.397306
DEBUG:  LANTERN - Num pages: 33.000000
DEBUG:  LANTERN - Num tuples: 1324.000000
DEBUG:  LANTERN - ---------------------
DEBUG:  LANTERN - Query cost estimator
DEBUG:  LANTERN - ---------------------
DEBUG:  LANTERN - Total cost: 72.767083
DEBUG:  LANTERN - Selectivity: 0.201732
DEBUG:  LANTERN - Num pages: 17.000000
DEBUG:  LANTERN - Num tuples: 673.000000
DEBUG:  LANTERN - ---------------------
DEBUG:  LANTERN - Query cost estimator
DEBUG:  LANTERN - ---------------------
DEBUG:  LANTERN - Total cost: 38.490000
DEBUG:  LANTERN - Selectivity: 0.099913
DEBUG:  LANTERN - Num pages: 9.000000
DEBUG:  LANTERN - Num tuples: 332.000000
DEBUG:  LANTERN - ---------------------
                           QUERY PLAN                           
----------------------------------------------------------------
 Limit
   ->  Index Scan using hnsw_partial_views_2000 on views_vec10k
         Order By: (vec <-> '{0,1,2,3,4,5}'::real[])
(3 rows)

EXPLAIN (COSTS FALSE) SELECT id, views FROM views_vec10k WHERE views < 4000 ORDER BY vec<->'{0,1,2,3,4,5}' LIMIT 10;
DEBUG:  LANTERN - Query cost estimator
DEBUG:  LANTERN - ---------------------
DEBUG:  LANTERN - Total cost: 331.107310
DEBUG:  LANTERN - Selectivity: 0.948491
DEBUG:  LANTERN - Num pages: 77.000000
DEBUG:  LANTERN - Num tuples: 3161.000000
DEBUG:  LANTERN - ---------------------
DEBUG:  LANTERN - Query cost estimator
DEBUG:  LANTERN - ---------------------
DEBUG:  LANTERN - Total cost: 279.434515
DEBUG:  LANTERN - Selectivity: 0.801667
DEBUG:  LANTERN - Num pages: 65.000000
DEBUG:  LANTERN - Num tuples: 2671.000000
DEBUG:  LANTERN - ---------------------
DEBUG:  LANTERN - Query cost estimator
DEBUG:  LANTERN - ---------------------
DEBUG:  LANTERN - Total cost: 141.637941
DEBUG:  LANTERN - Selectivity: 0.397306
DEBUG:  LANTERN - Num pages: 33.000000
DEBUG:  LANTERN - Num tuples: 1324.000000
DEBUG:  LANTERN - ---------------------
DEBUG:  LANTERN - Query cost estimator
DEBUG:  LANTERN - ---------------------
DEBUG:  LANTERN - Total cost: 72.767083
DEBUG:  LANTERN - Selectivity: 0.201732
DEBUG:  LANTERN - Num pages: 17.000000
DEBUG:  LANTERN - Num tuples: 673.000000
DEBUG:  LANTERN - ---------------------
                           QUERY PLAN                           
----------------------------------------------------------------
 Limit
   ->  Index Scan using hnsw_partial_views_4000 on views_vec10k
         Order By: (vec <-> '{0,1,2,3,4,5}'::real[])
(3 rows)

EXPLAIN (COSTS FALSE) SELECT id, views FROM views_vec10k WHERE views < 8000 ORDER BY vec<->'{0,1,2,3,4,5}' LIMIT 10;
DEBUG:  LANTERN - Query cost estimator
DEBUG:  LANTERN - ---------------------
DEBUG:  LANTERN - Total cost: 331.107310
DEBUG:  LANTERN - Selectivity: 0.948491
DEBUG:  LANTERN - Num pages: 77.000000
DEBUG:  LANTERN - Num tuples: 3161.000000
DEBUG:  LANTERN - ---------------------
DEBUG:  LANTERN - Query cost estimator
DEBUG:  LANTERN - ---------------------
DEBUG:  LANTERN - Total cost: 279.434515
DEBUG:  LANTERN - Selectivity: 0.801667
DEBUG:  LANTERN - Num pages: 65.000000
DEBUG:  LANTERN - Num tuples: 2671.000000
DEBUG:  LANTERN - ---------------------
DEBUG:  LANTERN - Query cost estimator
DEBUG:  LANTERN - ---------------------
DEBUG:  LANTERN - Total cost: 141.637941
DEBUG:  LANTERN - Selectivity: 0.397306
DEBUG:  LANTERN - Num pages: 33.000000
DEBUG:  LANTERN - Num tuples: 1324.000000
DEBUG:  LANTERN - ---------------------
                           QUERY PLAN                           
----------------------------------------------------------------
 Limit
   ->  Index Scan using hnsw_partial_views_8000 on views_vec10k
         Order By: (vec <-> '{0,1,2,3,4,5}'::real[])
(3 rows)

EXPLAIN (COSTS FALSE) SELECT id, views FROM views_vec10k WHERE views < 16000 ORDER BY vec<->'{0,1,2,3,4,5}' LIMIT 10;
DEBUG:  LANTERN - Query cost estimator
DEBUG:  LANTERN - ---------------------
DEBUG:  LANTERN - Total cost: 331.107310
DEBUG:  LANTERN - Selectivity: 0.948491
DEBUG:  LANTERN - Num pages: 77.000000
DEBUG:  LANTERN - Num tuples: 3161.000000
DEBUG:  LANTERN - ---------------------
DEBUG:  LANTERN - Query cost estimator
DEBUG:  LANTERN - ---------------------
DEBUG:  LANTERN - Total cost: 279.434515
DEBUG:  LANTERN - Selectivity: 0.801667
DEBUG:  LANTERN - Num pages: 65.000000
DEBUG:  LANTERN - Num tuples: 2671.000000
DEBUG:  LANTERN - ---------------------
                           QUERY PLAN                            
-----------------------------------------------------------------
 Limit
   ->  Index Scan using hnsw_partial_views_16000 on views_vec10k
         Order By: (vec <-> '{0,1,2,3,4,5}'::real[])
(3 rows)

EXPLAIN (COSTS FALSE) SELECT id, views FROM views_vec10k WHERE views < 19000 ORDER BY vec<->'{0,1,2,3,4,5}' LIMIT 10;
DEBUG:  LANTERN - Query cost estimator
DEBUG:  LANTERN - ---------------------
DEBUG:  LANTERN - Total cost: 331.107310
DEBUG:  LANTERN - Selectivity: 0.948491
DEBUG:  LANTERN - Num pages: 77.000000
DEBUG:  LANTERN - Num tuples: 3161.000000
DEBUG:  LANTERN - ---------------------
                           QUERY PLAN                            
-----------------------------------------------------------------
 Limit
   ->  Index Scan using hnsw_partial_views_19000 on views_vec10k
         Order By: (vec <-> '{0,1,2,3,4,5}'::real[])
(3 rows)

