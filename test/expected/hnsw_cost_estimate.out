SET client_min_messages=debug5;
\ir utils/sift10k_array.sql
CREATE TABLE IF NOT EXISTS sift_base10k (
     id SERIAL PRIMARY KEY,
     v REAL[128]
);
\copy sift_base10k (v) FROM '/tmp/lantern/vector_datasets/siftsmall_base_arrays.csv' with csv;
-- This function executes the given SQL query and returns its estimated total cost.
-- It parses the EXPLAIN output to retrieve the outermost (top-level) cost estimation.
-- Example EXPLAIN line: "Limit  (cost=0.00..0.47 rows=10 width=40)"
-- The regex captures the cost range and returns the higher end.
-- Returns NULL if no cost is found or if the provided query doesn't match the expected format.
CREATE OR REPLACE FUNCTION get_cost_estimate(explain_query text) RETURNS real AS $$
DECLARE
    explain_output text;
    cost_match text;
    line text;
BEGIN
    EXECUTE explain_query INTO explain_output;
    FOR line IN (
        SELECT
            unnest(string_to_array(explain_output, E'\n')))
        LOOP
            IF position(' ' IN
            LEFT (line, 1)) = 0 AND line LIKE '%cost=%' THEN
                cost_match :=(regexp_matches(line, 'cost=\d+\.\d+..\d+\.\d+'))[1];
                -- Adjust regex to capture both costs
                RETURN split_part(split_part(cost_match, '=', 2), '..', 2)::real;
                -- Extract the total cost
            END IF;
        END LOOP;
    RETURN NULL;
END;
$$ LANGUAGE plpgsql;
-- This function checks if val2 is within some error margin of val1.
CREATE OR REPLACE FUNCTION is_within_error(val1 real, val2 real, error_margin real) RETURNS boolean AS $$
BEGIN
    RETURN val2 BETWEEN val1 * (1 - error_margin) AND val1 * (1 + error_margin);
END;
$$ LANGUAGE plpgsql;
-- This function checks if the cost estimate for the given query is within some error margin of the expected cost.
CREATE OR REPLACE FUNCTION is_cost_estimate_within_error(explain_query text, expected_cost real, error_margin real DEFAULT 0.05) RETURNS boolean AS $$
BEGIN
    RETURN is_within_error(get_cost_estimate(explain_query), expected_cost, error_margin);    
END;
$$ LANGUAGE plpgsql;
-- Goal: make sure query cost estimate is accurate
-- when index is created with varying costruction parameters.
SELECT v AS v4444 FROM sift_base10k WHERE id = 4444 \gset
\set explain_query_template 'EXPLAIN SELECT * FROM sift_base10k ORDER BY v <-> ''%s'' LIMIT 10'
\set enable_seqscan = off;
-- Case 0, sanity check. No data.
CREATE TABLE empty_table(id SERIAL PRIMARY KEY, v REAL[2]);
CREATE INDEX empty_idx ON empty_table USING hnsw (v dist_l2sq_ops) WITH (M=2, ef_construction=10, ef=2, dim=2);
INFO:  done init usearch index
INFO:  inserted 0 elements
INFO:  done saving 0 vectors
SET _lantern_internal.is_test = true;
SELECT is_cost_estimate_within_error('EXPLAIN SELECT * FROM empty_table ORDER BY v <-> ''{1,2}'' LIMIT 10', 0.47);
DEBUG:  LANTERN - Query cost estimator
DEBUG:  LANTERN - ---------------------
DEBUG:  LANTERN - Total cost: 4.225000
DEBUG:  LANTERN - Selectivity: 1.000000
DEBUG:  LANTERN - Num pages: 1.000000
DEBUG:  LANTERN - Num tuples: 30.000000
DEBUG:  LANTERN - ---------------------
 is_cost_estimate_within_error 
-------------------------------
 t
(1 row)

SELECT _lantern_internal.validate_index('empty_idx');
INFO:  validate_index() start for empty_idx
INFO:  index_header = HnswIndexHeaderPage(version=1 vector_dim=2 m=2 ef_construction=10 ef=2 metric_kind=1 num_vectors=0 last_data_block=4294967295 blockmap_page_groups=0)
INFO:  blocks_nr=1 nodes_nr=0
INFO:  blocks for: header 1 blockmap 0 nodes 0
INFO:  nodes per block: 0 blocks with nodes
INFO:  level=0: nodes 0 directed neighbor edges 0 min neighbors 0 max neighbors 0
INFO:  validate_index() done, no issues found.
 validate_index 
----------------
 
(1 row)

DROP INDEX empty_idx;
-- Case 1, more data in index.
-- Should see higher cost than Case 0.
CREATE INDEX hnsw_idx ON sift_base10k USING hnsw (v dist_l2sq_ops) WITH (M=2, ef_construction=10, ef=4, dim=128);
INFO:  done init usearch index
INFO:  inserted 10000 elements
INFO:  done saving 10000 vectors
SELECT is_cost_estimate_within_error(format(:'explain_query_template', :'v4444'), 3.00);
DEBUG:  LANTERN - Query cost estimator
DEBUG:  LANTERN - ---------------------
DEBUG:  LANTERN - Total cost: 16.345000
DEBUG:  LANTERN - Selectivity: 1.000000
DEBUG:  LANTERN - Num pages: 4.000000
DEBUG:  LANTERN - Num tuples: 46.000000
DEBUG:  LANTERN - ---------------------
 is_cost_estimate_within_error 
-------------------------------
 t
(1 row)

SELECT _lantern_internal.validate_index('hnsw_idx');
INFO:  validate_index() start for hnsw_idx
INFO:  index_header = HnswIndexHeaderPage(version=1 vector_dim=128 m=2 ef_construction=10 ef=4 metric_kind=1 num_vectors=10000 last_data_block=730 blockmap_page_groups=2)
INFO:  blocks_nr=731 nodes_nr=10000
INFO:  blocks for: header 1 blockmap 7 nodes 723
INFO:  nodes per block: min (except last) 2 max (except last) 14 last 8
INFO:  level=0: nodes 5006 directed neighbor edges 25510 min neighbors 1 max neighbors 4
INFO:  level=1: nodes 2456 directed neighbor edges 7209 min neighbors 1 max neighbors 2
INFO:  level=2: nodes 1327 directed neighbor edges 3685 min neighbors 1 max neighbors 2
INFO:  level=3: nodes 613 directed neighbor edges 1847 min neighbors 1 max neighbors 2
INFO:  level=4: nodes 292 directed neighbor edges 936 min neighbors 1 max neighbors 2
INFO:  level=5: nodes 152 directed neighbor edges 513 min neighbors 1 max neighbors 2
INFO:  level=6: nodes 77 directed neighbor edges 280 min neighbors 1 max neighbors 2
INFO:  level=7: nodes 37 directed neighbor edges 140 min neighbors 1 max neighbors 2
INFO:  level=8: nodes 14 directed neighbor edges 71 min neighbors 1 max neighbors 2
INFO:  level=9: nodes 11 directed neighbor edges 48 min neighbors 1 max neighbors 2
INFO:  level=10: nodes 8 directed neighbor edges 26 min neighbors 1 max neighbors 2
INFO:  level=11: nodes 2 directed neighbor edges 10 min neighbors 1 max neighbors 2
INFO:  level=12: nodes 2 directed neighbor edges 8 min neighbors 1 max neighbors 2
INFO:  level=13: nodes 1 directed neighbor edges 6 min neighbors 2 max neighbors 2
INFO:  level=14: nodes 0 directed neighbor edges 2 min neighbors 1 max neighbors 1
INFO:  level=15: nodes 0 directed neighbor edges 2 min neighbors 1 max neighbors 1
INFO:  level=16: nodes 0 directed neighbor edges 2 min neighbors 1 max neighbors 1
INFO:  level=17: nodes 2 directed neighbor edges 2 min neighbors 1 max neighbors 1
INFO:  validate_index() done, no issues found.
 validate_index 
----------------
 
(1 row)

DROP INDEX hnsw_idx;
-- Case 2, higher M.
-- Should see higher cost than Case 1.
CREATE INDEX hnsw_idx ON sift_base10k USING hnsw (v dist_l2sq_ops) WITH (M=20, ef_construction=10, ef=4, dim=128);
INFO:  done init usearch index
INFO:  inserted 10000 elements
INFO:  done saving 10000 vectors
SELECT is_cost_estimate_within_error(format(:'explain_query_template', :'v4444'), 3.27);
DEBUG:  LANTERN - Query cost estimator
DEBUG:  LANTERN - ---------------------
DEBUG:  LANTERN - Total cost: 289.797500
DEBUG:  LANTERN - Selectivity: 1.000000
DEBUG:  LANTERN - Num pages: 71.000000
DEBUG:  LANTERN - Num tuples: 773.000000
DEBUG:  LANTERN - ---------------------
 is_cost_estimate_within_error 
-------------------------------
 t
(1 row)

SELECT _lantern_internal.validate_index('hnsw_idx');
INFO:  validate_index() start for hnsw_idx
INFO:  index_header = HnswIndexHeaderPage(version=1 vector_dim=128 m=20 ef_construction=10 ef=4 metric_kind=1 num_vectors=10000 last_data_block=917 blockmap_page_groups=2)
INFO:  blocks_nr=918 nodes_nr=10000
INFO:  blocks for: header 1 blockmap 7 nodes 910
INFO:  nodes per block: min (except last) 7 max (except last) 11 last 7
INFO:  level=0: nodes 9527 directed neighbor edges 171720 min neighbors 4 max neighbors 40
INFO:  level=1: nodes 444 directed neighbor edges 6078 min neighbors 3 max neighbors 20
INFO:  level=2: nodes 26 directed neighbor edges 417 min neighbors 3 max neighbors 20
INFO:  level=3: nodes 2 directed neighbor edges 6 min neighbors 2 max neighbors 2
INFO:  level=4: nodes 1 directed neighbor edges 0 min neighbors 0 max neighbors 0
INFO:  validate_index() done, no issues found.
 validate_index 
----------------
 
(1 row)

DROP INDEX hnsw_idx;
-- Case 3, higher ef.
-- Should see higher cost than Case 2.
CREATE INDEX hnsw_idx ON sift_base10k USING hnsw (v dist_l2sq_ops) WITH (M=20, ef_construction=10, ef=16, dim=128);
INFO:  done init usearch index
INFO:  inserted 10000 elements
INFO:  done saving 10000 vectors
SELECT is_cost_estimate_within_error(format(:'explain_query_template', :'v4444'), 3.91);
DEBUG:  LANTERN - Query cost estimator
DEBUG:  LANTERN - ---------------------
DEBUG:  LANTERN - Total cost: 922.406057
DEBUG:  LANTERN - Selectivity: 1.000000
DEBUG:  LANTERN - Num pages: 226.000000
DEBUG:  LANTERN - Num tuples: 2465.000000
DEBUG:  LANTERN - ---------------------
 is_cost_estimate_within_error 
-------------------------------
 t
(1 row)

SELECT _lantern_internal.validate_index('hnsw_idx');
INFO:  validate_index() start for hnsw_idx
INFO:  index_header = HnswIndexHeaderPage(version=1 vector_dim=128 m=20 ef_construction=10 ef=16 metric_kind=1 num_vectors=10000 last_data_block=917 blockmap_page_groups=2)
INFO:  blocks_nr=918 nodes_nr=10000
INFO:  blocks for: header 1 blockmap 7 nodes 910
INFO:  nodes per block: min (except last) 7 max (except last) 11 last 7
INFO:  level=0: nodes 9527 directed neighbor edges 171720 min neighbors 4 max neighbors 40
INFO:  level=1: nodes 444 directed neighbor edges 6078 min neighbors 3 max neighbors 20
INFO:  level=2: nodes 26 directed neighbor edges 417 min neighbors 3 max neighbors 20
INFO:  level=3: nodes 2 directed neighbor edges 6 min neighbors 2 max neighbors 2
INFO:  level=4: nodes 1 directed neighbor edges 0 min neighbors 0 max neighbors 0
INFO:  validate_index() done, no issues found.
 validate_index 
----------------
 
(1 row)

DROP INDEX hnsw_idx;
