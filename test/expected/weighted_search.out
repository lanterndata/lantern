DROP EXTENSION IF EXISTS lantern;
CREATE EXTENSION IF NOT EXISTS vector;
\ir utils/sift1k_vector.sql
CREATE TABLE IF NOT EXISTS sift_base1k (
    id SERIAL,
    v VECTOR(128)
);
COPY sift_base1k (v) FROM '/tmp/lantern/vector_datasets/sift_base1k.csv' WITH CSV;
CREATE INDEX ON sift_base1k USING hnsw (v vector_l2_ops) WITH (M=5, ef_construction=128);
SET log_error_verbosity = verbose;
-- Note: We drop the Lantern extension and re-create it because Lantern only supports
-- pgvector if it is present on initialization
CREATE EXTENSION lantern;
set enable_seqscan = false;
-- create variables with 4th and 444th vector and find closest 10 IDs to each
SELECT v as v4 FROM sift_Base1k WHERE id = 4 \gset
SELECT v as v44 FROM sift_Base1k WHERE id = 44 \gset
SELECT v as v444 FROM sift_Base1k WHERE id = 444 \gset
SELECT id, ROUND((v <-> :'v4')::numeric, 2) as dist FROM sift_Base1k ORDER BY v <-> :'v4' LIMIT 10;
 id  |  dist  
-----+--------
   4 |   0.00
   2 | 122.45
  15 | 141.39
   8 | 226.66
 163 | 244.31
   6 | 249.80
  63 | 257.77
 183 | 259.18
 254 | 263.45
 116 | 264.64
(10 rows)

SELECT id, ROUND((v <-> :'v44')::numeric, 2) as dist FROM sift_Base1k ORDER BY v <-> :'v44' LIMIT 10;
 id  |  dist  
-----+--------
  44 |   0.00
  27 | 204.96
  77 | 218.82
  23 | 259.43
 954 | 305.29
 489 | 327.99
 632 | 327.99
 950 | 338.17
 744 | 343.25
 539 | 344.02
(10 rows)

-- Make sure the function does not modify the global hnsw.ef_search
SHOW hnsw.ef_search;
 hnsw.ef_search 
----------------
 40
(1 row)

SELECT id, ROUND((v <-> :'v4')::numeric, 2) as v4_dist, ROUND((v <-> :'v44')::numeric, 2) v44_dist
FROM lantern.weighted_vector_search(CAST(NULL as "sift_base1k"), max_dist => 750., debug_output => true, exact => false,
  w1=> 1., col1=>'v'::text, vec1=>:'v4'::vector,
  w2=> 1., col2=>'v'::text, vec2=>:'v44'::vector) as v4_weighted_search
LIMIT 100;
WARNING:  col1 yielded 3 rows
WARNING:  col2 yielded 1 rows
WARNING:  Query: WITH query1 AS (SELECT * FROM sift_base1k  WHERE (1 * (v <-> '[MASKED_VECTOR]'::vector))+ (1 * (v <-> '[MASKED_VECTOR]'::vector)) < '750' ORDER BY v <-> '[MASKED_VECTOR]'::vector LIMIT '100') , query2 AS (SELECT * FROM sift_base1k  WHERE (1 * (v <-> '[MASKED_VECTOR]'::vector))+ (1 * (v <-> '[MASKED_VECTOR]'::vector)) < '750' ORDER BY v <-> '[MASKED_VECTOR]'::vector LIMIT '100')SELECT * FROM (
      SELECT DISTINCT ON (id) * FROM (
          (SELECT * FROM query1)
           UNION ALL (SELECT * FROM query2) 
      ) t
    )
    tt  WHERE (1 * (v <-> '[MASKED_VECTOR]'::vector))+ (1 * (v <-> '[MASKED_VECTOR]'::vector)) < '750' ORDER BY (1 * (v <-> '[MASKED_VECTOR]'::vector))+ (1 * (v <-> '[MASKED_VECTOR]'::vector))
WARNING:   weighted vector search explain: [
    {
        "Plan": {
            "Plans": [
                {
                    "Alias": "tt",
                    "Plans": [
                        {
                            "Plans": [
                                {
                                    "Plans": [
                                        {
                                            "Plans": [
                                                {
                                                    "Alias": "query1",
                                                    "Plans": [
                                                        {
                                                            "Plans": [
                                                                {
                                                                    "Alias": "sift_base1k",
                                                                    "Filter": "((('1'::double precision * (v <-> '[MASKED_VECTOR]'::vector)) + ('1'::double precision * (v <-> '[MASKED_VECTOR]'::vector))) < '750'::double precision)",
                                                                    "Order By": "(v <-> '[MASKED_VECTOR]'::vector)",
                                                                    "Node Type": "Index Scan",
                                                                    "Index Name": "sift_base1k_v_idx",
                                                                    "Relation Name": "sift_base1k",
                                                                    "Parallel Aware": false,
                                                                    "Parent Relationship": "Outer"
                                                                }
                                                            ],
                                                            "Node Type": "Limit",
                                                            "Parallel Aware": false,
                                                            "Parent Relationship": "Subquery"
                                                        }
                                                    ],
                                                    "Node Type": "Subquery Scan",
                                                    "Parallel Aware": false,
                                                    "Parent Relationship": "Member"
                                                },
                                                {
                                                    "Alias": "query2",
                                                    "Plans": [
                                                        {
                                                            "Plans": [
                                                                {
                                                                    "Alias": "sift_base1k_1",
                                                                    "Filter": "((('1'::double precision * (v <-> '[MASKED_VECTOR]'::vector)) + ('1'::double precision * (v <-> '[MASKED_VECTOR]'::vector))) < '750'::double precision)",
                                                                    "Order By": "(v <-> '[MASKED_VECTOR]'::vector)",
                                                                    "Node Type": "Index Scan",
                                                                    "Index Name": "sift_base1k_v_idx",
                                                                    "Relation Name": "sift_base1k",
                                                                    "Parallel Aware": false,
                                                                    "Parent Relationship": "Outer"
                                                                }
                                                            ],
                                                            "Node Type": "Limit",
                                                            "Parallel Aware": false,
                                                            "Parent Relationship": "Subquery"
                                                        }
                                                    ],
                                                    "Node Type": "Subquery Scan",
                                                    "Parallel Aware": false,
                                                    "Parent Relationship": "Member"
                                                }
                                            ],
                                            "Node Type": "Append",
                                            "Parallel Aware": false,
                                            "Subplans Removed": 0,
                                            "Parent Relationship": "Outer"
                                        }
                                    ],
                                    "Sort Key": [
                                        "query1.id"
                                    ],
                                    "Node Type": "Sort",
                                    "Parallel Aware": false,
                                    "Parent Relationship": "Outer"
                                }
                            ],
                            "Node Type": "Unique",
                            "Parallel Aware": false,
                            "Parent Relationship": "Subquery"
                        }
                    ],
                    "Filter": "((('1'::double precision * (tt.v <-> '[MASKED_VECTOR]'::vector)) + ('1'::double precision * (tt.v <-> '[MASKED_VECTOR]'::vector))) < '750'::double precision)",
                    "Node Type": "Subquery Scan",
                    "Parallel Aware": false,
                    "Parent Relationship": "Outer"
                }
            ],
            "Sort Key": [
                "((('1'::double precision * (tt.v <-> '[MASKED_VECTOR]'::vector)) + ('1'::double precision * (tt.v <-> '[MASKED_VECTOR]'::vector))))"
            ],
            "Node Type": "Sort",
            "Parallel Aware": false
        }
    }
]
 id | v4_dist | v44_dist 
----+---------+----------
  4 |    0.00 |   634.43
 44 |  634.43 |     0.00
  2 |  122.45 |   611.24
 15 |  141.39 |   607.78
(4 rows)

SELECT id, ROUND((v <-> :'v4')::numeric, 2) as v4_dist, ROUND((v <-> :'v44')::numeric, 2) v44_dist
FROM lantern.weighted_vector_search(CAST(NULL as "sift_base1k"), max_dist => 750., debug_output => true, exact => true,
  w1=> 1., col1=>'v'::text, vec1=>:'v4'::vector,
  w2=> 1., col2=>'v'::text, vec2=>:'v44'::vector) as v4_weighted_search
LIMIT 100;
WARNING:  Query: SELECT * FROM sift_base1k  WHERE (1 * (v <-> '[MASKED_VECTOR]'::vector))+ (1 * (v <-> '[MASKED_VECTOR]'::vector)) < '750' ORDER BY (1 * (v <-> '[MASKED_VECTOR]'::vector))+ (1 * (v <-> '[MASKED_VECTOR]'::vector))
WARNING:  weighted vector search explain(exact=true): [
    {
        "Plan": {
            "Plans": [
                {
                    "Alias": "sift_base1k",
                    "Filter": "((('1'::double precision * (v <-> '[MASKED_VECTOR]'::vector)) + ('1'::double precision * (v <-> '[MASKED_VECTOR]'::vector))) < '750'::double precision)",
                    "Node Type": "Seq Scan",
                    "Relation Name": "sift_base1k",
                    "Parallel Aware": false,
                    "Parent Relationship": "Outer"
                }
            ],
            "Sort Key": [
                "((('1'::double precision * (v <-> '[MASKED_VECTOR]'::vector)) + ('1'::double precision * (v <-> '[MASKED_VECTOR]'::vector))))"
            ],
            "Node Type": "Sort",
            "Parallel Aware": false
        }
    }
]
 id | v4_dist | v44_dist 
----+---------+----------
  4 |    0.00 |   634.43
 44 |  634.43 |     0.00
  2 |  122.45 |   611.24
 15 |  141.39 |   607.78
(4 rows)

-- Make sure the function does not modify the global hnsw.ef_search
SHOW hnsw.ef_search;
 hnsw.ef_search 
----------------
 40
(1 row)

SELECT *, 0.03 * v4_dist + 0.45 * v44_dist + 0.52 * v444_dist as weighted_dist
 FROM (SELECT id, ROUND((v <-> :'v4')::numeric, 2) as v4_dist, ROUND((v <-> :'v44')::numeric, 2) v44_dist, ROUND((v <-> :'v444')::numeric, 2) v444_dist
  FROM lantern.weighted_vector_search(CAST(NULL as "sift_base1k"), max_dist => 440., debug_output => true, exact => false,
  w1=> 0.03, col1=>'v'::text, vec1=>:'v4'::vector,
  w2=> 0.45, col2=>'v'::text, vec2=>:'v44'::vector,
  w3=> 0.52, col3=>'v'::text, vec3=>:'v444'::vector
) as v4_weighted_search
LIMIT 100) t;
WARNING:  col1 yielded 1 rows
WARNING:  col2 yielded 2 rows
WARNING:  col3 yielded 3 rows
WARNING:  Query: WITH query1 AS (SELECT * FROM sift_base1k  WHERE (0.03 * (v <-> '[MASKED_VECTOR]'::vector))+ (0.45 * (v <-> '[MASKED_VECTOR]'::vector))+ (0.52 * (v <-> '[MASKED_VECTOR]'::vector)) < '440' ORDER BY v <-> '[MASKED_VECTOR]'::vector LIMIT '100') , query2 AS (SELECT * FROM sift_base1k  WHERE (0.03 * (v <-> '[MASKED_VECTOR]'::vector))+ (0.45 * (v <-> '[MASKED_VECTOR]'::vector))+ (0.52 * (v <-> '[MASKED_VECTOR]'::vector)) < '440' ORDER BY v <-> '[MASKED_VECTOR]'::vector LIMIT '100'), query3 AS (SELECT * FROM sift_base1k  WHERE (0.03 * (v <-> '[MASKED_VECTOR]'::vector))+ (0.45 * (v <-> '[MASKED_VECTOR]'::vector))+ (0.52 * (v <-> '[MASKED_VECTOR]'::vector)) < '440' ORDER BY v <-> '[MASKED_VECTOR]'::vector LIMIT '100')SELECT * FROM (
      SELECT DISTINCT ON (id) * FROM (
          (SELECT * FROM query1)
           UNION ALL (SELECT * FROM query2)  UNION ALL (SELECT * FROM query3) 
      ) t
    )
    tt  WHERE (0.03 * (v <-> '[MASKED_VECTOR]'::vector))+ (0.45 * (v <-> '[MASKED_VECTOR]'::vector))+ (0.52 * (v <-> '[MASKED_VECTOR]'::vector)) < '440' ORDER BY (0.03 * (v <-> '[MASKED_VECTOR]'::vector))+ (0.45 * (v <-> '[MASKED_VECTOR]'::vector))+ (0.52 * (v <-> '[MASKED_VECTOR]'::vector))
WARNING:   weighted vector search explain: [
    {
        "Plan": {
            "Plans": [
                {
                    "Alias": "tt",
                    "Plans": [
                        {
                            "Plans": [
                                {
                                    "Plans": [
                                        {
                                            "Plans": [
                                                {
                                                    "Alias": "query1",
                                                    "Plans": [
                                                        {
                                                            "Plans": [
                                                                {
                                                                    "Alias": "sift_base1k",
                                                                    "Filter": "(((('0.03'::double precision * (v <-> '[MASKED_VECTOR]'::vector)) + ('0.45'::double precision * (v <-> '[MASKED_VECTOR]'::vector))) + ('0.52'::double precision * (v <-> '[MASKED_VECTOR]'::vector))) < '440'::double precision)",
                                                                    "Order By": "(v <-> '[MASKED_VECTOR]'::vector)",
                                                                    "Node Type": "Index Scan",
                                                                    "Index Name": "sift_base1k_v_idx",
                                                                    "Relation Name": "sift_base1k",
                                                                    "Parallel Aware": false,
                                                                    "Parent Relationship": "Outer"
                                                                }
                                                            ],
                                                            "Node Type": "Limit",
                                                            "Parallel Aware": false,
                                                            "Parent Relationship": "Subquery"
                                                        }
                                                    ],
                                                    "Node Type": "Subquery Scan",
                                                    "Parallel Aware": false,
                                                    "Parent Relationship": "Member"
                                                },
                                                {
                                                    "Alias": "query2",
                                                    "Plans": [
                                                        {
                                                            "Plans": [
                                                                {
                                                                    "Alias": "sift_base1k_1",
                                                                    "Filter": "(((('0.03'::double precision * (v <-> '[MASKED_VECTOR]'::vector)) + ('0.45'::double precision * (v <-> '[MASKED_VECTOR]'::vector))) + ('0.52'::double precision * (v <-> '[MASKED_VECTOR]'::vector))) < '440'::double precision)",
                                                                    "Order By": "(v <-> '[MASKED_VECTOR]'::vector)",
                                                                    "Node Type": "Index Scan",
                                                                    "Index Name": "sift_base1k_v_idx",
                                                                    "Relation Name": "sift_base1k",
                                                                    "Parallel Aware": false,
                                                                    "Parent Relationship": "Outer"
                                                                }
                                                            ],
                                                            "Node Type": "Limit",
                                                            "Parallel Aware": false,
                                                            "Parent Relationship": "Subquery"
                                                        }
                                                    ],
                                                    "Node Type": "Subquery Scan",
                                                    "Parallel Aware": false,
                                                    "Parent Relationship": "Member"
                                                },
                                                {
                                                    "Alias": "query3",
                                                    "Plans": [
                                                        {
                                                            "Plans": [
                                                                {
                                                                    "Alias": "sift_base1k_2",
                                                                    "Filter": "(((('0.03'::double precision * (v <-> '[MASKED_VECTOR]'::vector)) + ('0.45'::double precision * (v <-> '[MASKED_VECTOR]'::vector))) + ('0.52'::double precision * (v <-> '[MASKED_VECTOR]'::vector))) < '440'::double precision)",
                                                                    "Order By": "(v <-> '[MASKED_VECTOR]'::vector)",
                                                                    "Node Type": "Index Scan",
                                                                    "Index Name": "sift_base1k_v_idx",
                                                                    "Relation Name": "sift_base1k",
                                                                    "Parallel Aware": false,
                                                                    "Parent Relationship": "Outer"
                                                                }
                                                            ],
                                                            "Node Type": "Limit",
                                                            "Parallel Aware": false,
                                                            "Parent Relationship": "Subquery"
                                                        }
                                                    ],
                                                    "Node Type": "Subquery Scan",
                                                    "Parallel Aware": false,
                                                    "Parent Relationship": "Member"
                                                }
                                            ],
                                            "Node Type": "Append",
                                            "Parallel Aware": false,
                                            "Subplans Removed": 0,
                                            "Parent Relationship": "Outer"
                                        }
                                    ],
                                    "Sort Key": [
                                        "query1.id"
                                    ],
                                    "Node Type": "Sort",
                                    "Parallel Aware": false,
                                    "Parent Relationship": "Outer"
                                }
                            ],
                            "Node Type": "Unique",
                            "Parallel Aware": false,
                            "Parent Relationship": "Subquery"
                        }
                    ],
                    "Filter": "(((('0.03'::double precision * (tt.v <-> '[MASKED_VECTOR]'::vector)) + ('0.45'::double precision * (tt.v <-> '[MASKED_VECTOR]'::vector))) + ('0.52'::double precision * (tt.v <-> '[MASKED_VECTOR]'::vector))) < '440'::double precision)",
                    "Node Type": "Subquery Scan",
                    "Parallel Aware": false,
                    "Parent Relationship": "Outer"
                }
            ],
            "Sort Key": [
                "(((('0.03'::double precision * (tt.v <-> '[MASKED_VECTOR]'::vector)) + ('0.45'::double precision * (tt.v <-> '[MASKED_VECTOR]'::vector))) + ('0.52'::double precision * (tt.v <-> '[MASKED_VECTOR]'::vector))))"
            ],
            "Node Type": "Sort",
            "Parallel Aware": false
        }
    }
]
 id  | v4_dist | v44_dist | v444_dist | weighted_dist 
-----+---------+----------+-----------+---------------
 444 |  390.54 |   612.81 |      0.00 |      287.4807
  44 |  634.43 |     0.00 |    612.81 |      337.6941
 830 |  437.72 |   586.69 |    214.16 |      388.5053
  77 |  615.89 |   218.82 |    595.58 |      426.6473
  76 |  316.78 |   569.97 |    313.14 |      428.8227
(5 rows)

SELECT *, 0.03 * v4_dist + 0.45 * v44_dist + 0.52 * v444_dist as weighted_dist
 FROM (SELECT id, ROUND((v <-> :'v4')::numeric, 2) as v4_dist, ROUND((v <-> :'v44')::numeric, 2) v44_dist, ROUND((v <-> :'v444')::numeric, 2) v444_dist
  FROM lantern.weighted_vector_search(CAST(NULL as "sift_base1k"), max_dist => 440., debug_output => true, exact => true,
  w1=> 0.03, col1=>'v'::text, vec1=>:'v4'::vector,
  w2=> 0.45, col2=>'v'::text, vec2=>:'v44'::vector,
  w3=> 0.52, col3=>'v'::text, vec3=>:'v444'::vector
) as v4_weighted_search
LIMIT 100) t;
WARNING:  Query: SELECT * FROM sift_base1k  WHERE (0.03 * (v <-> '[MASKED_VECTOR]'::vector))+ (0.45 * (v <-> '[MASKED_VECTOR]'::vector))+ (0.52 * (v <-> '[MASKED_VECTOR]'::vector)) < '440' ORDER BY (0.03 * (v <-> '[MASKED_VECTOR]'::vector))+ (0.45 * (v <-> '[MASKED_VECTOR]'::vector))+ (0.52 * (v <-> '[MASKED_VECTOR]'::vector))
WARNING:  weighted vector search explain(exact=true): [
    {
        "Plan": {
            "Plans": [
                {
                    "Alias": "sift_base1k",
                    "Filter": "(((('0.03'::double precision * (v <-> '[MASKED_VECTOR]'::vector)) + ('0.45'::double precision * (v <-> '[MASKED_VECTOR]'::vector))) + ('0.52'::double precision * (v <-> '[MASKED_VECTOR]'::vector))) < '440'::double precision)",
                    "Node Type": "Seq Scan",
                    "Relation Name": "sift_base1k",
                    "Parallel Aware": false,
                    "Parent Relationship": "Outer"
                }
            ],
            "Sort Key": [
                "(((('0.03'::double precision * (v <-> '[MASKED_VECTOR]'::vector)) + ('0.45'::double precision * (v <-> '[MASKED_VECTOR]'::vector))) + ('0.52'::double precision * (v <-> '[MASKED_VECTOR]'::vector))))"
            ],
            "Node Type": "Sort",
            "Parallel Aware": false
        }
    }
]
 id  | v4_dist | v44_dist | v444_dist | weighted_dist 
-----+---------+----------+-----------+---------------
 444 |  390.54 |   612.81 |      0.00 |      287.4807
  44 |  634.43 |     0.00 |    612.81 |      337.6941
 830 |  437.72 |   586.69 |    214.16 |      388.5053
  77 |  615.89 |   218.82 |    595.58 |      426.6473
  76 |  316.78 |   569.97 |    313.14 |      428.8227
(5 rows)

-- when max_dist is not specified, number of returned values dicreases with smaller ef
SELECT count(*)
  FROM lantern.weighted_vector_search(CAST(NULL as "sift_base1k"), debug_output => true, exact => true,
  w1=> 0.03, col1=>'v'::text, vec1=>:'v4'::vector,
  w2=> 0.45, col2=>'v'::text, vec2=>:'v44'::vector,
  w3=> 0.52, col3=>'v'::text, vec3=>:'v444'::vector
);
WARNING:  Query: SELECT * FROM sift_base1k  ORDER BY (0.03 * (v <-> '[MASKED_VECTOR]'::vector))+ (0.45 * (v <-> '[MASKED_VECTOR]'::vector))+ (0.52 * (v <-> '[MASKED_VECTOR]'::vector))
WARNING:  weighted vector search explain(exact=true): [
    {
        "Plan": {
            "Plans": [
                {
                    "Alias": "sift_base1k",
                    "Node Type": "Seq Scan",
                    "Relation Name": "sift_base1k",
                    "Parallel Aware": false,
                    "Parent Relationship": "Outer"
                }
            ],
            "Sort Key": [
                "(((('0.03'::double precision * (v <-> '[MASKED_VECTOR]'::vector)) + ('0.45'::double precision * (v <-> '[MASKED_VECTOR]'::vector))) + ('0.52'::double precision * (v <-> '[MASKED_VECTOR]'::vector))))"
            ],
            "Node Type": "Sort",
            "Parallel Aware": false
        }
    }
]
 count 
-------
  1000
(1 row)

SELECT count(*)
  FROM lantern.weighted_vector_search(CAST(NULL as "sift_base1k"), exact => false, ef => 100, -- default
  w1=> 0.03, col1=>'v'::text, vec1=>:'v4'::vector,
  w2=> 0.45, col2=>'v'::text, vec2=>:'v44'::vector,
  w3=> 0.52, col3=>'v'::text, vec3=>:'v444'::vector
);
 count 
-------
   272
(1 row)

SELECT count(*)
  FROM lantern.weighted_vector_search(CAST(NULL as "sift_base1k"), exact => false, ef => 10,
  w1=> 0.03, col1=>'v'::text, vec1=>:'v4'::vector,
  w2=> 0.45, col2=>'v'::text, vec2=>:'v44'::vector,
  w3=> 0.52, col3=>'v'::text, vec3=>:'v444'::vector
);
 count 
-------
    30
(1 row)

SELECT count(*)
  FROM lantern.weighted_vector_search(CAST(NULL as "sift_base1k"), exact => false, ef => 5,
  w1=> 0.03, col1=>'v'::text, vec1=>:'v4'::vector,
  w2=> 0.45, col2=>'v'::text, vec2=>:'v44'::vector,
  w3=> 0.52, col3=>'v'::text, vec3=>:'v444'::vector
);
 count 
-------
    15
(1 row)

CREATE INDEX ON sift_base1k USING hnsw (v vector_cosine_ops) WITH (M=5, ef_construction=128);
SELECT count(*)
  FROM lantern.weighted_vector_search(CAST(NULL as "sift_base1k"), exact => false, ef => 5, distance_operator => '<=>',
  w1=> 0.03, col1=>'v'::text, vec1=>:'v4'::vector,
  w2=> 0.45, col2=>'v'::text, vec2=>:'v44'::vector,
  w3=> 0.52, col3=>'v'::text, vec3=>:'v444'::vector
);
 count 
-------
    15
(1 row)

-- test the API-shortcut helper (should be same as the one above)
SELECT count(*)
  FROM lantern.weighted_vector_search_cos(CAST(NULL as "sift_base1k"), exact => false, ef => 5,
  w1=> 0.03, col1=>'v'::text, vec1=>:'v4'::vector,
  w2=> 0.45, col2=>'v'::text, vec2=>:'v44'::vector,
  w3=> 0.52, col3=>'v'::text, vec3=>:'v444'::vector
);
 count 
-------
    15
(1 row)

-- Make sure API still works when the table stores real[] for vectors
ALTER TABLE sift_base1k ADD COLUMN v_real real[];
UPDATE sift_base1k SET v_real = v;
-- The next two lines are a workaround of the upstream postgres issue with table-polymorphic (anyelement) functions
CREATE SCHEMA dummy;
DROP SCHEMA dummy;
-- CREATE INDEX ON sift_base1k USING hnsw (v vector_l2_ops) WITH (M=5, ef_construction=128);
CREATE TABLE sift_base1k_2 AS SELECT * FROM sift_base1k;
SELECT count(*)
  FROM lantern.weighted_vector_search_cos(CAST(NULL as "sift_base1k_2"), exact => false, ef => 5,
  w1=> 0.03, col1=>'v_real'::text, vec1=>:'v4'::vector,
  w2=> 0.45, col2=>'v_real'::text, vec2=>:'v44'::vector,
  w3=> 0.52, col3=>'v_real'::text, vec3=>:'v444'::vector
);
 count 
-------
    15
(1 row)

SELECT count(*)
  FROM lantern.weighted_vector_search_cos(CAST(NULL as "sift_base1k"), exact => false, ef => 5,
  w1=> 0.03, col1=>'v_real'::text, vec1=>:'v4'::vector,
  w2=> 0.45, col2=>'v_real'::text, vec2=>:'v44'::vector,
  w3=> 0.52, col3=>'v_real'::text, vec3=>:'v444'::vector
);
 count 
-------
    15
(1 row)

-- Check if the type 'sparsevec' exists and store the result in a variable
SELECT EXISTS (
    SELECT 1
    FROM pg_type
    WHERE typname = 'sparsevec'
) AS exists_sparsevec \gset
-- Conditional execution based on the variable
\if :exists_sparsevec
    \echo 'The sparsevec type exists. Running commands...'
    \ir utils/small_world_sparsevec.sql
    SELECT '{1:0.4,2:0.3,3:0.2}/3' AS s3 \gset
    SELECT '[-0.5,-0.1,-0.3]' AS v3 \gset
    SELECT
      id,
      0.9 * (s <-> :'s3'::sparsevec) + 0.1 * (v <-> :'v3'::vector) as dist
    FROM lantern.weighted_vector_search(CAST(NULL as "small_world"), exact => false, ef => 5,
      w1=> 0.9, col1=>'s'::text, vec1=>:'s3'::sparsevec,
      w2=> 0.1, col2=>'v'::text, vec2=>:'v3'::vector
    );
\else
    \echo 'The sparsevec type does not exist. Skipping commands...'
The sparsevec type does not exist. Skipping commands...
\endif
-- create non superuser and test the function
SET client_min_messages = WARNING;
-- suppress NOTICE:  role "test_user" does not exist, skipping
DROP USER IF EXISTS test_user;
SET client_min_messages = NOTICE;
CREATE USER test_user WITH PASSWORD 'test_password';
GRANT SELECT ON sift_base1k TO test_user;
GRANT SELECT ON sift_base1k_id_seq TO test_user;
SET ROLE test_user;
SELECT count(*)
  FROM lantern.weighted_vector_search_cos(CAST(NULL as "sift_base1k"), exact => false, ef => 5,
  w1=> 0.03, col1=>'v_real'::text, vec1=>:'v4'::vector,
  w2=> 0.45, col2=>'v_real'::text, vec2=>:'v44'::vector,
  w3=> 0.52, col3=>'v_real'::text, vec3=>:'v444'::vector
);
 count 
-------
    15
(1 row)

