---------------------------------------------------------------------
-- Test the distance functions used by the HNSW index
---------------------------------------------------------------------
\ir utils/small_world_array.sql
CREATE TABLE small_world (
    id VARCHAR(3),
    b BOOLEAN,
    v REAL[3]
);
INSERT INTO small_world (id, b, v) VALUES
    ('000', TRUE,  '{0,0,0}'),
    ('001', TRUE,  '{0,0,1}'),
    ('010', FALSE, '{0,1,0}'),
    ('011', TRUE,  '{0,1,1}'),
    ('100', FALSE, '{1,0,0}'),
    ('101', FALSE, '{1,0,1}'),
    ('110', FALSE, '{1,1,0}'),
    ('111', TRUE,  '{1,1,1}');
CREATE TABLE small_world_l2 (id VARCHAR(3), v REAL[]);
CREATE TABLE small_world_cos (id VARCHAR(3), v REAL[]);
CREATE TABLE small_world_ham (id VARCHAR(3), v INTEGER[]);
CREATE INDEX ON small_world_l2 USING lantern_hnsw (v dist_l2sq_ops) WITH (dim=3);
INFO:  done init usearch index
INFO:  inserted 0 elements
INFO:  done saving 0 vectors
CREATE INDEX ON small_world_cos USING lantern_hnsw (v dist_cos_ops) WITH (dim=3);
INFO:  done init usearch index
INFO:  inserted 0 elements
INFO:  done saving 0 vectors
CREATE INDEX ON small_world_ham USING lantern_hnsw (v dist_hamming_ops) WITH (dim=3);
INFO:  done init usearch index
INFO:  inserted 0 elements
INFO:  done saving 0 vectors
INSERT INTO small_world_l2 SELECT id, v FROM small_world;
INSERT INTO small_world_cos SELECT id, v FROM small_world;
INSERT INTO small_world_ham SELECT id, ARRAY[CAST(v[1] AS INTEGER), CAST(v[2] AS INTEGER), CAST(v[3] AS INTEGER)] FROM small_world;
SET enable_seqscan=FALSE;
SET lantern.pgvector_compat=FALSE;
-- Verify that the distance functions work (check distances)
SELECT ROUND(l2sq_dist(v, '{0,1,0}')::numeric, 2) FROM small_world_l2 ORDER BY v <?> '{0,1,0}';
 round 
-------
  0.00
  1.00
  1.00
  1.00
  2.00
  2.00
  2.00
  3.00
(8 rows)

SELECT ROUND(cos_dist(v, '{0,1,0}')::numeric, 2) FROM small_world_cos ORDER BY v <?> '{0,1,0}';
 round 
-------
  0.00
  0.29
  0.29
  0.42
  1.00
  1.00
  1.00
  1.00
(8 rows)

SELECT ROUND(hamming_dist(v, '{0,1,0}')::numeric, 2) FROM small_world_ham ORDER BY v <?> '{0,1,0}';
 round 
-------
  0.00
  1.00
  1.00
  1.00
  2.00
  2.00
  2.00
  3.00
(8 rows)

-- Verify that the distance functions work (check IDs)
SELECT ARRAY_AGG(id ORDER BY id), ROUND(l2sq_dist(v, '{0,1,0}')::numeric, 2) FROM small_world_l2 GROUP BY 2 ORDER BY 2;
   array_agg   | round 
---------------+-------
 {010}         |  0.00
 {000,011,110} |  1.00
 {001,100,111} |  2.00
 {101}         |  3.00
(4 rows)

SELECT ARRAY_AGG(id ORDER BY id), ROUND(cos_dist(v, '{0,1,0}')::numeric, 2) FROM small_world_cos GROUP BY 2 ORDER BY 2;
     array_agg     | round 
-------------------+-------
 {010}             |  0.00
 {011,110}         |  0.29
 {111}             |  0.42
 {000,001,100,101} |  1.00
(4 rows)

SELECT ARRAY_AGG(id ORDER BY id), ROUND(hamming_dist(v, '{0,1,0}')::numeric, 2) FROM small_world_ham GROUP BY 2 ORDER BY 2;
   array_agg   | round 
---------------+-------
 {010}         |  0.00
 {000,011,110} |  1.00
 {001,100,111} |  2.00
 {101}         |  3.00
(4 rows)

-- Verify that the indexes is being used
EXPLAIN (COSTS false) SELECT id FROM small_world_l2 ORDER BY v <?> '{0,1,0}';
                       QUERY PLAN                        
---------------------------------------------------------
 Index Scan using small_world_l2_v_idx on small_world_l2
   Order By: (v <?> '{0,1,0}'::real[])
(2 rows)

EXPLAIN (COSTS false) SELECT id FROM small_world_cos ORDER BY v <?> '{0,1,0}';
                        QUERY PLAN                         
-----------------------------------------------------------
 Index Scan using small_world_cos_v_idx on small_world_cos
   Order By: (v <?> '{0,1,0}'::real[])
(2 rows)

EXPLAIN (COSTS false) SELECT id FROM small_world_ham ORDER BY v <?> '{0,1,0}';
                        QUERY PLAN                         
-----------------------------------------------------------
 Index Scan using small_world_ham_v_idx on small_world_ham
   Order By: (v <?> '{0,1,0}'::integer[])
(2 rows)

\set ON_ERROR_STOP off
-- Expect errors due to mismatching vector dimensions
SELECT 1 FROM small_world_l2 ORDER BY v <?> '{0,1,0,1}' LIMIT 1;
ERROR:  Expected real array with dimension 3, got 4
SELECT 1 FROM small_world_cos ORDER BY v <?> '{0,1,0,1}' LIMIT 1;
ERROR:  Expected real array with dimension 3, got 4
SELECT 1 FROM small_world_ham ORDER BY v <?> '{0,1,0,1}' LIMIT 1;
ERROR:  Expected int array with dimension 3, got 4
SELECT l2sq_dist('{1,1}'::REAL[], '{0,1,0}'::REAL[]);
ERROR:  expected equally sized arrays but got arrays with dimensions 2 and 3
SELECT cos_dist('{1,1}', '{0,1,0}');
ERROR:  expected equally sized arrays but got arrays with dimensions 2 and 3
SELECT hamming_dist('{1,1}', '{0,1,0}');
ERROR:  expected equally sized arrays but got arrays with dimensions 2 and 3
-- Expect errors due to improper use of the <?> operator outside of its supported context
SELECT ARRAY[1,2,3] <?> ARRAY[3,2,1];
ERROR:  Operator <?> is invalid outside of ORDER BY context
SELECT ROUND((v <?> ARRAY[0,1,0])::numeric, 2) FROM small_world_cos ORDER BY v <?> '{0,1,0}' LIMIT 7;
ERROR:  Operator <?> is invalid outside of ORDER BY context
SELECT ROUND((v <?> ARRAY[0,1,0])::numeric, 2) FROM small_world_ham ORDER BY v <?> '{0,1,0}' LIMIT 7;
ERROR:  Operator <?> is invalid outside of ORDER BY context
\set ON_ERROR_STOP on
-- More robust distance operator tests
CREATE TABLE test1 (id SERIAL, v REAL[]);
CREATE TABLE test2 (id SERIAL, v REAL[]);
INSERT INTO test1 (v) VALUES ('{5,3}');
INSERT INTO test2 (v) VALUES ('{5,4}');
-- Expect success
SELECT 0 + 1;
 ?column? 
----------
        1
(1 row)

SELECT 1 FROM test1 WHERE id = 0 + 1;
 ?column? 
----------
        1
(1 row)

\set ON_ERROR_STOP off
-- Expect errors due to incorrect usage
INSERT INTO test1 (v) VALUES (ARRAY['{1,2}'::REAL[] <?> '{4,2}'::REAL[], 0]);
ERROR:  Operator <?> is invalid outside of ORDER BY context
SELECT v <?> '{1,2}' FROM test1 ORDER BY v <?> '{1,3}';
ERROR:  Operator <?> is invalid outside of ORDER BY context
SELECT v <?> '{1,2}' FROM test1;
ERROR:  Operator <?> is invalid outside of ORDER BY context
WITH temp AS (SELECT v <?> '{1,2}' FROM test1) SELECT 1 FROM temp;
ERROR:  Operator <?> is invalid outside of ORDER BY context
SELECT t.res FROM (SELECT v <?> '{1,2}' AS res FROM test1) t;
ERROR:  Operator <?> is invalid outside of ORDER BY context
SELECT (SELECT v <?> '{1,2}' FROM test1 LIMIT 1) FROM test1;
ERROR:  Operator <?> is invalid outside of ORDER BY context
SELECT COALESCE(v <?> '{1,2}', 0) FROM test1;
ERROR:  Operator <?> is invalid outside of ORDER BY context
SELECT EXISTS (SELECT v <?> '{1,2}' FROM test1);
ERROR:  Operator <?> is invalid outside of ORDER BY context
SELECT test1.v <?> test2.v FROM test1 JOIN test2 USING (id);
ERROR:  Operator <?> is invalid outside of ORDER BY context
SELECT v <?> '{1,2}' FROM test1 UNION SELECT v <?> '{1,3}' FROM test1;
ERROR:  Operator <?> is invalid outside of ORDER BY context
(SELECT v <?> '{1,2}' FROM test1 WHERE id < 5) UNION (SELECT v <?> '{1,3}' FROM test1 WHERE id >= 5);
ERROR:  Operator <?> is invalid outside of ORDER BY context
SELECT MAX(v <?> '{1,2}') FROM test1;
ERROR:  Operator <?> is invalid outside of ORDER BY context
SELECT * FROM test1 JOIN test2 ON test1.v <?> test2.v < 0.5;
ERROR:  Operator <?> is invalid outside of ORDER BY context
SELECT test1.v FROM test1 JOIN test2 ON test1.v <?> '{1,2}' = test2.v <?> '{1,3}';
ERROR:  Operator <?> is invalid outside of ORDER BY context
SELECT (v <?> '{1,2}') + (v <?> '{1,3}') FROM test1;
ERROR:  Operator <?> is invalid outside of ORDER BY context
SELECT CASE WHEN v <?> '{1,2}' > 1 THEN 'High' ELSE 'Low' END FROM test1;
ERROR:  Operator <?> is invalid outside of ORDER BY context
INSERT INTO test1 (v) VALUES ('{2,3}') RETURNING v <?> '{1,2}';
ERROR:  Operator <?> is invalid outside of ORDER BY context
SELECT 1 FROM test1 GROUP BY v <?> '{1,3}';
ERROR:  Operator <?> is invalid outside of ORDER BY context
SELECT 1 FROM test1 ORDER BY (('{1,2}'::real[] <?> '{3,4}'::real[]) - 0);
ERROR:  Operator <?> is invalid outside of ORDER BY context
SELECT 1 FROM test1 ORDER BY '{1,2}'::REAL[] <?> '{3,4}'::REAL[];
ERROR:  Operator <?> is invalid outside of ORDER BY context
SELECT 1 FROM test1 ORDER BY v <?> ARRAY[(SELECT '{1,4}'::REAL[] <?> '{4,2}'::REAL[]), 3];
ERROR:  Operator <?> is invalid outside of ORDER BY context
-- Expect errors due to index not existing
SELECT id FROM test1 ORDER BY v <?> '{1,2}';
ERROR:  Operator <?> can only be used inside of an index
SELECT 1 FROM test1 ORDER BY v <?> (SELECT '{1,3}'::real[]);
ERROR:  Operator <?> can only be used inside of an index
SELECT t2_results.id FROM test1 t1 JOIN LATERAL (SELECT t2.id FROM test2 t2 ORDER BY t1.v <?> t2.v LIMIT 1) t2_results ON TRUE;
ERROR:  Operator <?> can only be used inside of an index
WITH t AS (SELECT id FROM test1 ORDER BY v <?> '{1,2}' LIMIT 1) SELECT DISTINCT id FROM t;
ERROR:  Operator <?> can only be used inside of an index
WITH t AS (SELECT id FROM test1 ORDER BY v <?> '{1,2}' LIMIT 1) SELECT id, COUNT(*) FROM t GROUP BY 1;
ERROR:  Operator <?> can only be used inside of an index
WITH t AS (SELECT id FROM test1 ORDER BY v <?> '{1,2}') SELECT id FROM t UNION SELECT id FROM t;
ERROR:  Operator <?> can only be used inside of an index
-- issue #227
SELECT * from test2 JOIN LATERAL (SELECT * FROM (SELECT id FROM test2 ORDER BY v <?> '{1,2}') as forall) haha on TRUE;
ERROR:  Operator <?> can only be used inside of an index
-- more complex setup of the above
SELECT forall.id, nearest_per_id.* FROM
(SELECT * FROM
  test2) AS forall
  JOIN LATERAL (
    SELECT
      ARRAY_AGG(id ORDER BY id) AS near_ids,
      ARRAY_AGG(dist ORDER BY id) AS near_dists
    FROM
      (
        SELECT
          id,
          l2sq_dist(v, forall.v) as dist
        FROM
          test2
        ORDER BY
          v <?> forall.v
        LIMIT
          5
      ) as __unused_name
  ) nearest_per_id on TRUE
ORDER BY
  forall.id
LIMIT
  9;
ERROR:  Operator <?> can only be used inside of an index
\set ON_ERROR_STOP on
-- cross-lateral joins work as expected when appropriate index exists
-- nearest element for each vector
-- Note: The limit below is 4 to make sure all neighbors with distance 1 are included
-- and none of distance 2 are included. if we include some of distance 2, then we need
-- further sorting to make sure ties among nodes with distance 2 are broken consistently
SELECT forall.id, nearest_per_id.* FROM
(SELECT * FROM
  small_world_l2) AS forall
  JOIN LATERAL (
    SELECT
      ARRAY_AGG(id ORDER BY dist, id) AS near_ids,
      ARRAY_AGG(dist ORDER BY dist, id) AS near_dists
    FROM
      (
        SELECT
          id,
          l2sq_dist(v, forall.v) as dist
        FROM
          small_world_l2
        ORDER BY
          v <?> forall.v
        LIMIT
          4
      ) as __unused_name
  ) nearest_per_id on TRUE
ORDER BY
  forall.id
LIMIT
  9;
 id  |     near_ids      | near_dists 
-----+-------------------+------------
 000 | {000,001,010,100} | {0,1,1,1}
 001 | {001,000,011,101} | {0,1,1,1}
 010 | {010,000,011,110} | {0,1,1,1}
 011 | {011,001,010,111} | {0,1,1,1}
 100 | {100,000,101,110} | {0,1,1,1}
 101 | {101,001,100,111} | {0,1,1,1}
 110 | {110,010,100,111} | {0,1,1,1}
 111 | {111,011,101,110} | {0,1,1,1}
(8 rows)

-- Check that hamming distance query results are sorted correctly
CREATE TABLE extra_small_world_ham (
    id SERIAL PRIMARY KEY,
    v INT[2]
);
INSERT INTO extra_small_world_ham (v) VALUES ('{0,0}'), ('{1,1}'), ('{2,2}'), ('{3,3}');
CREATE INDEX ON extra_small_world_ham USING lantern_hnsw (v dist_hamming_ops) WITH (dim=2);
INFO:  done init usearch index
INFO:  inserted 4 elements
INFO:  done saving 4 vectors
SELECT ROUND(hamming_dist(v, '{0,0}')::numeric, 2) FROM extra_small_world_ham ORDER BY v <?> '{0,0}';
 round 
-------
  0.00
  2.00
  2.00
  4.00
(4 rows)

SELECT _lantern_internal.validate_index('small_world_l2_v_idx', false);
INFO:  validate_index() start for small_world_l2_v_idx
INFO:  validate_index() done, no issues found.
 validate_index 
----------------
 
(1 row)

SELECT _lantern_internal.validate_index('small_world_cos_v_idx', false);
INFO:  validate_index() start for small_world_cos_v_idx
INFO:  validate_index() done, no issues found.
 validate_index 
----------------
 
(1 row)

SELECT _lantern_internal.validate_index('small_world_ham_v_idx', false);
INFO:  validate_index() start for small_world_ham_v_idx
INFO:  validate_index() done, no issues found.
 validate_index 
----------------
 
(1 row)

SELECT _lantern_internal.validate_index('extra_small_world_ham_v_idx', false);
INFO:  validate_index() start for extra_small_world_ham_v_idx
INFO:  validate_index() done, no issues found.
 validate_index 
----------------
 
(1 row)

