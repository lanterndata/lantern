---------------------------------------------------------------------
-- Test the distance functions used by the HNSW index
---------------------------------------------------------------------
\ir utils/small_world_array.sql
CREATE TABLE small_world (
    id SERIAL,
    b BOOLEAN,
    v REAL[2]
);
INSERT INTO small_world (b, v) VALUES
    (TRUE, '{1,1}'),
    (TRUE, '{3,3}'),
    (TRUE, '{2,2}'),
    (TRUE, '{4,4}'),
    (TRUE, '{1,9}');
CREATE TABLE small_world_l2 (id VARCHAR(3), v REAL[]);
CREATE TABLE small_world_cos (id VARCHAR(3), v REAL[]);
CREATE TABLE small_world_ham (id VARCHAR(3), v INTEGER[]);
CREATE INDEX ON small_world_l2 USING hnsw (v dist_l2sq_ops) WITH (dims=2);
INFO:  done init usearch index
INFO:  inserted 0 elements
INFO:  done saving 0 vectors
CREATE INDEX ON small_world_cos USING hnsw (v dist_cos_ops) WITH (dims=2);
INFO:  done init usearch index
INFO:  inserted 0 elements
INFO:  done saving 0 vectors
CREATE INDEX ON small_world_ham USING hnsw (v dist_hamming_ops) WITH (dims=2);
INFO:  done init usearch index
INFO:  inserted 0 elements
INFO:  done saving 0 vectors
INSERT INTO small_world_l2 SELECT id, v FROM small_world;
INSERT INTO small_world_cos SELECT id, v FROM small_world;
INSERT INTO small_world_ham SELECT id, v FROM small_world;
SET enable_seqscan = false;
-- Verify that the distance functions work (check distances)
SELECT ROUND(l2sq_dist(v, array[0,0])::numeric, 2) FROM small_world_l2 ORDER BY v <-> array[0,0];
INFO:  began scanning with 0 keys and 1 orderbys
INFO:  starting scan with dimensions=2 M=16 efConstruction=128 ef=64
INFO:  usearch index initialized
 round 
-------
  2.00
  8.00
 18.00
 32.00
 82.00
(5 rows)

SELECT ROUND(cos_dist(v, array[0,0])::numeric, 2) FROM small_world_cos ORDER BY v <-> array[0,0];
INFO:  began scanning with 0 keys and 1 orderbys
INFO:  starting scan with dimensions=2 M=16 efConstruction=128 ef=64
INFO:  usearch index initialized
 round 
-------
  1.00
  1.00
  1.00
  1.00
  1.00
(5 rows)

SELECT ROUND(hamming_dist(v, array[0,0])::numeric, 2) FROM small_world_ham ORDER BY v <-> array[0,0];
INFO:  began scanning with 0 keys and 1 orderbys
INFO:  starting scan with dimensions=2 M=16 efConstruction=128 ef=64
INFO:  usearch index initialized
 round 
-------
  2.00
  2.00
  4.00
  3.00
  2.00
(5 rows)

-- Verify that the distance functions work (check IDs)
SELECT ARRAY_AGG(id ORDER BY id), ROUND(l2sq_dist(v, array[0,0])::numeric, 2) FROM small_world_l2 GROUP BY 2;
 array_agg | round 
-----------+-------
 {1}       |  2.00
 {3}       |  8.00
 {2}       | 18.00
 {4}       | 32.00
 {5}       | 82.00
(5 rows)

SELECT ARRAY_AGG(id ORDER BY id), ROUND(cos_dist(v, array[0,0])::numeric, 2) FROM small_world_cos GROUP BY 2;
  array_agg  | round 
-------------+-------
 {1,2,3,4,5} |  1.00
(1 row)

SELECT ARRAY_AGG(id ORDER BY id), ROUND(hamming_dist(v, array[0,0])::numeric, 2) FROM small_world_ham GROUP BY 2;
 array_agg | round 
-----------+-------
 {1,3,4}   |  2.00
 {5}       |  3.00
 {2}       |  4.00
(3 rows)

-- Verify that the indexes is being used
EXPLAIN SELECT id FROM small_world_l2 ORDER BY v <-> array[0,0];
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Index Scan using small_world_l2_v_idx on small_world_l2  (cost=0.00..73.40 rows=1070 width=20)
   Order By: (v <-> '{0,0}'::real[])
(2 rows)

EXPLAIN SELECT id FROM small_world_cos ORDER BY v <-> array[0,0];
                                            QUERY PLAN                                            
--------------------------------------------------------------------------------------------------
 Index Scan using small_world_cos_v_idx on small_world_cos  (cost=0.00..73.40 rows=1070 width=20)
   Order By: (v <-> '{0,0}'::real[])
(2 rows)

EXPLAIN SELECT id FROM small_world_ham ORDER BY v <-> array[0,0];
                                            QUERY PLAN                                            
--------------------------------------------------------------------------------------------------
 Index Scan using small_world_ham_v_idx on small_world_ham  (cost=0.00..73.40 rows=1070 width=20)
   Order By: (v <-> '{0,0}'::integer[])
(2 rows)

-- Test cases expecting errors due to improper use of the <-> operator outside of its supported context
\set ON_ERROR_STOP off
SELECT array[1,2,3] <-> array[3,2,1];
ERROR:  Operator <-> has no standalone meaning and is reserved for use in vector index lookups only
SELECT ROUND((v <-> array[0,1,0])::numeric, 2) FROM small_world_cos ORDER BY v <-> array[0,0] LIMIT 7;
ERROR:  Operator <-> has no standalone meaning and is reserved for use in vector index lookups only
SELECT ROUND((v <-> array[0,1,0])::numeric, 2) FROM small_world_ham ORDER BY v <-> array[0,0] LIMIT 7;
ERROR:  Operator <-> has no standalone meaning and is reserved for use in vector index lookups only
