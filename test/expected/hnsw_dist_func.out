---------------------------------------------------------------------
-- Test the distance functions used by the HNSW index
---------------------------------------------------------------------
\ir utils/small_world_array.sql
CREATE TABLE small_world (
    id VARCHAR(3),
    b BOOLEAN,
    v REAL[3]
);
INSERT INTO small_world (id, b, v) VALUES
    ('000', TRUE,  '{0,0,0}'),
    ('001', TRUE,  '{0,0,1}'),
    ('010', FALSE, '{0,1,0}'),
    ('011', TRUE,  '{0,1,1}'),
    ('100', FALSE, '{1,0,0}'),
    ('101', FALSE, '{1,0,1}'),
    ('110', FALSE, '{1,1,0}'),
    ('111', TRUE,  '{1,1,1}');
CREATE TABLE small_world_l2 (id VARCHAR(3), v REAL[]);
CREATE TABLE small_world_cos (id VARCHAR(3), v REAL[]);
CREATE TABLE small_world_ham (id VARCHAR(3), v INTEGER[]);
CREATE INDEX ON small_world_l2 USING hnsw (v dist_l2sq_ops) WITH (dims=3);
INFO:  done init usearch index
INFO:  inserted 0 elements
INFO:  done saving 0 vectors
CREATE INDEX ON small_world_cos USING hnsw (v dist_cos_ops) WITH (dims=3);
INFO:  done init usearch index
INFO:  inserted 0 elements
INFO:  done saving 0 vectors
CREATE INDEX ON small_world_ham USING hnsw (v dist_hamming_ops) WITH (dims=3);
INFO:  done init usearch index
INFO:  inserted 0 elements
INFO:  done saving 0 vectors
INSERT INTO small_world_l2 SELECT id, v FROM small_world;
INSERT INTO small_world_cos SELECT id, v FROM small_world;
INSERT INTO small_world_ham SELECT id, v FROM small_world;
SET enable_seqscan = false;
-- Verify that the distance functions work (check distances)
SELECT ROUND(l2sq_dist(v, '{0,1,0}')::numeric, 2) FROM small_world_l2 ORDER BY v <-> '{0,1,0}';
INFO:  began scanning with 0 keys and 1 orderbys
INFO:  starting scan with dimensions=3 M=16 efConstruction=128 ef=64
INFO:  usearch index initialized
 round 
-------
  0.00
  1.00
  1.00
  1.00
  2.00
  2.00
  2.00
  3.00
(8 rows)

SELECT ROUND(cos_dist(v, '{0,1,0}')::numeric, 2) FROM small_world_cos ORDER BY v <-> '{0,1,0}';
INFO:  began scanning with 0 keys and 1 orderbys
INFO:  starting scan with dimensions=3 M=16 efConstruction=128 ef=64
INFO:  usearch index initialized
 round 
-------
  0.00
  0.29
  0.29
  0.42
  1.00
  1.00
  1.00
  1.00
(8 rows)

SELECT ROUND(hamming_dist(v, '{0,1,0}')::numeric, 2) FROM small_world_ham ORDER BY v <-> '{0,1,0}';
INFO:  began scanning with 0 keys and 1 orderbys
INFO:  starting scan with dimensions=3 M=16 efConstruction=128 ef=64
INFO:  usearch index initialized
 round 
-------
  0.00
  1.00
  1.00
  1.00
  2.00
  2.00
  2.00
  3.00
(8 rows)

-- Verify that the distance functions work (check IDs)
SELECT ARRAY_AGG(id ORDER BY id), ROUND(l2sq_dist(v, '{0,1,0}')::numeric, 2) FROM small_world_l2 GROUP BY 2 ORDER BY 2;
   array_agg   | round 
---------------+-------
 {010}         |  0.00
 {000,011,110} |  1.00
 {001,100,111} |  2.00
 {101}         |  3.00
(4 rows)

SELECT ARRAY_AGG(id ORDER BY id), ROUND(cos_dist(v, '{0,1,0}')::numeric, 2) FROM small_world_cos GROUP BY 2 ORDER BY 2;
     array_agg     | round 
-------------------+-------
 {010}             |  0.00
 {011,110}         |  0.29
 {111}             |  0.42
 {000,001,100,101} |  1.00
(4 rows)

SELECT ARRAY_AGG(id ORDER BY id), ROUND(hamming_dist(v, '{0,1,0}')::numeric, 2) FROM small_world_ham GROUP BY 2 ORDER BY 2;
   array_agg   | round 
---------------+-------
 {010}         |  0.00
 {000,011,110} |  1.00
 {001,100,111} |  2.00
 {101}         |  3.00
(4 rows)

-- Verify that the indexes is being used
EXPLAIN SELECT id FROM small_world_l2 ORDER BY v <-> '{0,1,0}';
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Index Scan using small_world_l2_v_idx on small_world_l2  (cost=0.00..73.40 rows=1070 width=20)
   Order By: (v <-> '{0,1,0}'::real[])
(2 rows)

EXPLAIN SELECT id FROM small_world_cos ORDER BY v <-> '{0,1,0}';
                                            QUERY PLAN                                            
--------------------------------------------------------------------------------------------------
 Index Scan using small_world_cos_v_idx on small_world_cos  (cost=0.00..73.40 rows=1070 width=20)
   Order By: (v <-> '{0,1,0}'::real[])
(2 rows)

EXPLAIN SELECT id FROM small_world_ham ORDER BY v <-> '{0,1,0}';
                                            QUERY PLAN                                            
--------------------------------------------------------------------------------------------------
 Index Scan using small_world_ham_v_idx on small_world_ham  (cost=0.00..73.40 rows=1070 width=20)
   Order By: (v <-> '{0,1,0}'::integer[])
(2 rows)

\set ON_ERROR_STOP off
-- Expect errors due to mismatching vector dimensions
SELECT 1 FROM small_world_l2 ORDER BY v <-> '{0,1,0,1}' LIMIT 1;
INFO:  began scanning with 0 keys and 1 orderbys
INFO:  starting scan with dimensions=3 M=16 efConstruction=128 ef=64
INFO:  usearch index initialized
ERROR:  Expected real array with dimension 3, got 4
SELECT 1 FROM small_world_cos ORDER BY v <-> '{0,1,0,1}' LIMIT 1;
INFO:  began scanning with 0 keys and 1 orderbys
INFO:  starting scan with dimensions=3 M=16 efConstruction=128 ef=64
INFO:  usearch index initialized
ERROR:  Expected real array with dimension 3, got 4
SELECT 1 FROM small_world_ham ORDER BY v <-> '{0,1,0,1}' LIMIT 1;
INFO:  began scanning with 0 keys and 1 orderbys
INFO:  starting scan with dimensions=3 M=16 efConstruction=128 ef=64
INFO:  usearch index initialized
ERROR:  Expected int array with dimension 3, got 4
SELECT l2sq_dist('{1,1}', '{0,1,0}');
ERROR:  expected equally sized arrays but got arrays with dimensions 2 and 3
SELECT cos_dist('{1,1}', '{0,1,0}');
ERROR:  expected equally sized arrays but got arrays with dimensions 2 and 3
SELECT hamming_dist('{1,1}', '{0,1,0}');
ERROR:  expected equally sized arrays but got arrays with dimensions 2 and 3
-- Expect errors due to improper use of the <-> operator outside of its supported context
SELECT ARRAY[1,2,3] <-> ARRAY[3,2,1];
ERROR:  Operator <-> has no standalone meaning and is reserved for use in vector index lookups only
SELECT ROUND((v <-> ARRAY[0,1,0])::numeric, 2) FROM small_world_cos ORDER BY v <-> '{0,1,0}' LIMIT 7;
ERROR:  Operator <-> has no standalone meaning and is reserved for use in vector index lookups only
SELECT ROUND((v <-> ARRAY[0,1,0])::numeric, 2) FROM small_world_ham ORDER BY v <-> '{0,1,0}' LIMIT 7;
ERROR:  Operator <-> has no standalone meaning and is reserved for use in vector index lookups only
-- More robust distance operator tests
CREATE TABLE test1 (id SERIAL, v REAL[]);
CREATE TABLE test2 (id SERIAL, v REAL[]);
INSERT INTO test1 (v) VALUES ('{5,3}');
INSERT INTO test2 (v) VALUES ('{5,4}');
-- Expect success
SELECT COALESCE(id, 0) FROM test1 ORDER BY v <-> '{1,2}';
 coalesce 
----------
        1
(1 row)

SELECT 0 + 1;
 ?column? 
----------
        1
(1 row)

SELECT 1 FROM test1 WHERE id = 0 + 1;
 ?column? 
----------
        1
(1 row)

-- Expect errors
INSERT INTO test1 (v) VALUES (ARRAY['{1,2}'::REAL[] <-> '{4,2}'::REAL[], 0]);
ERROR:  Operator <-> has no standalone meaning and is reserved for use in vector index lookups only
SELECT v <-> '{1,2}' FROM test1 ORDER BY v <-> '{1,3}';
ERROR:  Operator <-> has no standalone meaning and is reserved for use in vector index lookups only
SELECT v <-> '{1,2}' FROM test1;
ERROR:  Operator <-> has no standalone meaning and is reserved for use in vector index lookups only
WITH temp AS (SELECT v <-> '{1,2}' FROM test1) SELECT 1 FROM temp;
ERROR:  Operator <-> has no standalone meaning and is reserved for use in vector index lookups only
SELECT t.res FROM (SELECT v <-> '{1,2}' AS res FROM test1) t;
ERROR:  Operator <-> has no standalone meaning and is reserved for use in vector index lookups only
SELECT (SELECT v <-> '{1,2}' FROM test1 LIMIT 1) FROM test1;
ERROR:  Operator <-> has no standalone meaning and is reserved for use in vector index lookups only
SELECT COALESCE(v <-> '{1,2}', 0) FROM test1;
ERROR:  Operator <-> has no standalone meaning and is reserved for use in vector index lookups only
SELECT EXISTS (SELECT v <-> '{1,2}' FROM test1);
ERROR:  Operator <-> has no standalone meaning and is reserved for use in vector index lookups only
SELECT test1.v <-> test2.v FROM test1 JOIN test2 USING (id);
ERROR:  Operator <-> has no standalone meaning and is reserved for use in vector index lookups only
SELECT v <-> '{1,2}' FROM test1 UNION SELECT v <-> '{1,3}' FROM test1;
ERROR:  Operator <-> has no standalone meaning and is reserved for use in vector index lookups only
(SELECT v <-> '{1,2}' FROM test1 WHERE id < 5) UNION (SELECT v <-> '{1,3}' FROM test1 WHERE id >= 5);
ERROR:  Operator <-> has no standalone meaning and is reserved for use in vector index lookups only
SELECT MAX(v <-> '{1,2}') FROM test1;
ERROR:  Operator <-> has no standalone meaning and is reserved for use in vector index lookups only
SELECT * FROM test1 JOIN test2 ON test1.v <-> test2.v < 0.5;
ERROR:  Operator <-> has no standalone meaning and is reserved for use in vector index lookups only
SELECT test1.v FROM test1 JOIN test2 ON test1.v <-> '{1,2}' = test2.v <-> '{1,3}';
ERROR:  Operator <-> has no standalone meaning and is reserved for use in vector index lookups only
SELECT (v <-> '{1,2}') + (v <-> '{1,3}') FROM test1;
ERROR:  Operator <-> has no standalone meaning and is reserved for use in vector index lookups only
SELECT CASE WHEN v <-> '{1,2}' > 1 THEN 'High' ELSE 'Low' END FROM test1;
ERROR:  Operator <-> has no standalone meaning and is reserved for use in vector index lookups only
INSERT INTO test1 (v) VALUES ('{2,3}') RETURNING v <-> '{1,2}';
ERROR:  Operator <-> has no standalone meaning and is reserved for use in vector index lookups only
