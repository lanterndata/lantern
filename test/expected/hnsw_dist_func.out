CREATE TABLE small_world_l2 (
    id varchar(3),
    vector real[]
);
CREATE TABLE small_world_cos (
    id varchar(3),
    vector real[]
);
CREATE TABLE small_world_ham (
    id varchar(3),
    vector real[]
);
CREATE TABLE small_world_l2_vec (
    id varchar(3),
    vector vector(3)
);
CREATE INDEX ON small_world_l2_vec USING hnsw (vector);
INFO:  done init usearch index
INFO:  inserted 0 elements
INFO:  done saving 0 vectors
CREATE INDEX ON small_world_l2 USING hnsw (vector ann_l2_ops);
INFO:  done init usearch index
INFO:  inserted 0 elements
INFO:  done saving 0 vectors
CREATE INDEX ON small_world_cos USING hnsw (vector ann_cos_ops);
INFO:  done init usearch index
INFO:  inserted 0 elements
INFO:  done saving 0 vectors
CREATE INDEX ON small_world_ham USING hnsw (vector ann_ham_ops);
INFO:  done init usearch index
INFO:  inserted 0 elements
INFO:  done saving 0 vectors
INSERT INTO small_world_l2_vec (id, vector) VALUES 
('000', '[0,0,0]'),
('001', '[0,0,1]'),
('010', '[0,1,0]'),
('011', '[0,1,1]'),
('100', '[1,0,0]'),
('101', '[1,0,1]'),
('110', '[1,1,0]'),
('111', '[1,1,1]');
INSERT INTO small_world_l2 (id, vector) VALUES 
('000', '{0,0,0}'),
('001', '{0,0,1}'),
('010', '{0,1,0}'),
('011', '{0,1,1}'),
('100', '{1,0,0}'),
('101', '{1,0,1}'),
('110', '{1,1,0}'),
('111', '{1,1,1}');
INSERT INTO small_world_cos (id, vector) VALUES 
('000', '{0,0,0}'),
('001', '{0,0,1}'),
('010', '{0,1,0}'),
('011', '{0,1,1}'),
('100', '{1,0,0}'),
('101', '{1,0,1}'),
('110', '{1,1,0}'),
('111', '{1,1,1}');
INSERT INTO small_world_ham (id, vector) VALUES 
('000', '{0,0,0}'),
('001', '{0,0,1}'),
('010', '{0,1,0}'),
('011', '{0,1,1}'),
('100', '{1,0,0}'),
('101', '{1,0,1}'),
('110', '{1,1,0}'),
('111', '{1,1,1}');
SET enable_seqscan = false;
-- l2
SELECT * FROM (
    SELECT id, ROUND(l2sq_dist(vector, array[0,1,0])::numeric, 2) as dist
    FROM small_world_l2
    ORDER BY vector <-> array[0,1,0] LIMIT 7
) v ORDER BY v.dist, v.id;
INFO:  began scanning with 0 keys and 1 orderbys
INFO:  starting scan with dimensions=3 M=16 efConstruction=128 ef=64
INFO:  usearch index initialized
 id  | dist 
-----+------
 010 | 0.00
 011 | 1.00
 110 | 1.00
 001 | 2.00
 100 | 2.00
 111 | 2.00
 101 | 3.00
(7 rows)

-- this should use index
EXPLAIN SELECT * FROM (
    SELECT id, ROUND(l2sq_dist(vector, array[0,1,0])::numeric, 2) as dist
    FROM small_world_l2
    ORDER BY vector <-> array[0,1,0] LIMIT 7
) v ORDER BY v.dist, v.id;
                                                      QUERY PLAN                                                       
-----------------------------------------------------------------------------------------------------------------------
 Sort  (cost=0.70..0.72 rows=7 width=48)
   Sort Key: v.dist, v.id
   ->  Subquery Scan on v  (cost=0.00..0.60 rows=7 width=48)
         ->  Limit  (cost=0.00..0.53 rows=7 width=52)
               ->  Index Scan using small_world_l2_vector_idx on small_world_l2  (cost=0.00..81.42 rows=1070 width=52)
                     Order By: (vector <-> '{0,1,0}'::real[])
(6 rows)

-- l2 vector
SELECT * FROM (
    SELECT id, ROUND(l2sq_dist(vector, '[0,1,0]'::vector)::numeric, 2) as dist
    FROM small_world_l2_vec
    ORDER BY vector <-> '[0,1,0]'::vector LIMIT 7
) v ORDER BY v.dist, v.id;
INFO:  began scanning with 0 keys and 1 orderbys
INFO:  starting scan with dimensions=3 M=16 efConstruction=128 ef=64
INFO:  usearch index initialized
 id  | dist 
-----+------
 010 | 0.00
 000 | 1.00
 011 | 1.00
 110 | 1.00
 001 | 2.00
 100 | 2.00
 111 | 2.00
(7 rows)

-- this should use index
EXPLAIN SELECT * FROM (
    SELECT id, ROUND(l2sq_dist(vector, '[0,1,0]'::vector)::numeric, 2) as dist
    FROM small_world_l2_vec
    ORDER BY vector <-> '[0,1,0]'::vector LIMIT 7
) v ORDER BY v.dist, v.id;
                                                          QUERY PLAN                                                           
-------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=0.72..0.74 rows=7 width=48)
   Sort Key: v.dist, v.id
   ->  Subquery Scan on v  (cost=0.00..0.62 rows=7 width=48)
         ->  Limit  (cost=0.00..0.55 rows=7 width=56)
               ->  Index Scan using small_world_l2_vec_vector_idx on small_world_l2_vec  (cost=0.00..84.10 rows=1070 width=56)
                     Order By: (vector <-> '[0,1,0]'::vector)
(6 rows)

-- cos
SELECT * FROM (
    SELECT id, ROUND(cos_dist(vector, array[0,1,0])::numeric, 2) as dist
    FROM small_world_cos
    ORDER BY vector <-> array[0,1,0] LIMIT 7
) v ORDER BY v.dist, v.id;
INFO:  began scanning with 0 keys and 1 orderbys
INFO:  starting scan with dimensions=3 M=16 efConstruction=128 ef=64
INFO:  usearch index initialized
 id  | dist 
-----+------
 010 | 0.00
 011 | 0.29
 110 | 0.29
 111 | 0.42
 001 | 1.00
 100 | 1.00
 101 | 1.00
(7 rows)

-- this should use index
EXPLAIN SELECT * FROM (
    SELECT id, ROUND(cos_dist(vector, array[0,1,0])::numeric, 2) as dist
    FROM small_world_cos
    ORDER BY vector <-> array[0,1,0] LIMIT 7
) v ORDER BY v.dist, v.id;
                                                       QUERY PLAN                                                        
-------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=0.70..0.72 rows=7 width=48)
   Sort Key: v.dist, v.id
   ->  Subquery Scan on v  (cost=0.00..0.60 rows=7 width=48)
         ->  Limit  (cost=0.00..0.53 rows=7 width=52)
               ->  Index Scan using small_world_cos_vector_idx on small_world_cos  (cost=0.00..81.42 rows=1070 width=52)
                     Order By: (vector <-> '{0,1,0}'::real[])
(6 rows)

-- ham
SELECT * FROM (
    SELECT id, ROUND(hamming_dist(vector, array[0,1,0])::numeric, 2) as dist
    FROM small_world_ham
    ORDER BY vector <-> array[0,1,0] LIMIT 7
) v ORDER BY v.dist, v.id;
INFO:  began scanning with 0 keys and 1 orderbys
INFO:  starting scan with dimensions=3 M=16 efConstruction=128 ef=64
INFO:  usearch index initialized
 id  | dist  
-----+-------
 010 |  0.00
 011 |  7.00
 110 |  7.00
 001 | 14.00
 100 | 14.00
 111 | 14.00
 101 | 21.00
(7 rows)

-- this should use index
EXPLAIN SELECT * FROM (
    SELECT id, ROUND(hamming_dist(vector, array[0,1,0])::numeric, 2) as dist
    FROM small_world_ham
    ORDER BY vector <-> array[0,1,0] LIMIT 7
) v ORDER BY v.dist, v.id;
                                                       QUERY PLAN                                                        
-------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=0.70..0.72 rows=7 width=48)
   Sort Key: v.dist, v.id
   ->  Subquery Scan on v  (cost=0.00..0.60 rows=7 width=48)
         ->  Limit  (cost=0.00..0.53 rows=7 width=52)
               ->  Index Scan using small_world_ham_vector_idx on small_world_ham  (cost=0.00..81.42 rows=1070 width=52)
                     Order By: (vector <-> '{0,1,0}'::real[])
(6 rows)

\set ON_ERROR_STOP off
-- this should throw error about standalone usage of the operator
SELECT array[1,2,3] <-> array[3,2,1];
ERROR:  Operator <-> has no standalone meaning and is reserved for use in vector index lookups only
\set ON_ERROR_STOP on
-- the dis column in select should be null(empty), as the function 
-- is being called during index scan, so we can not throw error there
SELECT * FROM (
    SELECT id, ROUND((vector <-> array[0,1,0])::numeric, 2) as dist
    FROM small_world_ham
    ORDER BY vector <-> array[0,1,0] LIMIT 7
) v ORDER BY v.dist, v.id;
INFO:  began scanning with 0 keys and 1 orderbys
INFO:  starting scan with dimensions=3 M=16 efConstruction=128 ef=64
INFO:  usearch index initialized
 id  | dist 
-----+------
 001 |     
 010 |     
 011 |     
 100 |     
 101 |     
 110 |     
 111 |     
(7 rows)

