---------------------------------------------------------------------
-- Test HNSW index selects
---------------------------------------------------------------------
SET client_min_messages=debug5;
\ir utils/small_world_array.sql
CREATE TABLE small_world (
    id VARCHAR(3),
    b BOOLEAN,
    v REAL[3]
);
INSERT INTO small_world (id, b, v) VALUES
    ('000', TRUE,  '{0,0,0}'),
    ('001', TRUE,  '{0,0,1}'),
    ('010', FALSE, '{0,1,0}'),
    ('011', TRUE,  '{0,1,1}'),
    ('100', FALSE, '{1,0,0}'),
    ('101', FALSE, '{1,0,1}'),
    ('110', FALSE, '{1,1,0}'),
    ('111', TRUE,  '{1,1,1}');
CREATE INDEX ON small_world USING hnsw (v) WITH (dims=3, M=5, ef=20, ef_construction=20);
INFO:  done init usearch index
INFO:  inserted 8 elements
INFO:  done saving 8 vectors
\ir utils/sift1k_array.sql
CREATE TABLE IF NOT EXISTS sift_base1k (
    id SERIAL,
    v REAL[]
);
COPY sift_base1k (v) FROM '/tmp/lanterndb/vector_datasets/sift_base1k_arrays.csv' WITH csv;
CREATE INDEX ON sift_base1k USING hnsw (v) WITH (dims=128, M=5, ef=20, ef_construction=20);
INFO:  done init usearch index
INFO:  inserted 1000 elements
INFO:  done saving 1000 vectors
CREATE TABLE test1 (id SERIAL, v REAL[]);
CREATE TABLE test2 (id SERIAL, v REAL[]);
INSERT INTO test1 (v) VALUES ('{5,3}');
INSERT INTO test2 (v) VALUES ('{5,4}');
CREATE INDEX ON test1 USING hnsw (v);
INFO:  done init usearch index
INFO:  inserted 1 elements
INFO:  done saving 1 vectors
SET enable_seqscan = false;
-- Verify that basic queries still work
SELECT 0 + 1;
 ?column? 
----------
        1
(1 row)

SELECT 1 FROM test1 WHERE id = 0 + 1;
 ?column? 
----------
        1
(1 row)

-- Verify that the index is being used
EXPLAIN (COSTS FALSE) SELECT * FROM small_world order by v <-> '{1,0,0}' LIMIT 1;
DEBUG:  LANTERN - Query cost estimator
DEBUG:  LANTERN - ---------------------
DEBUG:  LANTERN - Total cost: 4.015000
DEBUG:  LANTERN - Selectivity: 1.000000
DEBUG:  LANTERN - Num pages: 1.000000
DEBUG:  LANTERN - Num tuples: 2.000000
DEBUG:  LANTERN - ---------------------
                       QUERY PLAN                        
---------------------------------------------------------
 Limit
   ->  Index Scan using small_world_v_idx on small_world
         Order By: (v <-> '{1,0,0}'::real[])
(3 rows)

-- Verify that this does not use the index
EXPLAIN (COSTS FALSE) SELECT 1 FROM small_world WHERE v = '{0,0,0}';
            QUERY PLAN             
-----------------------------------
 Seq Scan on small_world
   Filter: (v = '{0,0,0}'::real[])
(2 rows)

-- Ensure we can query an index for more elements than the value of init_k
WITH neighbors AS (
    SELECT * FROM small_world order by v <-> '{1,0,0}' LIMIT 3
) SELECT COUNT(*) from neighbors;
DEBUG:  LANTERN - Query cost estimator
DEBUG:  LANTERN - ---------------------
DEBUG:  LANTERN - Total cost: 4.015000
DEBUG:  LANTERN - Selectivity: 1.000000
DEBUG:  LANTERN - Num pages: 1.000000
DEBUG:  LANTERN - Num tuples: 2.000000
DEBUG:  LANTERN - ---------------------
INFO:  began scanning with 0 keys and 1 orderbys
INFO:  starting scan with dimensions=3 M=5 efConstruction=20 ef=20
INFO:  usearch index initialized
DEBUG:  LANTERN querying index for 10 elements
 count 
-------
     3
(1 row)

WITH neighbors AS (
    SELECT * FROM small_world order by v <-> '{1,0,0}' LIMIT 15
) SELECT COUNT(*) from neighbors;
DEBUG:  LANTERN - Query cost estimator
DEBUG:  LANTERN - ---------------------
DEBUG:  LANTERN - Total cost: 4.015000
DEBUG:  LANTERN - Selectivity: 1.000000
DEBUG:  LANTERN - Num pages: 1.000000
DEBUG:  LANTERN - Num tuples: 2.000000
DEBUG:  LANTERN - ---------------------
INFO:  began scanning with 0 keys and 1 orderbys
INFO:  starting scan with dimensions=3 M=5 efConstruction=20 ef=20
INFO:  usearch index initialized
DEBUG:  LANTERN querying index for 10 elements
 count 
-------
     8
(1 row)

-- Change default k and make sure the number of usearch_searchs makes sense
SET hnsw.init_k = 4;
WITH neighbors AS (
    SELECT * FROM small_world order by v <-> '{1,0,0}' LIMIT 3
) SELECT COUNT(*) from neighbors;
DEBUG:  LANTERN - Query cost estimator
DEBUG:  LANTERN - ---------------------
DEBUG:  LANTERN - Total cost: 4.015000
DEBUG:  LANTERN - Selectivity: 1.000000
DEBUG:  LANTERN - Num pages: 1.000000
DEBUG:  LANTERN - Num tuples: 2.000000
DEBUG:  LANTERN - ---------------------
INFO:  began scanning with 0 keys and 1 orderbys
INFO:  starting scan with dimensions=3 M=5 efConstruction=20 ef=20
INFO:  usearch index initialized
DEBUG:  LANTERN querying index for 4 elements
 count 
-------
     3
(1 row)

WITH neighbors AS (
    SELECT * FROM small_world order by v <-> '{1,0,0}' LIMIT 15
) SELECT COUNT(*) from neighbors;
DEBUG:  LANTERN - Query cost estimator
DEBUG:  LANTERN - ---------------------
DEBUG:  LANTERN - Total cost: 4.015000
DEBUG:  LANTERN - Selectivity: 1.000000
DEBUG:  LANTERN - Num pages: 1.000000
DEBUG:  LANTERN - Num tuples: 2.000000
DEBUG:  LANTERN - ---------------------
INFO:  began scanning with 0 keys and 1 orderbys
INFO:  starting scan with dimensions=3 M=5 efConstruction=20 ef=20
INFO:  usearch index initialized
DEBUG:  LANTERN querying index for 4 elements
DEBUG:  LANTERN - querying index for 8 elements
 count 
-------
     8
(1 row)

RESET client_min_messages;
-- Verify where condition works properly and still uses index
SELECT * FROM small_world WHERE b IS TRUE ORDER BY v <-> '{0,0,0}';
INFO:  began scanning with 0 keys and 1 orderbys
INFO:  starting scan with dimensions=3 M=5 efConstruction=20 ef=20
INFO:  usearch index initialized
 id  | b |    v    
-----+---+---------
 000 | t | {0,0,0}
 001 | t | {0,0,1}
 011 | t | {0,1,1}
 111 | t | {1,1,1}
(4 rows)

EXPLAIN (COSTS FALSE) SELECT * FROM small_world WHERE b IS TRUE ORDER BY v <-> '{0,0,0}';
                    QUERY PLAN                     
---------------------------------------------------
 Index Scan using small_world_v_idx on small_world
   Order By: (v <-> '{0,0,0}'::real[])
   Filter: (b IS TRUE)
(3 rows)

-- Verify that the index is not being used when there is no order by
EXPLAIN (COSTS FALSE) SELECT COUNT(*) FROM small_world;
          QUERY PLAN           
-------------------------------
 Aggregate
   ->  Seq Scan on small_world
(2 rows)

-- Verify swapping order doesn't change anything and still uses index
EXPLAIN (COSTS FALSE) SELECT id FROM test1 ORDER BY '{1,2}'::REAL[] <-> v;
              QUERY PLAN               
---------------------------------------
 Index Scan using test1_v_idx on test1
   Order By: (v <-> '{1,2}'::real[])
(2 rows)

-- Verify group by works and uses index
EXPLAIN (COSTS FALSE) WITH t AS (SELECT id FROM test1 ORDER BY '{1,2}'::REAL[] <-> v LIMIT 1) SELECT id, COUNT(*) FROM t GROUP BY 1;
                          QUERY PLAN                           
---------------------------------------------------------------
 GroupAggregate
   Group Key: t.id
   ->  Sort
         Sort Key: t.id
         ->  Subquery Scan on t
               ->  Limit
                     ->  Index Scan using test1_v_idx on test1
                           Order By: (v <-> '{1,2}'::real[])
(8 rows)

-- Validate distinct works and uses index (todo:: Can't use EXPLAIN due to small differences in Postgres 11 query plan)
WITH t AS (SELECT id FROM test1 ORDER BY '{1,2}'::REAL[] <-> v LIMIT 1) SELECT DISTINCT id FROM t;
INFO:  began scanning with 0 keys and 1 orderbys
INFO:  starting scan with dimensions=2 M=16 efConstruction=128 ef=64
INFO:  usearch index initialized
 id 
----
  1
(1 row)

-- Validate join lateral works and uses index
EXPLAIN (COSTS FALSE) SELECT t1_results.id FROM test2 t2 JOIN LATERAL (SELECT t1.id FROM test1 t1 ORDER BY t2.v <-> t1.v LIMIT 1) t1_results ON TRUE;
                      QUERY PLAN                      
------------------------------------------------------
 Nested Loop
   ->  Seq Scan on test2 t2
   ->  Limit
         ->  Index Scan using test1_v_idx on test1 t1
               Order By: (v <-> t2.v)
(5 rows)

-- todo:: Verify joins work and still use index
-- todo:: Verify incremental sorts work
