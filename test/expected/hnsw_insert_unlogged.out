---------------------------------------------------------------------
-- Test HNSW index inserts on empty table
---------------------------------------------------------------------
-- set an artificially low work_mem to make sure work_mem exceeded warnings are printed
set work_mem = '64kB';
-- We do not actually print the warnings generated for exceeding work_mem because the work_mem
-- check does not work for postgres 13 and lower.So, if we printed the warnings, we would get a regression
-- failure in older postgres versions. We still reduce workmem to exercise relevant codepaths for coverage
set client_min_messages = 'ERROR';
CREATE UNLOGGED TABLE small_world (
    id SERIAL PRIMARY KEY,
    v REAL[2] -- this demonstates that postgres actually does not enforce real[] length as we actually insert vectors of length 3
);
CREATE UNLOGGED TABLE small_world_int (
    id SERIAL PRIMARY KEY,
    v INTEGER[]
);
CREATE INDEX ON small_world USING lantern_hnsw (v) WITH (dim=3);
INFO:  done init usearch index
INFO:  inserted 0 elements
INFO:  done saving 0 vectors
SELECT _lantern_internal.validate_index('small_world_v_idx', false);
INFO:  validate_index() start for small_world_v_idx
INFO:  validate_index() done, no issues found.
 validate_index 
----------------
 
(1 row)

-- Insert rows with valid vector data
INSERT INTO small_world (v) VALUES ('{0,0,1}'), ('{0,1,0}');
INSERT INTO small_world (v) VALUES (NULL);
-- Attempt to insert a row with an incorrect vector length
\set ON_ERROR_STOP off
-- Cannot create an hnsw index with implicit typecasts (trying to cast integer[] to real[], in this case)
CREATE INDEX ON small_world_int USING lantern_hnsw (v dist_l2sq_ops) WITH (dim=3);
ERROR:  operator class "dist_l2sq_ops" does not accept data type integer[]
INSERT INTO small_world (v) VALUES ('{1,1,1,1}');
ERROR:  Wrong number of dimensions: 4 instead of 3 expected
\set ON_ERROR_STOP on
DROP TABLE small_world;
-- set work_mem to a value that is enough for the tests
set client_min_messages = 'WARNING';
set work_mem = '10MB';
---------------------------------------------------------------------
-- Test HNSW index inserts on non-empty table
---------------------------------------------------------------------
\ir utils/small_world_array_unlogged.sql
CREATE UNLOGGED TABLE small_world (
    id VARCHAR(3),
    b BOOLEAN,
    v REAL[3]
);
INSERT INTO small_world (id, b, v) VALUES
    ('000', TRUE,  '{0,0,0}'),
    ('001', TRUE,  '{0,0,1}'),
    ('010', FALSE, '{0,1,0}'),
    ('011', TRUE,  '{0,1,1}'),
    ('100', FALSE, '{1,0,0}'),
    ('101', FALSE, '{1,0,1}'),
    ('110', FALSE, '{1,1,0}'),
    ('111', TRUE,  '{1,1,1}');
CREATE INDEX ON small_world USING lantern_hnsw (v) WITH (dim=3);
INFO:  done init usearch index
INFO:  inserted 8 elements
INFO:  done saving 8 vectors
SET enable_seqscan = false;
SET lantern.pgvector_compat = false;
-- Inserting vectors of the same dimension and nulls should work
INSERT INTO small_world (v) VALUES ('{1,1,2}');
INSERT INTO small_world (v) VALUES (NULL);
-- Inserting vectors of different dimension should fail
\set ON_ERROR_STOP off
INSERT INTO small_world (v) VALUES ('{4,4,4,4}');
ERROR:  Wrong number of dimensions: 4 instead of 3 expected
\set ON_ERROR_STOP on
-- Verify that the index works with the inserted vectors
SELECT
    ROUND(l2sq_dist(v, '{0,0,0}')::numeric, 2)
FROM
    small_world
ORDER BY
    v <?> '{0,0,0}';
 round 
-------
  0.00
  1.00
  1.00
  1.00
  2.00
  2.00
  2.00
  3.00
  6.00
(9 rows)

-- Ensure the index size remains consistent after inserts
SELECT * from ldb_get_indexes('small_world');
     indexname     | size  |                                      indexdef                                       | indisvalid 
-------------------+-------+-------------------------------------------------------------------------------------+------------
 small_world_v_idx | 24 kB | CREATE INDEX small_world_v_idx ON small_world USING lantern_hnsw (v) WITH (dim='3') | t
(1 row)

-- Ensure the query plan remains consistent after inserts
EXPLAIN (COSTS FALSE)
SELECT
    ROUND(l2sq_dist(v, '{0,0,0}')::numeric, 2)
FROM
    small_world
ORDER BY
    v <?> '{0,0,0}'
LIMIT 10;
                       QUERY PLAN                        
---------------------------------------------------------
 Limit
   ->  Index Scan using small_world_v_idx on small_world
         Order By: (v <?> '{0,0,0}'::real[])
(3 rows)

SELECT _lantern_internal.validate_index('small_world_v_idx', false);
INFO:  validate_index() start for small_world_v_idx
INFO:  validate_index() done, no issues found.
 validate_index 
----------------
 
(1 row)

-- Test the index with a larger number of vectors
CREATE UNLOGGED TABLE sift_base10k (
    id SERIAL PRIMARY KEY,
    v REAL[128]
);
CREATE INDEX hnsw_idx ON sift_base10k USING lantern_hnsw (v dist_l2sq_ops) WITH (M=2, ef_construction=10, ef=4, dim=128);
INFO:  done init usearch index
INFO:  inserted 0 elements
INFO:  done saving 0 vectors
\COPY sift_base10k (v) FROM '/tmp/lantern/vector_datasets/siftsmall_base_arrays.csv' WITH CSV;
SELECT v AS v4444 FROM sift_base10k WHERE id = 4444 \gset
EXPLAIN (COSTS FALSE) SELECT * FROM sift_base10k order by v <?> :'v4444';
                                                                                                                                                                                       QUERY PLAN                                                                                                                                                                                        
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Index Scan using hnsw_idx on sift_base10k
   Order By: (v <?> '{55,61,11,4,5,2,13,24,65,49,13,9,23,37,94,38,54,11,14,14,40,31,50,44,53,4,0,0,27,17,8,34,12,10,4,4,22,52,68,53,9,2,0,0,2,116,119,64,119,2,0,0,2,30,119,119,116,5,0,8,47,9,5,60,7,7,10,23,56,50,23,5,28,68,6,18,24,65,50,9,119,75,3,0,1,8,12,85,119,11,4,6,8,9,5,74,25,11,8,20,18,12,2,21,11,90,25,32,33,15,2,9,84,67,8,4,22,31,11,33,119,30,3,6,0,0,0,26}'::real[])
(2 rows)

SELECT _lantern_internal.validate_index('hnsw_idx', false);
INFO:  validate_index() start for hnsw_idx
INFO:  validate_index() done, no issues found.
 validate_index 
----------------
 
(1 row)

