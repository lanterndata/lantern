use lantern_cli::embeddings::core::{
    cohere_runtime::CohereRuntimeParams, openai_runtime::OpenAiRuntimeParams, EmbeddingRuntime,
    LoggerFn, Runtime,
};
use pgrx::prelude::*;

use crate::{
    COHERE_TOKEN, OPENAI_AZURE_API_TOKEN, OPENAI_AZURE_ENTRA_TOKEN, OPENAI_DEPLOYMENT_URL,
    OPENAI_TOKEN,
};

pub static ORT_RUNTIME_PARAMS: &'static str = r#"{ "cache": true }"#;

fn notice_fn(text: &str) {
    notice!("{}", text);
}

fn get_dummy_runtime_params(runtime: &Runtime) -> String {
    match runtime {
        Runtime::Ort => ORT_RUNTIME_PARAMS.to_owned(),
        Runtime::OpenAi | Runtime::Cohere => r#"{ "api_token": "xxx" }"#.to_owned(),
    }
}

#[pg_extern(immutable, parallel_safe)]
fn text_embedding<'a>(model_name: &'a str, text: &'a str) -> Result<Vec<f32>, anyhow::Error> {
    let runtime = EmbeddingRuntime::new(
        &Runtime::Ort,
        Some(&(notice_fn as LoggerFn)),
        &ORT_RUNTIME_PARAMS,
    )?;
    let rt = tokio::runtime::Builder::new_current_thread()
        .enable_all()
        .build()?;
    let mut res = rt.block_on(runtime.process(model_name, &vec![text]))?;
    Ok(res.embeddings.pop().unwrap())
}

#[pg_extern(immutable, parallel_safe, create_or_replace)]
fn openai_embedding<'a>(
    model_name: &'a str,
    text: &'a str,
    base_url: default!(&'a str, "''"),
    dimensions: default!(i32, 1536),
) -> Result<Vec<f32>, anyhow::Error> {
    if OPENAI_TOKEN.get().is_none()
        && OPENAI_AZURE_API_TOKEN.get().is_none()
        && OPENAI_AZURE_ENTRA_TOKEN.get().is_none()
    {
        error!("'lantern_extras.openai_token', 'lantern_extras.openai_azure_api_token' or 'lantern_extras.openai_azure_entra_token' is required for 'openai' runtime");
    }

    let dimensions = if dimensions > 0 {
        Some(dimensions as usize)
    } else {
        None
    };

    let base_url = if base_url == "" {
        if let Some(deployment_url) = OPENAI_DEPLOYMENT_URL.get() {
            Some(deployment_url.to_str().unwrap().to_owned())
        } else {
            None
        }
    } else {
        Some(base_url.to_owned())
    };

    let api_token = if let Some(api_token) = OPENAI_TOKEN.get() {
        Some(api_token.to_str().unwrap().to_owned())
    } else {
        None
    };

    let azure_api_token = if let Some(api_token) = OPENAI_AZURE_API_TOKEN.get() {
        Some(api_token.to_str().unwrap().to_owned())
    } else {
        None
    };

    let azure_entra_token = if let Some(api_token) = OPENAI_AZURE_ENTRA_TOKEN.get() {
        Some(api_token.to_str().unwrap().to_owned())
    } else {
        None
    };

    let runtime_params = serde_json::to_string(&OpenAiRuntimeParams {
        dimensions,
        base_url,
        api_token,
        azure_api_token,
        azure_entra_token,
    })?;

    let runtime = EmbeddingRuntime::new(
        &Runtime::OpenAi,
        Some(&(notice_fn as LoggerFn)),
        &runtime_params,
    )?;

    let rt = tokio::runtime::Builder::new_current_thread()
        .enable_all()
        .build()?;
    let mut res = rt.block_on(runtime.process(model_name, &vec![text]))?;
    Ok(res.embeddings.pop().unwrap())
}

#[pg_extern(immutable, parallel_safe, create_or_replace)]
fn cohere_embedding<'a>(
    model_name: &'a str,
    text: &'a str,
    input_type: default!(&'a str, "'search_query'"),
) -> Result<Vec<f32>, anyhow::Error> {
    if COHERE_TOKEN.get().is_none() {
        error!("'lantern_extras.cohere_token' is required for 'cohere' runtime");
    }
    let runtime_params = serde_json::to_string(&CohereRuntimeParams {
        api_token: Some(COHERE_TOKEN.get().unwrap().to_str().unwrap().to_owned()),
        input_type: Some(input_type.to_owned()),
    })?;

    let runtime = EmbeddingRuntime::new(
        &Runtime::Cohere,
        Some(&(notice_fn as LoggerFn)),
        &runtime_params,
    )?;
    let rt = tokio::runtime::Builder::new_current_thread()
        .enable_all()
        .build()?;
    let mut res = rt.block_on(runtime.process(model_name, &vec![text]))?;
    Ok(res.embeddings.pop().unwrap())
}

#[pg_extern(immutable, parallel_safe)]
fn clip_text<'a>(text: &'a str) -> Result<Vec<f32>, anyhow::Error> {
    text_embedding("clip/ViT-B-32-textual", text)
}

#[pg_extern(immutable, parallel_safe)]
fn image_embedding<'a>(
    model_name: &'a str,
    path_or_url: &'a str,
) -> Result<Vec<f32>, anyhow::Error> {
    text_embedding(model_name, path_or_url)
}

#[pg_extern(immutable, parallel_safe)]
fn clip_image<'a>(path_or_url: &'a str) -> Result<Vec<f32>, anyhow::Error> {
    image_embedding("clip/ViT-B-32-visual", path_or_url)
}

#[pg_extern(immutable, parallel_safe, create_or_replace)]
fn get_available_models<'a>(runtime: default!(&'a str, "'ort'")) -> Result<String, anyhow::Error> {
    let runtime_name = Runtime::try_from(runtime)?;
    let runtime_params = get_dummy_runtime_params(&runtime_name);
    let runtime = EmbeddingRuntime::new(
        &runtime_name,
        Some(&(notice_fn as LoggerFn)),
        &runtime_params,
    )?;
    let rt = tokio::runtime::Builder::new_current_thread()
        .enable_all()
        .build()?;
    return Ok(rt.block_on(runtime.get_available_models()).0);
}

#[pg_extern(immutable, parallel_safe, create_or_replace)]
fn get_available_runtimes() -> Result<String, anyhow::Error> {
    let mut runtimes_str = lantern_cli::embeddings::core::get_available_runtimes().join("\n");
    runtimes_str.push_str("\n");
    return Ok(runtimes_str);
}

#[cfg(any(test, feature = "pg_test"))]
#[pg_schema]
pub mod tests {
    use std::env;

    use crate::*;

    static HELLO_WORLD_TEXT: &'static str = "Hello world!";
    #[rustfmt::skip]
    static HELLO_WORLD_CLIP_EMB: &'static [f32] = &[-0.020476775, 0.111073, -0.10530874, 0.19828044, -0.027562656, -0.23474982, 0.21065629, -1.4416628, 0.14605063, -0.160044, -0.37608588, -0.2119374, -0.15697962, 0.008458294, 0.2106666, -0.017877355, 0.33919975, 0.045852974, -0.100722946, -0.045923192, 0.10990898, -0.25829625, 0.30317736, 0.11488654, -0.46186274, -0.4626967, -0.042635046, 0.29741955, -0.037274115, 0.27366883, 0.20929608, -0.16471854, 0.055385463, -0.24945396, 0.046744138, 0.23008388, -0.187143, -0.029809874, 0.07640592, -0.16700715, -0.085975975, -0.25384986, -0.11262718, -0.13075642, 0.14013499, -0.08889471, 0.063620545, -0.03663072, 0.07881963, 0.229372, 0.29210842, -0.31412473, -0.0078749135, -0.28392997, 0.15476987, -0.02043429, -0.06290087, -0.018591419, -0.08700596, -0.19504404, 0.44238496, -0.109749734, 0.275388, -0.05582391, 0.13863862, -0.033968866, 0.19097951, -0.13578185, 0.14519869, 0.045676023, 0.25584215, -0.015645579, -0.26207292, 0.24827223, 0.03445548, -0.31498873, 0.2824291, 0.56327266, 0.013674453, -0.16007274, -0.21102041, -0.19478007, -0.14121902, -0.16792865, -0.40819037, 0.0438246, 0.22567344, -0.3297562, 0.11681607, 0.11226921, 0.003411904, 0.0825413, -1.9214885, -0.20295206, -0.01407405, -0.12056728, -0.10185087, 0.2004847, -0.10759242, -0.19343027, 0.23292445, 0.33320382, 0.22149219, -0.08638317, 0.23560561, -0.19066495, 0.17755258, -0.16993555, -0.029849865, -0.22932798, 0.08929604, 0.03428103, -0.107722655, -0.024028901, 0.1847432, 0.09379715, 0.068997346, 0.14411347, 0.07746827, 0.04011213, 0.0658475, 0.20222189, -0.030440576, 0.08776434, -0.13246597, 0.016684677, 0.047582008, 0.05198705, 0.0700707, 0.084653914, 0.06909941, 0.10376939, -0.081172146, 7.3704977, -0.14797403, 0.21361199, -0.08800018, -0.35132965, 0.021939317, -0.09089277, 0.037140936, -0.35118827, -0.04941287, -0.026789397, -0.23948334, 0.10874768, -0.26285917, 0.36523858, 0.50445855, 0.10481266, 0.4098543, -0.3129306, -0.59758216, -0.034414284, 0.027843453, -0.091017574, -0.32560846, 0.30377156, -0.23118782, 0.065180466, -0.36710367, 0.012223348, -0.16262382, 0.13480008, 0.13736263, 0.0075045526, 0.23728539, 0.2116946, 0.3838804, 0.14245796, 0.029927406, -0.1341641, -0.03992462, -0.11786532, -0.30819097, -0.12132531, -0.30330336, -0.12580931, -0.035588562, 0.16817878, -0.038514666, 0.18975018, 0.024216771, 0.026217014, -0.090409905, -0.07525094, 0.27214733, 0.044363648, 0.22049513, -0.16281407, 0.0631836, -0.053991392, 0.22901943, 0.060611814, 0.32349586, 0.012564644, -0.08271384, -0.078071356, -0.040050197, 0.30019575, -0.020119771, -0.24983557, -0.27131745, -0.054717228, 0.10751669, -0.22137052, -0.013891213, 0.1374619, 0.010636002, 0.14240754, 0.15695044, 0.13009356, 0.09398372, -0.025530757, -0.23091945, 0.025572032, 0.0031829178, -0.24976723, 0.21949057, -0.27335533, 0.10732825, -0.06507754, -0.13964619, -0.12820473, 0.0877506, -0.12037073, -0.09331375, 0.5416604, 0.09421308, 0.10336839, 0.13041648, 0.028918259, -0.20625801, 0.43129992, 0.1459057, -0.016492277, 0.04081285, 0.047613487, 0.009934774, 0.009535242, 0.24991985, 0.30162302, -0.035831526, -0.486154, -0.05103448, 0.6563518, 0.009447038, -0.46683514, -0.08313032, 0.03696554, 0.14653865, -0.18361577, -0.050656207, -0.22145961, -0.24882938, 0.16182947, 0.038483176, 0.021601643, 0.21019635, -0.08234185, 0.2780598, -0.2908701, 0.02953285, 0.12296721, -0.21878204, -0.128144, -0.060083054, -0.24550691, -0.0879209, 0.07546242, -0.07249651, 0.020485193, -0.03692793, 0.16765073, -0.09103814, 0.23033753, -0.21836475, 0.1664663, -0.21737409, 0.16596827, 0.31133112, -0.10023908, 0.3706924, -0.2464955, 0.24176213, 0.32084322, 0.16259453, -0.05540514, 0.05083946, -0.12935856, 0.03267494, 0.18455097, 0.011275742, 0.101560265, -0.03561543, 0.27086422, -0.09041187, -0.3287123, 0.040132664, -0.1831892, 0.0047493726, -0.033484608, 0.19651815, -0.31473777, 0.13112763, 0.3413608, -0.2455968, 0.045542836, -0.104461126, 0.005065279, 0.4251323, -0.23926145, 7.362257, -0.23300058, -0.007646084, 0.045260623, -0.04437712, -0.15608308, 0.10616787, 0.07287562, 0.020465162, 0.5783111, -0.09140764, 0.13351701, -0.10439435, -0.25910264, -0.24776801, -0.11816393, -0.0561099, -2.770246, -0.31068143, 0.14091884, 0.070470706, -0.058813483, -0.024911582, -0.15688656, 0.21985042, 0.36713743, 0.107128955, 0.13669589, 0.0051332787, 0.23876746, 0.40614, 0.060822293, -0.33256605, 0.08021091, -0.07582166, -0.23415035, -0.04432006, -0.07010134, -0.22593829, -0.065982476, 0.0427081, 0.028756332, -0.060415134, 0.4012118, 0.04000116, 0.38686636, 0.15789485, -0.3262711, 0.00475822, 0.1094888, 0.57392967, 0.34066314, -0.20665756, -0.057930544, 0.22794127, 0.15457465, -0.18280812, 0.09717287, -0.059893936, 0.6086165, -0.21629295, 0.23789874, -0.29008394, 0.20201065, -0.32359564, 0.10615185, -0.27292472, -0.07158633, -0.28011638, -0.34555736, 0.06371697, -0.08473098, 0.06386079, 0.056933045, -0.22559868, -0.14229044, -0.28497994, 0.12396638, -0.22131008, -0.5294925, -0.0767176, 0.11793665, 0.057084702, 0.0040413737, -0.06450936, 0.01728496, -0.3512309, 0.3330403, -0.06519018, 0.20660913, 0.05178895, 0.343586, 0.20610496, 0.15943015, -0.20400554, 0.030726567, 0.30282435, -0.010365292, 0.09665407, 0.14873841, 0.25734085, 0.21442415, 0.40125173, -0.08738096, -0.06913735, 0.2987156, 0.27425864, -0.00093972683, 0.04379954, 0.038295284, 0.06546015, -0.32040307, -0.20215109, 0.41629654, 0.047880255, -0.21194798, -0.036038153, 0.1522459, -0.19484445, 0.039462823, -0.21064907, -0.13694683, -0.2501285, 0.082520045, -0.19627452, -0.4384591, 0.23384215, 0.109192975, 0.15369438, -0.27861565, 0.11628551, -0.040622413, -0.04433043, -0.12166405, 0.13092265, -0.07827225, 0.11547213, -0.030894607, -0.18117768, 0.020442963, -0.17173964, 0.2974965, 0.32407364, 0.04766877, 0.10717582, 0.09193277, -0.16506508, 0.13757893, 0.096764445, -0.5020385, -0.016144186, 0.019135457, -0.29343155, -0.100692585, 0.37422845, 0.022318047, -0.15931854, 0.017905466, -0.13255252, 0.109108776, 0.0065737963, -0.074496314, 0.16018367, 0.16922836, 0.10337954, 0.14559221, 0.12458767, 0.22240283, -0.028031524, -0.80666745, -0.12128662, 0.01321203, -0.3255096, -0.06868529, -0.19293119, -0.025735162, -0.28654903, 0.020253882, -0.38534135, -0.038486935, 0.06613082, -0.06418133, -0.15839031, 0.06471726, -0.19283788, -0.34131792, 0.15264772, -0.23320137, -0.089332774, -0.041326385, 0.13021827, 0.102788255, -0.022895776, 0.09561402, 0.10994218, -0.032236956, -0.024895646, -0.2531594, -0.27954918, 0.23604941];

    fn cosine_similarity(v1: &[f32], v2: &[f32]) -> f32 {
        // Check if the vectors have the same length
        assert_eq!(v1.len(), v2.len(), "Vectors must have the same length");

        // Calculate the dot product of the two vectors
        let dot_product = v1.iter().zip(v2.iter()).map(|(&x, &y)| x * y).sum::<f32>();

        // Calculate the magnitudes of the vectors
        let magnitude_v1 = f32::sqrt(v1.iter().map(|&x| x * x).sum::<f32>());
        let magnitude_v2 = f32::sqrt(v2.iter().map(|&x| x * x).sum::<f32>());

        // Calculate the cosine similarity
        if magnitude_v1 == 0.0 || magnitude_v2 == 0.0 {
            // Handle the case where one of the vectors has zero magnitude
            0.0
        } else {
            dot_product / (magnitude_v1 * magnitude_v2)
        }
    }

    #[pg_test]
    fn test_clip_text() {
        let embedding =
            Spi::get_one::<Vec<f32>>(&format!("SELECT clip_text('{HELLO_WORLD_TEXT}');")).unwrap();
        let distance = 1.0 - cosine_similarity(&embedding.unwrap(), HELLO_WORLD_CLIP_EMB);
        assert!(distance < 0.01);
    }
    #[pg_test]
    fn test_cohere_embeddings() {
        static HELLO_WORLD_TEXT: &'static str = "Hello world!";
        #[rustfmt::skip]
        static HELLO_WORLD_COHERE_EMB: &'static [f32] = &[0.018371582, 0.089538574, -0.022323608, -0.055389404, 0.078125, -0.03616333, -0.0029697418, 0.10809326, 0.032073975, 0.0095825195, 0.044799805, 0.036132813, 0.021331787, -0.03781128, -0.050964355, 0.027496338, 0.07434082, 0.041015625, 0.017318726, -0.018829346, 0.08428955, 0.0151901245, -0.013618469, 0.021743774, -0.019592285, 0.07647705, -0.02798462, 0.043548584, 0.0088272095, 0.012168884, -0.0005698204, 0.051605225, 0.03050232, 0.002948761, 0.041809082, 0.12683105, 0.03591919, -0.026351929, 0.04107666, -0.026275635, -0.016784668, 0.09539795, -0.012336731, 0.042541504, 0.010314941, 0.140625, 0.02470398, 0.057800293, -0.11462402, 0.015060425, -0.09094238, -0.03439331, 0.023468018, 0.041809082, 0.009017944, -0.07946777, -0.009727478, -0.023590088, -0.05807495, 0.047210693, 0.00011360645, 0.107666016, 0.010116577, 0.07904053, -0.0028820038, -0.019104004, -0.008781433, -0.033569336, -0.058776855, 0.011833191, 0.026672363, 0.00076532364, -0.029907227, -0.05871582, 0.012619019, -0.015823364, -0.10089111, -0.05999756, 0.050048828, -0.07531738, -0.06298828, -0.11608887, 0.0040626526, 0.032226563, -0.027404785, 0.040222168, -0.018234253, -0.0053863525, 0.03010559, 0.02809143, 0.052001953, -0.08215332, -0.08868408, 0.014183044, -0.016708374, -0.042419434, -0.0357666, 0.07373047, 0.05581665, -0.046539307, 0.056610107, 0.0011730194, -0.029129028, 0.02078247, -0.09515381, -0.049346924, 0.10632324, -0.022949219, 0.07946777, -0.03869629, -0.0129470825, -0.012779236, -0.023223877, 0.036834717, -0.12609863, -0.09954834, -0.058746338, 0.097717285, -0.03451538, -0.068847656, 0.027633667, -0.011947632, -0.0041923523, 0.011878967, -0.062561035, -0.097473145, -0.044769287, -0.0075950623, -0.026031494, 0.05078125, 0.048950195, 0.012306213, 0.05239868, 0.037597656, 0.00038862228, -0.003955841, 0.034179688, 0.03189087, -0.007873535, 0.021606445, 0.017745972, 0.053771973, 0.03933716, 0.13964844, 0.0079574585, 0.036956787, 0.08868408, 0.0034179688, 0.039031982, -0.02708435, -0.014091492, 0.056884766, -0.0027503967, -0.010437012, -0.046936035, 0.017822266, 0.03289795, -0.014419556, 0.042907715, 0.08123779, -0.055664063, -0.0463562, -0.054504395, -0.012641907, -0.004333496, 0.009719849, 0.01927185, 0.0034008026, 0.026062012, -0.017303467, -0.01084137, 0.009231567, -0.111572266, -0.03765869, 0.008018494, -0.011566162, -0.048828125, 0.0031318665, 0.04537964, -0.00541687, 0.03387451, 0.021850586, -0.14123535, 0.061340332, -0.061523438, 0.0030117035, -0.02418518, 0.05038452, 0.04095459, -0.097717285, -0.07006836, -0.0362854, -0.0063209534, -0.04397583, -0.03375244, 0.024459839, -0.10107422, -0.0056495667, 0.025131226, 0.03564453, -0.0904541, -0.080566406, 0.015159607, 0.009628296, 0.0413208, 0.0446167, -0.02658081, -0.010047913, -0.05569458, -0.004371643, 0.051818848, -0.09637451, -0.08691406, 0.041259766, -0.0982666, -0.08258057, 0.017074585, 0.054718018, -0.02986145, 0.009933472, 0.05126953, 0.01499939, -0.030578613, -0.0008029938, -0.04135132, -0.0070533752, -0.02796936, -0.04925537, -0.01828003, 0.06298828, -0.005996704, -0.02708435, -0.06237793, -0.07287598, 0.01424408, -0.05215454, 0.016113281, -0.004673004, 0.0012598038, 0.037719727, 0.04840088, -0.006801605, 0.08477783, -0.07574463, -0.026138306, 0.016281128, -0.062561035, 0.013031006, 0.03668213, 0.0076560974, -0.05038452, -0.030166626, -0.021255493, -0.097595215, -0.050933838, -0.08068848, 0.09814453, -0.011962891, -0.051605225, -0.022598267, 0.026901245, -0.11981201, -0.029251099, 0.0076293945, 0.053833008, -0.053100586, -0.03845215, 0.014518738, -0.02696228, -0.072631836, -0.05810547, 0.043640137, 0.042022705, 0.005756378, 0.021408081, -0.024887085, 0.11114502, 0.055511475, -0.008079529, -0.027770996, 0.011711121, 0.00069999695, 0.081726074, 0.046142578, 0.006587982, 0.03527832, -0.017791748, 0.006164551, -0.042877197, -0.044830322, 0.012969971, 0.024261475, -0.034942627, -0.028076172, -0.019424438, -0.0049972534, 0.0692749, 0.0340271, -0.0869751, 0.12609863, -0.04220581, -0.0044059753, 0.08343506, 0.0006079674, 0.0005631447, 0.08190918, 0.028793335, -0.027420044, 0.017181396, 0.051635742, -0.012634277, 0.0390625, -0.021881104, -0.030654907, 0.10241699, 0.068359375, -0.052001953, -0.07867432, 0.05682373, -0.06311035, -0.044677734, 0.0024223328, -0.02079773, 0.011680603, -0.06964111, 0.0029582977, -0.023986816, -0.036712646, 0.077697754, 0.023330688, 0.034851074, -0.01802063, -0.008918762, 0.07696533, 0.00868988, -0.057769775, -0.027679443, 0.027160645, -0.03024292, -0.04824829, -0.035247803, -0.009719849, -0.084228516, 0.04736328, -0.03933716, -0.08270264, 0.11236572, -0.0736084, -0.072509766, 0.120910645, -0.061645508, -0.07885742, 0.10620117, 0.09790039, -0.013076782, 0.048797607, 0.05340576, 0.07006836, -0.043273926, -0.031707764, -0.0053520203, -0.036499023, 0.04977417, 0.015640259, 0.064819336, 0.022842407, -0.008728027, -0.041168213, 0.061645508, 0.023895264, -0.0635376, 0.04058838, -0.042388916, -0.049743652, 0.0068130493, 0.01586914, -0.0031833649, 0.0082473755, 0.041992188, -0.033416748, 0.006401062, 0.07611084, -0.009864807, -0.035705566];

        let cohere_token = env::var("COHERE_TOKEN");

        if cohere_token.is_err() {
            return;
        }

        let cohere_token = cohere_token.unwrap();
        let cohere_token = cohere_token.trim();

        if cohere_token == "" {
            return;
        }

        Spi::connect(|mut client| {
            client.update(
                &format!("SET lantern_extras.cohere_token='{cohere_token}'"),
                None,
                None,
            )?;
            let row = client
                .select(
                    &format!(
                        "
                         SELECT cohere_embedding('cohere/embed-multilingual-light-v3.0', '{HELLO_WORLD_TEXT}') as embedding
                     "
                    ),
                    None,
                    None,
                )?
                .first();

            let embedding = row.get_by_name::<Vec<f32>, &str>("embedding")?.unwrap();
            let distance = 1.0 - cosine_similarity(&embedding, HELLO_WORLD_COHERE_EMB);
            assert!(distance < 0.1);

            Ok::<(), anyhow::Error>(())
        })
        .unwrap();
    }
    #[pg_test(volatile, create_or_replace)]
    fn test_openai_embeddings() {
        static HELLO_WORLD_TEXT: &'static str = "Hello world!";
        #[rustfmt::skip]
        static HELLO_WORLD_OPENAI_EMB: &'static [f32] = &[0.0065861135, 0.0037235422, -0.0117079485, -0.026796935, -0.012392954, -0.0013637277, -0.013423606, 0.009395267, -0.006344162, -0.029486684, 0.024006635, 0.0030291094, -0.023214793, -0.009156457, 0.0067746476, 0.0011885484, 0.0260428, -0.018350622, 0.008936501, 0.009634077, -0.013059107, -0.0011021371, 0.0072019906, 0.008747968, -0.012663186, 0.0036324176, 0.0054611955, -0.017282264, 0.036349315, -0.026721522, 0.012619195, -0.008578287, -0.007654472, -0.012581488, 0.007057448, -0.014140034, 0.004923874, -0.013599571, 0.018187227, -0.014378844, 0.008326909, 0.006014228, 0.005511471, -0.006347304, -0.036123075, 0.012971125, 0.00018401683, -0.016490422, -0.0046819225, 0.025791422, 0.019456686, -0.0021131495, -0.01476848, 0.0133104855, -0.0176719, 0.0014359991, -0.040295955, 0.024848754, 0.03195019, -0.018677413, 0.011230329, 0.012348963, -0.013587002, 0.004154028, -0.0021210052, 0.009898024, 0.0066112513, 0.01138744, -0.019959444, 0.030140268, 0.019620083, -0.008169797, -0.0042043035, -0.009137604, 0.012493506, 0.008917648, -0.021103214, 0.0031155208, 0.001872769, -0.0007784874, 0.027249416, -0.03360929, -0.004493389, 0.01789814, 0.019959444, -0.0014045767, -0.0021697097, 0.017923279, -0.01145657, -0.020034857, 0.0075602047, 0.0012458941, 0.011368588, 0.0067055183, -0.017470798, 0.004933301, 0.0017423665, 0.023554154, -0.005775418, -0.04140202, -0.012983694, -0.0058445474, -0.010733857, -0.017018316, -0.008000117, 0.011500561, -0.005498902, -0.0003030288, 0.02838062, 0.0074030934, -0.026218764, 0.009326138, -0.0049835765, -0.031145781, -0.0007753452, -0.0080629615, 0.0074470844, 0.0039843475, -0.0059670946, -0.027752174, 0.015271237, 0.029335856, 0.011035511, -0.023566723, 0.0070071723, 0.0013770822, -0.03383553, -0.016817214, -0.005253808, -0.0047510513, 0.031598262, 0.004141459, 0.010608167, -0.0014799902, -0.035368938, 0.024672788, -0.0070763016, 0.02092725, -0.017081162, -0.011883913, 0.006306455, 0.021316888, 0.017609056, -0.013209934, -0.0050935545, 0.012845435, 0.004483962, -0.016339594, 0.008961639, -0.015107841, 0.008452598, 0.018526588, 0.012933418, -0.002570344, 0.0050401366, 0.01605051, 0.0045876554, 0.020525046, 0.008006401, -0.01314709, -0.00064690656, -0.0004481605, 0.0033181948, -0.030793851, 0.009407836, 0.0158117, 0.0260428, 0.0037392534, -0.013901224, -0.026118213, -0.011425148, 0.0073591024, -0.043186806, 0.026595833, -0.015949959, 0.0051469724, -0.0012820298, 0.02277488, -0.01278259, -0.017219419, -0.030240819, 0.011613681, 0.008993061, 0.026017662, 0.0062970286, -0.00012667113, 0.009822611, -0.006388153, 0.0038869383, -0.017018316, 0.016603542, 0.03335791, 0.021002663, 0.018438604, -0.6889779, -0.00727112, 0.025326371, 0.020298805, 0.006246753, 0.009910593, 0.012166713, 0.027802449, 0.006416433, 0.027400244, -0.020990094, 0.013008831, -0.015057565, -0.010658444, -0.00023448889, -0.00831434, 0.0056151645, -0.012361532, -0.011858775, 0.015246099, -0.010281376, 0.031296607, -0.02209616, -0.014554809, 0.009866602, 0.011846206, 0.0024713636, -0.00970949, -0.006950612, 0.030140268, -0.0021649962, 0.011437717, 0.00013079532, 0.014152603, 0.06611252, 0.007616765, -0.005426631, 0.008119522, 0.0097974725, 0.02908448, -0.019004205, -0.022221848, 0.012581488, -0.016653817, -0.0027651621, 0.009206734, 0.012638048, -0.0023865234, 0.0022184143, 0.0017549354, 0.014579946, -0.004823323, 0.010865831, 0.019456686, -0.005263235, 0.007139146, 0.021455145, 0.011909051, -0.0028657136, 0.00459394, 0.0005891681, 0.017244557, -0.0016622395, 0.0038398048, -0.022485796, 0.023805533, -0.021342024, 0.013964069, -0.008867373, -0.012066162, -0.0018790534, -0.007981264, -0.01801126, -0.014718205, 0.014014345, 0.028154379, 0.016829783, -0.0033433326, -0.0061556282, 0.019582376, 0.010985236, 0.013235072, -0.014026914, -0.017709607, 0.023441033, -0.019758342, -0.030064855, -0.016301889, 0.010350505, 0.011506845, 0.030240819, 0.0032930567, -0.012374101, -0.01977091, 0.028858239, 0.00053692854, -0.011494276, 0.0037518223, 0.027299693, 0.00043362772, 0.014881601, -0.0027683044, 0.00040534764, 0.0065107, 0.010268807, 0.006686665, -0.008044108, 0.033207085, 0.024371134, -0.030064855, 0.006334735, 0.00410061, -0.040723298, 0.021153491, 0.008477736, -0.03197533, 0.0012804586, 0.016037941, 0.026369592, -0.014630222, 0.023202226, 0.0020298804, 0.013674984, 0.0057879873, 0.0040848986, 0.005307226, 0.00029772628, 0.004361415, -0.016993178, 0.0016339595, 0.020638166, 0.0050212834, 0.00047526226, -0.0056905784, 0.009816326, 0.001996887, 0.009942015, -0.01789814, 0.0086662695, 0.020298805, -0.0079749795, 0.0051501147, -0.0029458404, -0.0005974164, 0.011821069, -0.018426035, -0.012059878, 0.008703977, 0.00012500182, -0.013700122, 0.019858893, -0.00790585, -0.032503225, 0.021228904, -0.008075531, -0.00025393144, 0.0035884264, -0.029235305, -0.035771143, -0.028983928, 0.0027180288, 0.016364733, -0.007082586, -0.00514383, -0.014039483, -0.023642138, -0.024547098, 0.011645104, 0.005536609, -0.028933652, 0.0108784, -0.0049395855, -0.0251127, -0.0024823616, -0.0030275383, 0.010740141, -0.010677297, -0.015748857, -0.0033401903, -0.017269695, 0.0069003366, -0.00959637, -0.009822611, 0.0121792825, 0.025766285, -0.010187109, -0.0005742425, 0.027500795, -0.019745773, -0.0016080361, 0.016968042, 0.0072396975, -0.022184143, 0.000642586, -0.00796241, -0.0046159355, -0.0011217761, 0.0038460894, 0.016766937, 0.017181713, 0.01871512, 0.004188592, 0.017923279, -0.025992526, -0.01593739, -0.028782824, -0.0023676702, -0.030391647, 0.0038932227, 0.013863518, 0.012059878, -0.002364528, -0.001407719, 0.017646762, 0.016301889, 0.026972901, 0.002174423, -0.020977527, -0.02848117, -0.0075664893, -0.002681893, 0.008264065, -0.014592515, -0.00081697974, 0.017219419, 0.0325535, 0.0044336864, 0.03557004, 0.0038995072, -0.03220157, -0.024974443, 0.009282147, 0.012732315, 0.009520956, -0.016829783, -0.005511471, 0.004154028, -0.014466826, 0.029134754, 0.012210705, -0.008521727, 0.010212247, 0.028707411, -0.017822728, 0.009420405, 0.02838062, 0.014755911, -0.009458112, 0.0050809854, 0.028003551, -0.0009002488, 0.0005113979, -0.014366275, -0.008389753, 0.0012608197, -0.031522848, 0.0005004001, -0.021417439, 0.019544668, 0.035645455, 0.013775536, 0.0115759745, -0.0064604245, -0.005775418, 0.009225586, -0.013385899, -0.0016009661, -0.013473881, 0.003143801, -0.0051344037, -0.012411808, -0.003186221, 0.03358415, -0.026269041, 0.009313569, 0.0005019712, -0.0011469139, -0.008817097, -0.005253808, 0.0030526763, -0.012933418, -0.022498365, -0.0017989265, 0.011777077, 0.007082586, -0.016037941, -0.024031773, -0.0051029813, -0.001134345, -0.0032742035, -0.008509158, 0.00407233, 0.014290861, -0.023441033, 0.015535184, -0.002680322, 0.02070101, 0.006793501, -0.009860317, -0.0060393657, 0.021103214, 0.020361649, -0.0016716663, -0.019330997, 0.013285347, -0.003952925, -0.007648187, -0.0154723395, 0.0009253867, -0.008282918, -0.0007749524, 0.011506845, -0.002735311, 0.0037141156, 0.013071676, -0.005209817, -0.003484733, 0.016653817, 0.026143352, -0.0022985411, -0.008383469, -0.009671783, -0.022297263, -0.00937013, 0.06983291, -0.0010220102, -0.0030699584, 0.019607514, -0.019004205, -0.012920849, -0.040497057, -0.01814952, -0.01662868, -0.0033056256, -0.004474535, 0.004474535, -0.013762967, 0.019896599, 0.013536726, 0.009055906, 0.0033747547, -0.026972901, -0.011406294, 0.004842176, -0.015145548, 0.010073989, 0.00042577213, 0.009898024, 0.020562751, 0.008295487, 0.0028060111, 0.017194282, -0.007535067, -0.003915218, 0.008414892, -0.0060645035, 0.017521074, 0.008791959, 0.013222503, 0.01419031, 0.0028782825, 0.03778217, 0.008458883, -0.0054643378, 0.011839922, 0.0053040837, -0.0062121884, -0.0059105344, 0.0142657235, 0.0022922566, -0.0057502803, 0.02860686, -0.0014438545, -0.028631998, 0.023164518, 0.0077236006, -0.009231871, -0.02301369, -0.011877629, 0.018111812, 0.00025157476, -0.014039483, -0.0108784, -0.017835297, -0.014730773, -0.015120409, -0.014755911, -0.0011139205, -0.031120643, -0.01919274, -0.02371755, 0.0023362478, -0.0075162137, 0.0015616883, -0.004923874, -0.038687132, -0.012568919, -0.003676409, 0.01906705, 0.0004249866, -0.0018602001, -0.0064981314, 0.004018912, 0.013813242, -0.0060205124, -0.029009065, 0.011337165, -0.0063221664, 0.015623166, 0.0031846499, 0.0066929497, 0.009175311, -0.016930334, 0.029637512, 0.008528012, 0.015032427, 0.026369592, 0.00032148938, 0.018652275, 0.0046065086, 0.00505899, 0.0017596487, -0.01988403, -7.035649e-5, -0.0082389265, -0.011821069, -0.0020864406, 0.004804469, -0.0034910173, 0.016704094, 0.016905196, 0.015648304, -0.015434633, -0.0016339595, 0.034212597, -0.02408205, 0.0161762, -0.0064855623, 0.00020601244, 0.013411037, 0.02153056, 0.03499187, -0.004804469, -0.034463976, -0.0055051865, -0.025263527, 0.008496589, 0.015836839, 0.00913132, 0.0011759795, -0.0018350622, -0.022184143, -0.006950612, -0.0032899147, -0.0055617467, 0.019481825, -0.006306455, -0.0024053769, -0.015246099, -0.0065672603, -0.018426035, 0.0059450986, -0.00691919, -0.017948417, -0.02420774, -0.0063253087, -0.006592398, -0.013888655, -0.04549949, -0.04477049, -0.016151061, 0.0039057916, -0.017458228, 0.016389871, -0.0039560674, -0.00032188217, -0.01998458, -0.010664728, -0.0062938863, -0.016942903, -0.0005459624, -0.0061493437, 0.027023176, 0.027978415, 0.02546463, 0.013976638, 0.011469139, 0.0064478554, -0.008496589, -0.016653817, 0.004584513, -0.012185567, -0.014328568, 0.012707178, 0.02093982, 0.02848117, -0.0070385947, 0.009583801, 0.004813896, -0.008207505, -0.020801561, 0.0010479336, -0.0139137935, -0.01441655, -0.02105294, -0.0010353647, 0.0021948474, 0.010941244, 0.011198907, -0.015510046, 0.011833637, 0.008515443, 0.020889543, 0.003035394, 0.026319318, -0.019645222, 0.027450519, 0.0072585507, 0.020525046, -0.01314709, 0.0077173165, -0.0067620785, 0.016905196, 0.009307285, 0.021467714, 0.027752174, -0.012304972, -0.010488763, 0.0058162673, 0.02616849, 0.0031626543, 0.0075664893, 0.004125748, -0.007868144, 0.0026866065, -0.020210821, -0.0050275675, -0.013499019, 0.004741625, -0.012242127, -0.018677413, 0.018602, -0.011927905, -0.02908448, -0.015861977, -0.00025943035, 0.048063546, 0.0060110856, 0.012129007, 0.019406412, 0.0029301292, -0.0058979653, 0.02068844, -0.018652275, -0.0054800487, 0.039793197, 0.001606465, -0.0063755843, -0.024107186, 0.0046410733, 0.0040283385, -0.015107841, -0.024094619, 0.0080629615, 0.028782824, -0.0022042743, -0.014617653, 0.006124206, -0.03315681, 0.024748202, 0.0034815907, -0.021379732, -0.015082703, 0.012462083, -0.023063967, 0.008955355, -0.030542474, 0.027224278, 0.034162324, -0.005794272, -0.0065798294, 0.0037581068, 0.0004006343, -0.0012961698, -0.007629334, 0.028355481, -0.007082586, 0.0036606977, 0.018941361, -0.0021257184, -0.020751286, -0.0052035325, -0.012304972, 0.022611486, -0.017345108, 0.0055051865, -0.01186506, 0.011343449, -0.0032113588, 0.012053593, -0.013788104, -0.006472993, -0.006152486, -0.0016371018, 0.02664611, 3.3852615e-5, -0.0017800732, -0.014843893, -0.017973555, -0.024446547, -0.04720886, -0.0045090998, 0.0016033228, -0.029562097, -0.004757336, -0.005454911, 0.009464396, 0.025716009, 0.016804645, -0.012330109, 0.012506074, 0.0232525, -0.018174658, -0.0058068405, 0.018752828, 0.016012803, -0.025917111, 0.016251612, -0.0036135642, -0.019155033, 0.0045719445, -0.014152603, -0.0041760234, 0.01156969, 0.013360761, 0.00028181873, -0.016201336, 0.006353589, 0.029360995, 0.016880058, 0.009093613, -0.007371671, -0.0033150525, 0.0370029, -0.014202879, 0.0041791657, -0.0072962577, -0.012719746, 0.019670358, -0.0070448793, -0.0076419027, -0.0007737741, -0.035746004, -0.00407233, -0.0020141692, 0.0081069525, 0.014290861, -0.015836839, -0.032050744, -0.005593169, -0.016729232, 0.00042027322, 0.0099734375, -0.010997804, 0.0012396097, 0.01383838, 0.016716663, 0.00040377653, 0.005979663, -0.0114879925, -0.011029227, -0.016339594, -0.024283152, -0.01266947, -0.0012183996, 0.04117578, 0.0069443276, -0.018111812, -0.008879941, -0.0051595415, -0.027500795, -0.03232726, -0.0027651621, -0.0029788339, -0.0056434446, 0.016817214, -0.008546865, 0.022008177, 0.006328451, -0.0022404098, -0.0058351206, -0.019695496, 0.011877629, 0.0046505, 0.015158117, -0.0008971066, -0.023315346, 0.0021822785, 0.002626904, 0.011965611, -0.0041634543, 0.00937013, -0.009326138, -0.010488763, -0.014328568, -0.003965494, -0.0028232934, 0.0072648353, 0.016389871, -0.0158117, 0.001984318, 0.0050527053, -0.003418746, 0.0033590437, -0.004713345, 0.008458883, -0.015308944, 0.015912252, -0.019921737, -0.0063221664, 0.0030542475, -0.023428466, 0.015158117, -0.025401786, 0.0065609757, 0.029411271, 0.010702435, 0.0076230494, -0.00085939985, -0.0019309002, 0.0024823616, 0.005429773, -0.00935756, -0.011280605, 1.51956265e-5, -0.007352818, -0.021115784, -0.029612374, 0.0022215564, -0.025728578, -0.014341136, 0.0013762966, 0.034740493, 0.015748857, -0.026595833, -0.013197365, -0.023101673, 0.012983694, 0.009344991, -0.013398468, 0.0016323883, -0.009646646, -0.004207446, 0.021832213, -0.017634194, 0.0052443817, 0.018564293, 0.016113354, -0.0042860014, 0.039240167, 0.23408355, -0.01285172, 0.0035789998, 0.027349968, 0.022297263, 0.013549295, 0.01017454, 0.0017580775, 0.0069820345, 0.00283272, -0.01151313, 0.0012262552, -0.0046724956, 0.0067369407, 0.0055460357, 0.009432974, -0.02105294, -0.019796047, -0.030869266, -0.024572236, 0.006253037, -0.032955706, -0.025162976, -0.014315999, 0.017508505, -0.0072271284, -0.008465167, 0.0012074017, 0.033634428, 0.009684352, 0.0047007757, -0.011588544, 0.011255467, 0.011136062, -0.014278292, -0.019557238, 0.036072798, 0.0133104855, 0.03081899, 0.0039026495, -0.01652813, -0.025024718, -0.004619078, -0.017609056, 0.0027274555, 0.011085787, 0.007176853, -0.026193628, 0.018124381, 0.033961218, 0.00467878, 0.0069820345, 0.02302626, 0.043991216, 0.00043480605, -0.015949959, 0.008628563, 0.01664125, -0.005307226, -0.00054949743, 0.0006178409, 0.031899918, 3.542373e-5, 0.03941613, -0.023617, 0.0074596535, -0.025162976, -0.0029144182, 0.00412889, -0.0035224396, -0.016653817, -0.0013598, 0.0060676457, -0.008421176, -0.02953696, -0.009489534, 0.010501332, 0.0036387022, 0.033408187, 0.027400244, -0.009395267, -0.0015420492, -0.009898024, -0.0200977, -0.03871227, -0.02908448, 0.002213701, -0.00727112, -0.0121792825, -0.02336562, -0.014491964, -0.010312798, 0.0017753599, -0.006099068, 0.023642138, 0.026243903, -0.003487875, 0.01052647, -0.020876974, 0.012336394, -0.005511471, -0.0024855037, 3.657752e-5, 0.009055906, 0.0021351452, 0.00993573, -0.007139146, 0.00074981456, -0.0030133983, -0.015648304, -0.022246987, -0.0016433862, -0.006755794, -0.011054364, -0.0068563456, 0.009766051, -0.0050652744, -0.0026080508, -0.00034564527, -0.008942786, -0.0039309296, -0.013901224, -0.014806187, 0.0023158235, -0.0061493437, -0.014818756, -0.006875199, 0.009099898, 0.014579946, -0.030064855, 0.008559434, -0.00034053915, 0.021241473, 0.008169797, -0.007013457, 0.0073402487, 0.017005747, -0.0027824445, -0.016955473, 0.003528724, -0.002133574, -0.00999229, 0.008867373, -0.00732768, -0.0148690315, -0.016440146, 0.031145781, -0.027601346, -0.010985236, 0.0028814247, -0.0427846, -0.018187227, -0.013938932, -0.0036104221, 0.027928138, -0.020776423, -0.019670358, -0.024785908, -0.0062278993, 0.009828894, -0.012512359, 0.009722059, 0.030014578, -0.007899566, -0.038636856, -0.013059107, -0.16068107, 0.014378844, 0.0114440005, -0.012700893, 0.02070101, 0.015296374, 0.024547098, 0.0046253623, -0.009087329, 0.018551724, 0.009872886, -0.012920849, -0.014894169, -0.014328568, 0.005344933, -0.016100785, -0.008276633, 0.012392954, 0.029788338, 0.028682273, 0.03511756, -0.007409378, -0.00084840204, -0.0048107537, 0.013762967, -0.007824152, 0.0006099854, 0.034036633, -0.010029998, -0.0069631813, -0.015949959, -0.028908513, 0.025791422, 0.0046159355, 0.021920195, -0.0065107, 0.012493506, -0.0425835, -0.016377302, 0.025024718, 0.032930568, 0.018589431, 0.019230446, -0.013436175, -0.015359219, -0.0052758036, 0.020638166, 0.015145548, 0.016264182, -0.007176853, 0.00814466, -0.002967836, -0.0005384996, -0.0062656063, 0.01999715, 0.029461546, 0.006894052, 0.024484254, 0.0024258015, -0.008414892, -0.00021779581, -0.012430661, -0.006278175, -0.004685065, 0.0060393657, -0.005238097, 0.0015059137, 0.0096215075, -0.00022290193, 0.018312914, -0.008905079, -0.02301369, -0.010306514, -0.02556518, 0.0068626297, 0.008326909, -0.033810392, 0.030969817, -0.0114440005, -0.014906738, -0.008345762, 0.021379732, -0.002461937, 0.0070888703, -0.023177087, 0.00037647842, 0.0032176434, 0.01261291, -0.031346884, -0.027048314, 0.007509929, -0.017998692, -0.014202879, -0.01802383, 0.0054392, 0.015635736, 0.012436946, 0.016151061, -0.01571115, -0.019909168, -0.0022498365, 0.017156575, -0.016037941, 0.011230329, 0.030441923, -0.005429773, 0.017533641, 0.007987548, 0.022422953, -0.031723954, -0.03212616, 0.006604967, 0.014705636, 0.02616849, 0.016188769, 0.026419869, -0.013285347, -0.017382815, 0.004813896, -0.01314709, 0.052135877, 0.0062561794, -0.044267733, -0.0011264894, 0.0028390046, 0.00027376678, -0.08396038, -0.0344137, 0.0047384826, 0.014491964, -0.0012906708, 0.038284928, 0.0042137303, -0.0018287777, 0.0019748914, 0.005520898, 0.008923933, -0.03046706, -0.01789814, -0.01058303, 0.040798713, -0.027148865, 0.012839151, 0.0010589315, -0.033910945, 0.011663957, -0.0086662695, 0.007855575, 0.0027243132, -0.0017722176, -0.022221848, 0.0122232735, -0.022925708, 0.031296607, 0.0016575262, -0.0048987363, -0.016754368, -0.024119755, -0.014127465, -0.00831434, -0.0044525396, 0.013662416, -0.040999815, 0.03104523, 0.013398468, -0.04107523, 0.027274555, 0.010658444, -0.0065044155, -0.055906553, -0.012738599, 0.017131437, -0.0019183313, 0.03780731, 0.018689983, -0.009068475, -0.032226708, -0.031271473, -0.021857351, 0.01082184, 0.010551607, -0.0018036399, 0.008025255, 0.028883377, -0.009910593, 0.011971896, 0.01337333, 0.0061839083, -0.020386787, 0.017043455, -0.012537497, 0.018564293, -0.012694608, 0.02326507, 0.020059995, 0.0096654985, -0.015598029, 0.02848117, 0.0062436108, 0.010036282, -0.037882723, -0.005426631, -0.015748857, -0.020311374, 0.0066678114, -0.005879112, -0.033081394, -0.0208267, 0.009219302, -0.00814466, 0.026017662, 0.013674984, -0.010601884, 0.005784845, -0.015271237, -0.035444353, -0.03056761, 0.010275091, 0.007051164, -0.011481708, 0.007478507, 0.014705636, -0.011858775, -0.0011178482, 0.01606308, 0.010865831, -0.024961874, -0.011839922, -0.06505673, 0.032377537, -0.01606308, -0.019381274, 0.00097330566, -0.021932764, 0.0066615273, -0.015107841, 0.0020895828, -0.008791959, -0.01871512, -0.004870456, -0.002064445, 0.012638048, -0.028003551, 0.0033213368, 0.020147977, 0.014202879, 0.00590425, -0.002160283, 0.00039631373, -0.032503225, -0.016502991, 0.0010966382, -0.023780394, 0.011142347, -0.031497713, 0.00042537934, -0.0024320858, -0.00872283, 0.0064352867, -0.042608637, 0.0064478554, 0.02267433, 0.00081148086, -0.01011798, 0.0067432253, 0.015057565, 0.0073779556, 0.020323941, -0.030894402, -0.033232223, 0.015610598, -0.010859546, 0.003582142, 0.004568802, -0.005335506, -0.0033747547, 0.030441923, 0.009810042, -0.0031909344, 0.029285582, -0.028355481, -0.013071676, -0.012883143, -0.008383469, -0.017081162, -0.00032561357, -0.00831434, -0.044971593, 0.022510935, 0.00017989265, 0.029712925, -0.007817868, 0.0052318126, 0.010771563, -0.02057532, -0.0026473287, -0.014567377, -0.022397814, -0.0069443276, -0.0059262454, 0.00517211, 0.005272662, 0.019657789, 0.020638166, -0.0031673675, 0.017106298, -0.040572472, 0.03775703, 0.020261098, 0.021115784, -0.030190544, -0.0004481605, 0.03453939, 0.006051935, -0.0062436108, -0.017294833, -0.009200449, 0.0031296609, -0.036097936, -0.026671246, 0.006906621, 0.024295721, -0.0037486802, 0.0047510513, 0.017533641, 0.0078430055, 0.017709607, 0.02350388, 0.0023268212, 0.009520956, -0.016000234, -0.0045248107, -0.008741683, 0.0059262454, -0.006290744, -0.037933, -0.0072648353, 0.012814013, 0.011833637, 0.029738063, -0.006466709, 0.014969583, -0.024987012, -0.005797414, 0.026067939, -0.0015145547, -0.028405758, 0.042457808, -0.008942786, 0.003585284, 0.027827587, -0.015032427, 0.008471452, 0.0029741204, -0.007811583, -0.0035601463, 0.019041913, -0.0050809854, 0.011745655, -0.010029998, -0.016452715, -0.015434633, 0.0009010344, 0.013788104, -0.008402322, 0.02432086, -0.016213905, 0.056359034, -0.012719746, -0.0041477433, 0.022862865, 0.014341136, 0.020751286, 0.024484254, 0.018086676, -0.008521727, -0.020261098, -0.0039215027, 0.006686665, -0.0008507587, -0.022573778, -0.011242898, 0.0043394193, -0.015836839, 0.004389695, -0.019682927, 0.0129585555, 0.018275209, 0.008955355, 0.024408842, 0.013184796, -0.018061537, -0.019946875, 0.0042482945, 0.0012160429, -0.018338053, -0.016125923, 0.01720685, 0.00078909245, -0.001347231, -0.012631764, 0.0066238204, 0.0029505538, -0.0071014394, -0.00953981, -0.0036072799, 0.010557892, 0.022888001, 0.0006201976, -0.01813695, -0.03288029, 0.006768363, 0.0027243132, -0.02943641, -0.005348075, -0.02313938];

        let openai_token = env::var("OPENAI_TOKEN");

        if openai_token.is_err() {
            return;
        }

        let openai_token = openai_token.unwrap();
        let openai_token = openai_token.trim();

        if openai_token == "" {
            return;
        }

        Spi::connect(|mut client| {
            client.update(
                &format!("SET lantern_extras.openai_token='{openai_token}'"),
                None,
                None,
            )?;
            let row = client
                .select(
                    &format!(
                        "
                         SELECT openai_embedding('openai/text-embedding-ada-002','{HELLO_WORLD_TEXT}') as embedding
                     "
                    ),
                    None,
                    None,
                )?
                .first();

            let embedding = row.get_by_name::<Vec<f32>, &str>("embedding")?.unwrap();
            let distance = 1.0 - cosine_similarity(&embedding, HELLO_WORLD_OPENAI_EMB);
            assert!(distance < 0.1);

            let row = client
                .select(
                    &format!(
                        "
                         SELECT openai_embedding('openai/text-embedding-3-small','{HELLO_WORLD_TEXT}', '', 384) as embedding
                     "
                    ),
                    None,
                    None,
                )?
                .first();
            let embedding_small = row.get_by_name::<Vec<f32>, &str>("embedding")?.unwrap();
            assert!(embedding_small.len() == 384);
            let row = client
                .select(
                    &format!(
                        "
                         SELECT openai_embedding('openai/text-embedding-3-large','{HELLO_WORLD_TEXT}', '', 768) as embedding
                     "
                    ),
                    None,
                    None,
                )?
                .first();
            let embedding_large = row.get_by_name::<Vec<f32>, &str>("embedding")?.unwrap();
            assert!(embedding_large.len() == 768);

            Ok::<(), anyhow::Error>(())
        })
        .unwrap();
    }
}
