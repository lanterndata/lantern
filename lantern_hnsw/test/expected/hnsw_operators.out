\set ON_ERROR_STOP off
CREATE TABLE op_test (v REAL[]);
INSERT INTO op_test (v) VALUES (ARRAY[0,0,0]), (ARRAY[1,1,1]);
CREATE INDEX cos_idx ON op_test USING lantern_hnsw(v dist_cos_ops);
INFO:  done init usearch index
INFO:  inserted 2 elements
INFO:  done saving 2 vectors
-- Expect deprecation error due to use of the <?> operator
SELECT ARRAY[1,2,3] <?> ARRAY[3,2,1];
ERROR:  Operator <?> is deprecated. Please explicitly use the operator that matches your distance function.
-- should not throw error
SELECT * FROM op_test ORDER BY v <=> ARRAY[1,1,1];
    v    
---------
 {1,1,1}
 {0,0,0}

-- should not throw error
SELECT * FROM op_test ORDER BY v::INTEGER[] <+> ARRAY[1,1,1];
    v    
---------
 {1,1,1}
 {0,0,0}

-- should not throw error
SELECT v <-> ARRAY[1,1,1] FROM op_test ORDER BY v <-> ARRAY[1,1,1];
 ?column? 
----------
        0
        3

SET enable_seqscan=OFF;
\set ON_ERROR_STOP on
-- one-off vector distance calculations should work with relevant operator
-- with integer arrays:
SELECT ARRAY[0,0,0] <-> ARRAY[2,3,-4];
 ?column? 
----------
       29

-- with float arrays:
SELECT ARRAY[0,0,0] <-> ARRAY[2,3,-4]::real[];
 ?column? 
----------
       29

SELECT ARRAY[0,0,0]::real[] <-> ARRAY[2,3,-4]::real[];
 ?column? 
----------
       29

SELECT '{1,0,1}' <-> '{0,1,0}'::integer[];
 ?column? 
----------
        3

SELECT '{1,0,1}' <=> '{0,1,0}'::integer[];
 ?column? 
----------
        1

SELECT ROUND(num::NUMERIC, 2) FROM (SELECT '{1,1,1}' <=> '{0,1,0}'::INTEGER[] AS num) _sub;
 round 
-------
  0.42

SELECT ARRAY[.1,0,0] <=> ARRAY[0,.5,0];
 ?column? 
----------
        1

SELECT cos_dist(ARRAY[.1,0,0]::real[], ARRAY[0,.5,0]::real[]);
 cos_dist 
----------
        1

SELECT ARRAY[1,0,0] <+> ARRAY[0,1,0];
 ?column? 
----------
        2

-- should sort with index
EXPLAIN (COSTS FALSE) SELECT * FROM op_test ORDER BY v <=> ARRAY[1,1,1];
              QUERY PLAN               
---------------------------------------
 Index Scan using cos_idx on op_test
   Order By: (v <=> '{1,1,1}'::real[])

-- should sort without index
EXPLAIN (COSTS FALSE) SELECT * FROM op_test ORDER BY v::INTEGER[] <+> ARRAY[1,1,1];
                       QUERY PLAN                        
---------------------------------------------------------
 Sort
   Sort Key: (((v)::integer[] <+> '{1,1,1}'::integer[]))
   ->  Seq Scan on op_test

-- should not throw error
\set ON_ERROR_STOP on
SELECT v <=> ARRAY[1,1,1] FROM op_test ORDER BY v <=> ARRAY[1,1,1];
 ?column? 
----------
        0
        1

-- should not throw error
SELECT v::INTEGER[] <+> ARRAY[1,1,1] FROM op_test ORDER BY v::INTEGER[] <+> ARRAY[1,1,1];
 ?column? 
----------
        0
        3

-- should not throw error
SELECT v <-> ARRAY[1,1,1] FROM op_test ORDER BY v <-> ARRAY[1,1,1];
 ?column? 
----------
        0
        3

RESET ALL;
-- Set false twice to verify that no crash is happening
\set ON_ERROR_STOP off
SET enable_seqscan=OFF;
CREATE INDEX hamming_idx ON op_test USING lantern_hnsw(cast(v as INTEGER[]) dist_hamming_ops);
INFO:  done init usearch index
INFO:  inserted 2 elements
INFO:  done saving 2 vectors
-- should sort with cos_idx index
EXPLAIN (COSTS FALSE) SELECT * FROM op_test ORDER BY v <=> ARRAY[1,1,1];
              QUERY PLAN               
---------------------------------------
 Index Scan using cos_idx on op_test
   Order By: (v <=> '{1,1,1}'::real[])

-- should sort with hamming_idx index
EXPLAIN (COSTS FALSE) SELECT * FROM op_test ORDER BY v::INTEGER[] <+> ARRAY[1,1,1];
                      QUERY PLAN                       
-------------------------------------------------------
 Index Scan using hamming_idx on op_test
   Order By: ((v)::integer[] <+> '{1,1,1}'::integer[])

