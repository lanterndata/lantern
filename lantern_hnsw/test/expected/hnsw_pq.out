\ir utils/sift1k_array.sql
CREATE TABLE IF NOT EXISTS sift_base1k (
    id SERIAL,
    v REAL[]
);
COPY sift_base1k (v) FROM '/tmp/lantern/vector_datasets/sift_base1k_arrays.csv' WITH csv;
\ir utils/sift1k_array_query.sql
SELECT
   b.id, 
   ARRAY(SELECT id FROM sift_base1k b2 ORDER BY l2sq_dist(b.v, b2.v) LIMIT 10)::INT[] as indices
INTO sift_truth1k
FROM sift_base1k b
WHERE id IN (SELECT id FROM sift_base1k ORDER BY id LIMIT 100);
SELECT id, v INTO sift_query1k FROM sift_base1k ORDER BY id LIMIT 100;
\ir utils/random_array.sql
CREATE OR REPLACE FUNCTION random_int_array(dim integer, min integer, max integer) RETURNS integer[] AS $BODY$
begin
        return (select array_agg(round(random() * (max - min)) + min) from generate_series (0, dim - 1));
end
$BODY$ LANGUAGE plpgsql;
CREATE OR REPLACE FUNCTION random_array(dim integer, min real, max real) RETURNS REAL[] AS $BODY$
begin
        return (select array_agg(random() * (max - min) + min) from generate_series (0, dim - 1));
end
$BODY$ LANGUAGE plpgsql;
\ir utils/calculate_recall.sql
CREATE OR REPLACE FUNCTION calculate_table_recall(tbl regclass, query_tbl regclass, truth_tbl regclass, col NAME, k INT, cnt INT)
RETURNS FLOAT
AS $$
DECLARE
stmt TEXT;
result FLOAT;
BEGIN
    stmt := format('
        SELECT ROUND(AVG(r.q_recall)::numeric, 2) FROM (WITH q AS (
            SELECT
                id,
                v
            FROM
                %2$I
            LIMIT
                %6$s
        )
        SELECT 
            ARRAY_LENGTH(
            ARRAY(
                SELECT UNNEST(array_agg(b.id))
                INTERSECT
                SELECT UNNEST(t.indices[1:%5$s])
            ), 1)::FLOAT / %5$s::FLOAT as q_recall
        FROM q
        JOIN LATERAL (
            SELECT
                id
            FROM
                %1$I
            ORDER BY
                %1$I.%4$I <-> q.v
            LIMIT
                %5$s
        ) b ON TRUE
        LEFT JOIN
            %3$I AS t
        ON
            t.id = q.id
        GROUP BY
            q.id,
            t.indices) r;
    ', tbl, query_tbl, truth_tbl, col, k, cnt);

     EXECUTE stmt INTO result;
     RETURN result;
END;
$$ LANGUAGE plpgsql;
SET client_min_messages=ERROR;
SELECT '{84,1,4,128,255}'::pqvec;
      pqvec       
------------------
 {84,1,4,128,255}
(1 row)

SELECT '{84,1,4,128,255}'::pqvec::INT[];
       int4       
------------------
 {84,1,4,128,255}
(1 row)

SELECT '{84,1,4,128,255}'::INT[]::pqvec;
      pqvec       
------------------
 {84,1,4,128,255}
(1 row)

\set ON_ERROR_STOP off
-- Test PQVec type
SELECT '{84,1,4,128,256}'::pqvec;
ERROR:  Compressed vector element can not be bigger than 255 at character 8
-- Verify wrong argument assertions
SELECT _lantern_internal.create_pq_codebook('sift_base1k'::regclass, 'nonexistant', 10, 32, 'l2sq', 0);
ERROR:  Column nonexistant not found in table
SELECT _lantern_internal.create_pq_codebook('sift_base1k'::regclass, 'v', 1001, 32, 'l2sq', 0);
ERROR:  Cluster count can not be greater than 256
SELECT _lantern_internal.create_pq_codebook('sift_base1k'::regclass, 'v', 10, 33, 'l2sq', 0);
ERROR:  Dataset dimensions should be divisible by subvector count
SELECT _lantern_internal.create_pq_codebook('sift_base1k'::regclass, 'v', 10, 32, 'l2sqz', 0);
ERROR:  Unsupported metric kind: l2sqz . Should be one of (l2sq, cos, hamming)
SELECT _lantern_internal.create_pq_codebook('sift_base1k'::regclass, 'v', 257, 32, 'l2sq', 0);
ERROR:  Cluster count can not be greater than 256
SELECT _lantern_internal.create_pq_codebook('sift_base1k'::regclass, 'v', 257, 0, 'l2sq', 0);
ERROR:  Subvector count can not be zero
SELECT _lantern_internal.create_pq_codebook('sift_base1k'::regclass, 'v', 256, 0, 'l2sq', 10);
ERROR:  Subvector count can not be zero
-- Verify long table name assertion
CREATE TABLE very_long_table_name_that_will_exceed_63_char_limit_of_name (id INT, v REAL[]);
SELECT quantize_table('very_long_table_name_that_will_exceed_63_char_limit_of_name'::regclass, 'v', 50, 32, 'l2sq');
ERROR:  Codebook table name "pq_very_long_table_name_that_will_exceed_63_char_limit_of_name_v" exceeds 63 char limit
\set ON_ERROR_STOP on
-- This should create codebook[1][1][128]
SELECT _lantern_internal.create_pq_codebook('sift_base1k'::regclass, 'v', 1, 1, 'l2sq', 0) as codebook \gset
INFO:  Table scanned. Dataset size 1000
INFO:  Starting k-means over dataset with (subvectors=1, clusters=1)
INFO:  Codebooks created
SELECT array_length(:'codebook'::REAL[][][], 1);
 array_length 
--------------
            1
(1 row)

SELECT array_length(:'codebook'::REAL[][][], 2);
 array_length 
--------------
            1
(1 row)

SELECT array_length(:'codebook'::REAL[][][], 3);
 array_length 
--------------
          128
(1 row)

-- This should create codebook[1][10][128]
SELECT _lantern_internal.create_pq_codebook('sift_base1k'::regclass, 'v', 10, 1, 'l2sq', 0) as codebook \gset
INFO:  Table scanned. Dataset size 1000
INFO:  Starting k-means over dataset with (subvectors=1, clusters=10)
INFO:  Codebooks created
SELECT array_length(:'codebook'::REAL[][][], 1);
 array_length 
--------------
            1
(1 row)

SELECT array_length(:'codebook'::REAL[][][], 2);
 array_length 
--------------
           10
(1 row)

SELECT array_length(:'codebook'::REAL[][][], 3);
 array_length 
--------------
          128
(1 row)

-- This should create codebook[32][10][4]
SELECT _lantern_internal.create_pq_codebook('sift_base1k'::regclass, 'v', 10, 32, 'l2sq', 0) as codebook \gset
INFO:  Table scanned. Dataset size 1000
INFO:  Starting k-means over dataset with (subvectors=32, clusters=10)
INFO:  Codebooks created
SELECT array_length(:'codebook'::REAL[][][], 1);
 array_length 
--------------
           32
(1 row)

SELECT array_length(:'codebook'::REAL[][][], 2);
 array_length 
--------------
           10
(1 row)

SELECT array_length(:'codebook'::REAL[][][], 3);
 array_length 
--------------
            4
(1 row)

-- This should create codebook _lantern_internal.pq_sift_base1k_v and add v_pq column in sift_base1k table with compressed vectors
-- The codebook will be codebook[32][50][4], so in the table there should be 32 distinct subvector ids each with 50 centroid ids
SELECT quantize_table('sift_base1k'::regclass, 'v', 50, 32, 'l2sq');
INFO:  Table scanned. Dataset size 1000
INFO:  Starting k-means over dataset with (subvectors=32, clusters=50)
INFO:  Codebooks created
INFO:  Compressing vectors...
 quantize_table 
----------------
 
(1 row)

SELECT COUNT(DISTINCT subvector_id) FROM _lantern_internal.pq_sift_base1k_v;
 count 
-------
    32
(1 row)

SELECT COUNT(DISTINCT centroid_id) FROM _lantern_internal.pq_sift_base1k_v;
 count 
-------
    50
(1 row)

SELECT COUNT(*) FROM _lantern_internal.pq_sift_base1k_v;
 count 
-------
  1600
(1 row)

SELECT array_length(c, 1) FROM _lantern_internal.pq_sift_base1k_v LIMIT 1;
 array_length 
--------------
            4
(1 row)

-- Validate that table is readonly
\set ON_ERROR_STOP off
DELETE FROM _lantern_internal.pq_sift_base1k_v WHERE centroid_id=1;
ERROR:  Cannot modify readonly table.
UPDATE _lantern_internal.pq_sift_base1k_v SET centroid_id=2 WHERE centroid_id=1;
ERROR:  Cannot modify readonly table.
INSERT INTO _lantern_internal.pq_sift_base1k_v (subvector_id, centroid_id, c) VALUES (1, 1, '{1,2,3,4}');
ERROR:  Cannot modify readonly table.
-- Validate that compressing invalid vector raises an error
SELECT dequantize_vector('{}'::pqvec, '_lantern_internal.pq_sift_base1k_v'::regclass);
ERROR:  pqvector can not be empty at character 26
SELECT dequantize_vector('{1,2,3}'::pqvec, '_lantern_internal.pq_sift_base1k_v'::regclass);
ERROR:  Codebook has 32 subvectors, but vector is quantized in 3 subvectors
\set ON_ERROR_STOP on
-- Compression and Decompression
-- Verify that vector was compressed correctly when generating quantized column
SELECT v as v1 FROM sift_base1k WHERE id=1 \gset
SELECT v_pq as v1_pq FROM sift_base1k WHERE id=1 \gset
-- Vector operators work as usual on decompressed vectors:
SELECT quantize_vector(:'v1', '_lantern_internal.pq_sift_base1k_v'::regclass, 'l2sq') as compressed \gset
SELECT dequantize_vector(:'v1_pq', '_lantern_internal.pq_sift_base1k_v'::regclass) as decompressed_1 \gset
SELECT dequantize_vector(:'compressed', '_lantern_internal.pq_sift_base1k_v'::regclass) as decompressed_2 \gset
SELECT dequantize_vector(:'v1_pq', '_lantern_internal.pq_sift_base1k_v'::regclass) <-> dequantize_vector(:'compressed', '_lantern_internal.pq_sift_base1k_v'::regclass);
 ?column? 
----------
        0
(1 row)

SELECT l2sq_dist(:'decompressed_1', :'decompressed_2');
 l2sq_dist 
-----------
         0
(1 row)

-- Test recall for quantized vs non quantized vectors
ALTER TABLE sift_base1k ADD COLUMN v_pq_dec REAL[];
UPDATE sift_base1k SET v_pq_dec=dequantize_vector(v_pq, '_lantern_internal.pq_sift_base1k_v');
-- Calculate recall over original vector
SELECT (calculate_table_recall('sift_base1k', 'sift_query1k', 'sift_truth1k', 'v', 10, 100) -
       calculate_table_recall('sift_base1k', 'sift_query1k', 'sift_truth1k', 'v_pq_dec', 10, 100)) as recall_diff \gset
SELECT :'recall_diff' < 0.2 as recall_diff_meets_threshold;
 recall_diff_meets_threshold 
-----------------------------
 t
(1 row)

-- Verify that column triggers for insert and update are working correctly
INSERT INTO sift_base1k(id, v) VALUES (1001, random_array(128, 0.0, 5.0));
SELECT id FROM sift_base1k WHERE v_pq IS NULL;
 id 
----
(0 rows)

SELECT v_pq::TEXT as old_pq FROM sift_base1k WHERE id=1001 \gset
UPDATE sift_base1k SET v=(SELECT v FROM sift_base1k WHERE id=1) WHERE id=1001;
SELECT v_pq::TEXT as new_pq FROM sift_base1k WHERE id=1001 \gset
SELECT :'old_pq' <> :'new_pq' as is_updated;
 is_updated 
------------
 t
(1 row)

SELECT :'new_pq' = (SELECT v_pq::TEXT FROM sift_base1k WHERE id=1) as is_updated;
 is_updated 
------------
 t
(1 row)

-- Verify that compressed column size is smaller than regular integer
SELECT pg_column_size(v_pq) as compressed_size, pg_column_size(v_pq::int[]) as int_size FROM sift_base1k LIMIT 1;
 compressed_size | int_size 
-----------------+----------
              37 |      152
(1 row)

-- Verify that table can have multiple quantized vectors
SELECT quantize_table('sift_base1k'::regclass, 'v_pq_dec', 10, 32, 'l2sq');
INFO:  Table scanned. Dataset size 1000
INFO:  Starting k-means over dataset with (subvectors=32, clusters=10)
INFO:  Codebooks created
INFO:  Compressing vectors...
 quantize_table 
----------------
 
(1 row)

SELECT COUNT(DISTINCT subvector_id) FROM _lantern_internal.pq_sift_base1k_v_pq_dec;
 count 
-------
    32
(1 row)

SELECT COUNT(DISTINCT centroid_id) FROM _lantern_internal.pq_sift_base1k_v_pq_dec;
 count 
-------
    10
(1 row)

SELECT COUNT(*) FROM _lantern_internal.pq_sift_base1k_v_pq_dec;
 count 
-------
   320
(1 row)

SELECT array_length(c, 1) FROM _lantern_internal.pq_sift_base1k_v_pq_dec LIMIT 1;
 array_length 
--------------
            4
(1 row)

-- Test that resources are being cleared correctly
SELECT drop_quantization('sift_base1k'::regclass, 'v');
 drop_quantization 
-------------------
 
(1 row)

SELECT drop_quantization('sift_base1k'::regclass, 'v_pq_dec');
 drop_quantization 
-------------------
 
(1 row)

SELECT column_name FROM information_schema.columns WHERE table_schema = 'public' AND table_name = 'sift_base1k';
 column_name 
-------------
 id
 v
 v_pq_dec
(3 rows)

SELECT table_name FROM information_schema.tables WHERE table_schema = '_lantern_internal';
 table_name 
------------
(0 rows)

-- Test quantization over subset of data
SELECT quantize_table('sift_base1k'::regclass, 'v', 10, 32, 'l2sq', 500);
INFO:  Table scanned. Dataset size 500
INFO:  Starting k-means over dataset with (subvectors=32, clusters=10)
INFO:  Codebooks created
INFO:  Compressing vectors...
 quantize_table 
----------------
 
(1 row)

SELECT COUNT(DISTINCT subvector_id) FROM _lantern_internal.pq_sift_base1k_v;
 count 
-------
    32
(1 row)

SELECT COUNT(DISTINCT centroid_id) FROM _lantern_internal.pq_sift_base1k_v;
 count 
-------
    10
(1 row)

SELECT COUNT(*) FROM _lantern_internal.pq_sift_base1k_v;
 count 
-------
   320
(1 row)

SELECT array_length(c, 1) FROM _lantern_internal.pq_sift_base1k_v LIMIT 1;
 array_length 
--------------
            4
(1 row)

-- Test quantization with mixed case and schema qualified table name
SELECT id, v AS "v_New" into "sift_Base1k_NEW" FROM sift_base1k;
SELECT quantize_table('"public"."sift_Base1k_NEW"'::regclass, 'v_New', 10, 32, 'l2sq');
INFO:  Table scanned. Dataset size 1001
INFO:  Starting k-means over dataset with (subvectors=32, clusters=10)
INFO:  Codebooks created
INFO:  Compressing vectors...
 quantize_table 
----------------
 
(1 row)

SELECT array_length(
              dequantize_vector(
                     quantize_vector(
                       (SELECT "v_New" FROM "sift_Base1k_NEW" WHERE id=1), 
                       '_lantern_internal."pq_sift_Base1k_NEW_v_New"'::regclass, 
                       'l2sq'),  
              '_lantern_internal."pq_sift_Base1k_NEW_v_New"'::regclass),
              1
       );
 array_length 
--------------
          128
(1 row)

SELECT drop_quantization('"sift_Base1k_NEW"'::regclass, 'v_New');
 drop_quantization 
-------------------
 
(1 row)

