-- This file handles initializing the database before parallel tests are run
ALTER SYSTEM SET work_mem = '128MB';
SELECT pg_reload_conf();
 pg_reload_conf 
----------------
 t

\ir utils/sift10k_array.sql
CREATE TABLE IF NOT EXISTS sift_base10k (
     id SERIAL PRIMARY KEY,
     v REAL[128]
);
\copy sift_base10k (v) FROM '/tmp/lantern/vector_datasets/siftsmall_base_arrays.csv' with csv;
\ir utils/random_array.sql
CREATE OR REPLACE FUNCTION random_int_array(dim integer, min integer, max integer) RETURNS integer[] AS $BODY$
begin
        return (select array_agg(round(random() * (max - min)) + min) from generate_series (0, dim - 1));
end
$BODY$ LANGUAGE plpgsql;
CREATE OR REPLACE FUNCTION random_array(dim integer, min real, max real) RETURNS REAL[] AS $BODY$
begin
        return (select array_agg(random() * (max - min) + min) from generate_series (0, dim - 1));
end
$BODY$ LANGUAGE plpgsql;
CREATE SEQUENCE serial START 10001;
SELECT v as v444 from sift_base10k wHERE id = 444 LIMIT 1 \gset
SELECT id, ROUND((v <-> :'v444')::numeric, 2) FROM sift_base10k ORDER BY v <-> :'v444' LIMIT 6;
  id  |  round   
------+----------
  444 |     0.00
  830 | 45864.00
 1872 | 69753.00
 1336 | 73429.00
 2654 | 78240.00
 7642 | 78451.00

CREATE INDEX to_be_reindexed ON sift_base10k  USING lantern_hnsw (v) WITH (M=7, ef=20, ef_construction=20);
INFO:  done init usearch index
INFO:  inserted 10000 elements
INFO:  done saving 10000 vectors
SELECT id, ROUND((v <-> :'v444')::numeric, 2) FROM sift_base10k ORDER BY v <-> :'v444' LIMIT 6;
  id  |  round   
------+----------
  444 |     0.00
  830 | 45864.00
 1872 | 69753.00
 1336 | 73429.00
 2654 | 78240.00
 9185 | 78983.00

REINDEX INDEX CONCURRENTLY to_be_reindexed;
INFO:  done init usearch index
INFO:  inserted 10000 elements
INFO:  done saving 10000 vectors
WARNING:  LanternDB: hnsw index deletes are currently not implemented. This is a no-op. No memory will be reclaimed
